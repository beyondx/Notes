Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-01-15T19:25:07+08:00

====== U-Boot源码分析之Makefile ======
Created Sunday 15 January 2012

    之前用过两个版本u-boot，分析过它的Start.S文件(PowerPC、ARM)源代码，也移植过内部的各部分硬件驱动及组件(串口、I2C、SPI、Flash文件系统、USB、DMA等)源码，自我感觉比较熟悉了。但最近逛CSDN论坛发现有不少人在问U-Boot中的Makefile的一些参数含义及配置方法，这才觉得忽视了U-Boot源码中最重要的组织者。正好，又在ChinaUnix上看见了一篇http://blog.chinaunix.net/u3/90973/showart_1815948.html，解析的是1.1.6版本，2410平台的Makefile。参考了一下，这里分析2011.6版，FreeScale的mpc83xx系列处理器平台。

    u-boot的源代码包含了对几十种处理器、数百种开发板的支持，可是对于特定的开发板，配置编译过程只需要其中部分程序。这里就需要用到Makefile了。
编译
    以mpc8313erdb板为例，编译的过程分两部：
# make mpc8313erdb_config
# make
顶层Makefile分析
    要了解一个LINUX工程的结构必须看懂Makefile，尤其是顶层的，没办法，UNIX世界就是这么无奈，什么东西都用文档去管理、配置。还是以mpc8313为例，顺序分析Makefile大致的流程及结构如下：
    1) Makefile中定义了源码及生成的目标文件存放的目录,目标文件存放目录BUILD＿DIR可以通过make O=dir或者export BUILD_DIR=dir两种方式指定。如果没有指定，则设定为源码的根目录，一般编译的时候都建议指定输出目录，这样可以不影响其他的源码结构，便于管理，至于它的控制流程，每一步指令都有详细注释，感兴趣的可以看一下，再看下其它目录变量的定义：

OBJTREE和LNDIR为存放生成文件的目录，TOPDIR与SRCTREE为源码所在目录
OBJTREE  := $(if $(BUILD_DIR),$(BUILD_DIR),$(CURDIR))
SRCTREE  := $(CURDIR)
TOPDIR  := $(SRCTREE)
LNDIR  := $(OBJTREE)
export TOPDIR SRCTREE OBJTREE
    2）定义变量MKCONFIG：这个变量指向一个脚本，即顶层目录的mkconfig。
MKCONFIG := $(SRCTREE)/mkconfig
export MKCONFIG
    在编译U-BOOT之前，先要执行
#make mpc8313erdb_33_config(u-boot中有两种主频的8313处理器，所以也要添加配置)
mpc8313erdb_33_config是Makefile的一个目标，定义如下：
mpc8313erdb_33_config : unconfig
@$(MKCONFIG) -a MPC8313ERDB ppc mpc8313 mpc8313erdb freescale
unconfig::
@mkdir -p $(obj)include

    @if [ "$(findstring _33_,$@)" ] ; then \

        $(XECHO) -n "...33M ..." ; \

        echo "#define CFG_33MHZ" >>$(obj)include/config.h ; \

    fi ; \

    if [ "$(findstring _66_,$@)" ] ; then \

        $(XECHO) -n "...66M..." ; \

        echo "#define CFG_66MHZ" >>$(obj)include/config.h ; \

    fi ;

    显然，在执行# make mpc8313erdb_33__config时，先执行unconfig目标，注意不指定输出目标时，obj，src变量均为空，unconfig下面的命令清理上一次执行make *_config时生成的头文件和makefile的包含文件。主要是include/config.h和include/config.tmp文件。
    然后才执行命令@$(MKCONFIG) -a MPC8313ERDB ppc mpc8313 mpc8313erdb freescale
MKCONFIG 是顶层目录下的mkcofig脚本文件，后面五个是传入的参数。
    对于mpc8313erdb_33_config而言，mkconfig主要做三件事：
在include文件夹下建立相应的文件（夹）软连接，如果是PowerPC体系将执行以下操作：
#ln -s     asm-ppc        asm   
#ln -s  arch-mpc8313erdb    asm-ppc

生成Makefile包含文件include/config.mk，内容很简单，定义了四个变量：
ARCH   = ppc
CPU    = mpc83xx
BOARD  = mpc8313erdb

VENDOR = freescale
生成include/config.h头文件，只有一行：
/* Automatically generated - do not edit */
#include "config/ mpc8313erdb.h"

mkconfig脚本文件的执行至此结束，继续分析Makefile剩下部分。
    3）包含include/config.mk，其实也就相当于在Makefile里定义了上面四个变量而已。
    4) 指定交叉编译器前缀：
ifeq ($(ARCH),ppc)#这里根据ARCH变量，指定编译器前缀。
CROSS_COMPILE = ppc-8xx-
endif
    5)包含config.mk:
#包含顶层目录下的config.mk，这个文件里面主要定义了交叉编译器及选项和编译规则
# load other configuration
include $(TOPDIR)/config.mk
    下面分析config.mk的内容：
＠包含体系，开发板，CPU特定的规则文件：
ifdef ARCH　#指定预编译体系结构选项
sinclude $(TOPDIR)/$(ARCH)_config.mk # include architecture dependend rules
endif
ifdef CPU #定义编译时对齐，浮点等选项
sinclude $(TOPDIR)/cpu/$(CPU)/config.mk # include  CPU specific rules
endif
ifdef SOC #没有这个文件
sinclude $(TOPDIR)/cpu/$(CPU)/$(SOC)/config.mk # include  SoC specific rules
endif
ifdef BOARD　#指定特定板子的镜像连接时的内存基地址，重要！
sinclude $(TOPDIR)/board/$(BOARDDIR)/config.mk # include board specific rules
endif
＠定义交叉编译链工具
# Include the make variables (CC, etc...)
#
AS = $(CROSS_COMPILE)as
LD = $(CROSS_COMPILE)ld
CC = $(CROSS_COMPILE)gcc
CPP = $(CC) -E
AR = $(CROSS_COMPILE)ar
NM = $(CROSS_COMPILE)nm
STRIP = $(CROSS_COMPILE)strip
OBJCOPY = $(CROSS_COMPILE)objcopy
OBJDUMP = $(CROSS_COMPILE)objdump
RANLIB = $(CROSS_COMPILE)RANLIB
＠定义AR选项ARFLAGS，调试选项DBGFLAGS，优化选项OPTFLAGS
　预处理选项CPPFLAGS，C编译器选项CFLAGS，连接选项LDFLAGS
　LDFLAGS += -Bstatic -T $(LDSCRIPT) -Ttext $(TEXT_BASE) $(PLATFORM_LDFLAGS)　

指定了起始地址TEXT_BASE
＠指定编译规则：
$(obj)%.s: %.S
$(CPP) $(AFLAGS) -o $@ $
回到顶层makefile文件：
6）U-boot需要的目标文件。
OBJS  = cpu/$(CPU)/start.o # 顺序很重要，start.o必须放第一位

OBJS := $(addprefix $(obj),$(OBJS))
    7）需要的库文件：
LIBS  = lib_generic/libgeneric.a
LIBS += $(shell if [ -f board/$(VENDOR)/common/Makefile ]; then echo \

    "board/$(VENDOR)/common/lib$(VENDOR).a"; fi) 上面的意思是根据厂商选择编译通用文件，这里为freescale
LIBS += cpu/$(CPU)/lib$(CPU).a
LIBS += lib_$(ARCH)/lib$(ARCH).a
LIBS += fs/cramfs/libcramfs.a fs/fat/libfat.a fs/fdos/libfdos.a fs/jffs2/libjffs2.a \

    fs/reiserfs/libreiserfs.a fs/ext2/libext2fs.a

LIBS += net/libnet.a

LIBS += disk/libdisk.a

LIBS += drivers/bios_emulator/libatibiosemu.a

LIBS += drivers/block/libblock.a

LIBS += drivers/dma/libdma.a

LIBS += drivers/hwmon/libhwmon.a

LIBS += drivers/i2c/libi2c.a

LIBS += drivers/input/libinput.a

LIBS += drivers/misc/libmisc.a

LIBS += drivers/mmc/libmmc.a

LIBS += drivers/mtd/libmtd.a

LIBS += drivers/mtd/nand/libnand.a

LIBS += drivers/mtd/nand_legacy/libnand_legacy.a

LIBS += drivers/mtd/onenand/libonenand.a

LIBS += drivers/mtd/spi/libspi_flash.a

LIBS += drivers/net/libnet.a

LIBS += drivers/net/sk98lin/libsk98lin.a

LIBS += drivers/pci/libpci.a

LIBS += drivers/pcmcia/libpcmcia.a

LIBS += drivers/spi/libspi.a

ifeq ($(CPU),mpc83xx)

LIBS += drivers/qe/qe.a

endif
LIBS += drivers/rtc/librtc.a

LIBS += drivers/serial/libserial.a

LIBS += drivers/usb/libusb.a

LIBS += drivers/video/libvideo.a

LIBS += common/libcommon.a

LIBS += libfdt/libfdt.a

LIBS += api/libapi.a

LIBS += post/libpost.a

LIBS := $(addprefix $(obj),$(LIBS))

.PHONY : $(LIBS) $(VERSION_FILE)

LIBBOARD = board/$(BOARDDIR)/lib$(BOARD).a

LIBBOARD := $(addprefix $(obj),$(LIBBOARD))

根据上面的include/config.mk文件定义的ARCH、CPU、BOARD、SOC这些变量。硬件平台依赖的目录文件可以根据这些定义来确定。
    8）最终生成的各种镜像文件：
ALL = $(obj)u-boot.srec $(obj)u-boot.bin $(obj)System.map $(U_BOOT_NAND) $(U_BOOT_ONENAND)
all:  $(ALL)
$(obj) u-boot.bin:  $(obj)u-boot

        $(OBJCOPY) ${OBJCFLAGS} -O binary $< $@
分析一下最关键的u-boot ELF文件镜像的生成：

依赖目标depend :生成各个子目录的.depend文件，.depend列出每个目标文件的依赖文件。生成方法，调用每个子目录的make _depend。
depend dep: $(VERSION_FILE)

for dir in $(SUBDIRS) ; do $(MAKE) -C $$dir _depend ; done
@依赖目标version：生成版本信息到版本文件VERSION_FILE中。
$(VERSION_FILE):

@( printf '#define U_BOOT_VERSION "U-Boot %s%s"\n' "$(U_BOOT_VERSION)" \

'$(shell $(CONFIG_SHELL) $(TOPDIR)/tools/setlocalversion $(TOPDIR))' \

) > $@.tmp

@cmp -s $@ $@.tmp && rm -f $@.tmp || mv -f $@.tmp $@
@伪目标SUBDIRS: 执行tools ,examples ,post,post\cpu 子目录下面的make文件。
SUBDIRS = tools \
   examples \
   post \
   post/cpu
.PHONY : $(SUBDIRS)
$(SUBDIRS):
  $(MAKE) -C $@ all
@依赖目标$(OBJS)，即cpu/start.o
$(OBJS):
  $(MAKE) -C cpu/$(CPU) $(if $(REMOTE_BUILD),$@,$(notdir $@))
@依赖目标$(LIBS)，这个目标太多，都是每个子目录的库文件*.a ，通过执行相应子目录下的make来完成：
$(LIBS):
  $(MAKE) -C $(dir $(subst $(obj),,$@))
@依赖目标$(LDSCRIPT)：
$(LDSCRIPT): depend $(obj)include/autoconf.mk

$(MAKE) -C $(dir $@) $(notdir $@)
LDFLAGS += -Bstatic -T $(LDSCRIPT) -Ttext $(TEXT_BASE) $(PLATFORM_LDFLAGS)
对于mpc8313,LDSCRIPT即连接脚本文件是board/freescale/mpc8313erdb/u-boot.lds，定义了连接时各个目标文件是如何组织的。

@执行连接命令：
cd $(LNDIR) && $(LD) $(LDFLAGS) $$UNDEF_SYM $(__OBJS) \
   --start-group $(__LIBS) --end-group $(PLATFORM_LIBS) \
   -Map u-boot.map -o u-boot
其实就是把start.o和各个子目录makefile生成的库文件按照LDFLAGS连接在一起，生成ELF文件u-boot 和连接时内存分配图文件u-boot.map。
9)对于各子目录的makefile文件，主要是生成*.o文件然后执行AR生成对应的库文件。如lib_generic文件夹Makefile：
LIB = $(obj)libgeneric.a
COBJS = bzlib.o bzlib_crctable.o bzlib_decompress.o \
   bzlib_randtable.o bzlib_huffman.o \
   crc32.o ctype.o display_options.o ldiv.o \
   string.o vsprintf.o zlib.o
SRCS  := $(COBJS:.o=.c)
OBJS := $(addprefix $(obj),$(COBJS))
$(LIB): $(obj).depend $(OBJS) #项层Makefile执行make libgeneric.a
$(AR) $(ARFLAGS) $@ $(OBJS)
    整个makefile剩下的内容全部是各种不同的开发板的*_config:目标的定义了。
    概括起来，工程的编译流程也就是通过执行执行一个make *_config传入ARCH，CPU，BOARD，VENDOR参数，mkconfig根据参数将include头文件夹相应的头文件夹连接好，生成config.h。然后执行make分别调用各子目录的makefile 生成所有的obj文件和obj库文件*.a，最后连接所有目标文件，生成镜像。不同格式的镜像都是调用相应工具由elf镜像直接或者间接生成的。
    剩下的工作就是分析U-Boot源代码了，有兴趣的可以看下我对Start.S分析的文章。
