Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-11-04T22:36:52+08:00

====== Qt坐标系统与图形绘制 ======
Created Friday 04 November 2011

http://www.dzsc.com/data/html/2009-6-29/77236.html

为了能够使用Qt开发图形绘制软件，首先应该掌握Qt的坐标系统。在Qt中，通过QPainter类来控制它的坐标系统。连同QPaintDevice类与QPaintEngine类，QPainter类构成了Qt绘图系统的基础。其中，QPainter用于执行绘图的操作；QPaintDevice是对**一块二维空间的抽象**，在这块空间上，我们可以使用QPainter进行图形的绘制；QPaintEngine提供了在不同的设备上进行绘图的接口。

QPaintDevice类是能够进行绘图的对象的基类，QWidget，QPixmap，QPicture，QImage，以及QPrinter类继承了QPaintEngine类的绘图能力。绘图设备的缺省坐标系统是以**左上角**作为原点，x坐标向右递增，y坐标向下递增。单位对于不同的设备是不同的，在基于像素的设备上，以一个像素作为缺省单位，而在打印机上，以1/72英寸作为缺省单位。

在编写图形绘制软件时，我们需要进**行逻辑坐标与物理坐标**之间的转换，这部分功能由QPainter的转换矩阵，视口，以及窗口来实现。缺省情况下，逻辑坐标与物理坐标是一致的。QPainter也支持平移与旋转这样的坐标变换。

图元的尺寸（宽度与高度）总是对应于它的数学模型，并且会__忽略它所使用的笔的宽度__。下图是通过两个点来实现矩形和直线的例子，用到的代码为：
{{./1.jpg}}
　　QRect（1，2，7，6）                                                   QLine（2，7，6，1）

在绘图的时候，我们使用QPainter::Antialiasing的渲染暗示来控制像素渲染。计算机绘图会出现走样的情况，如下图所示：在绘制直线的时候，出现了边缘不规则的情况。
{{./2.jpg}}

如果我们设置了QPainter的反走样渲染暗示，像素将会对称的出现在点的两侧。因此，可以使用以下代码来解决绘制直线出现锯齿的问题.　　这样绘制的直线如下图所示：
{{./3.jpg}}
