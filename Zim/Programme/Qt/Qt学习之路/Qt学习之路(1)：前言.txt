Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-10-31T12:47:04+08:00

====== Qt学习之路(1)：前言 ======
Created Monday 31 October 2011

http://devbean.blog.51cto.com/448512/193918

原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。http://devbean.blog.51cto.com/448512/193918
Qt是一个著名的C++库——或许并不能说这只是一个GUI库，因为Qt十分庞大，并不仅仅是GUI。使用Qt，在一定程序上你获得的是一个“一站式”的服务：不再需要研究STL，不再需要C++的<string>，因为Qt有它自己的QString等等。或许这样说很偏激，但Qt确实是一个“伟大的C++库”。

我们所使用的Qt，确切地说也就是它的GUI编程部分。C++的GUI编程同Java不同：GUI并不是C++标准的一部分。所以，如果使用Java，那么你最好的选择就是AWT/Swing，或者也可以使SWT/JFace，但是，C++的GUI编程给了你更多的选择：wxWidget, gtk++以及Qt。这几个库我都有接触，但是接触都不是很多，只能靠一些资料和自己的一点粗浅的认识说一下它们之间的区别(PS: 更详尽的比较在前面的文章中有)。

首先说wxWidget，这是一个标准的C++库，和Qt一样庞大。它的语法看上去和MFC类似，有大量的宏。据说，一个MFC程序员可以很容易的转换到wxWidget上面来。wxWidget有一个很大的优点，就是它的界面都是原生风格的。这是其他的库所不能做到的。wxWidget的运行效率很高，据说在Windows平台上比起微软自家的MFC也不相上下。

gtk++其实是一个C库，不过由于C++和C之间的关系，这点并没有很大的关系。但是，gtk++是一个使用C语言很优雅的实现了面向对象程序设计的范例。不过，这也同样带来了一个问题——它的里面带有大量的类型转换的宏来模拟多态，并且它的函数名“又臭又长(不过这点我倒是觉得无所谓，因为它的函数名虽然很长，但是同样很清晰)”，使用下划线分割单词，看上去和Linux如出一辙。由于它是C语言实现，因此它的运行效率当然不在话下。gtk++并不是模拟的原生界面，而有它自己的风格，所以有时候就会和操作系统的界面显得格格不入。

再来看Qt，和wxWidget一样，它也是一个标准的C++库。但是它的语法很类似于Java的Swing，十分清晰，而且SIGNAL/SLOT机制使得程序看起来很明白——这也是我首先选择Qt的一个很重要的方面，因为我是学Java出身的 :) 。不过，所谓“成也萧何，败也萧何”，这种机制虽然很清楚，但是它所带来的后果是你需要使用Qt的qmake对程序进行预处理，才能够再使用make或者nmake进行编译。并且它的界面也不是原生风格的，尽管Qt使用style机制十分巧妙的模拟了本地界面。另外值得一提的是，Qt不仅仅运行在桌面环境中，Qt已经被Nokia收购，它现在已经会成为Symbian系列的主要界面技术——Qt是能够运行于嵌入式平台的。

以往人们对Qt的授权多有诟病。因为Qt的商业版本价格不菲，开源版本使用的是GPL协议。但是现在Qt的开源协议已经变成LGPL。这意味着，你可以将Qt作为一个库连接到一个闭源软件里面。可以说，现在的Qt协议的争议已经不存在了——因为wxWidgets或者gtk+同样使用的是类似的协议发布的。

在本系列文章中，我们将使用Qt4进行C++ GUI的开发。我是参照着《C++ GUI Programming with Qt4》一书进行学习的。其实，我也只是初学Qt4，在这里将这个学习笔记记下来，希望能够方便更多的朋友学习Qt4。我是一个Java程序员，感觉Qt4的一些命名规范以及约束同Java有异曲同工之妙，因而从Java迁移到Qt4似乎困难不大。不过，这也主要是因为Qt4良好的设计等等。

闲话少说，还是尽快开始下面的学习吧！
