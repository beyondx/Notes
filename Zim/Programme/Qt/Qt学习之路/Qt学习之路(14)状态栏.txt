Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-10-31T16:06:51+08:00

====== Qt学习之路(14)状态栏 ======
Created Monday 31 October 2011

原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。http://devbean.blog.51cto.com/448512/210947

有段时间没有写过博客了。假期去上海旅游，所以一直没有能够上网。现在又来到这里，开始新的篇章吧！
 
今天的内容主要还是继续完善前面的那个程序。我们要为我们的程序加上一个状态栏。
 
状态栏位于主窗口的最下方，提供一个显示**工具提示**等信息的地方。一般地，当窗口不是最大化的时候，状态栏的右下角会有一个可以调节大小的__控制点__；当窗口最大化的时候，这个控制点会自动消失。Qt提供了一个__QStatusBar类__来实现状态栏。
 
Qt具有一个相当成熟的GUI框架的实现——这一点感觉比Swing要强一些——Qt似乎对GUI的开发做了很多设计，比如QMainWindow类里面就有一个statusBar()函数，用于实现状态栏的调用。类似menuBar()函数，如果不存在状态栏，该函数会自动创建一个，如果已经创建则会返回这个状态栏的指针。如果你要替换掉已经存在的状态栏，需要使用QMainWindow的__setStatusBar()__函数。
 
在Qt里面，状态栏显示的信息有三种类型：**临时信息、一般信息和永久信息**。其中，临时信息指临时显示的信息，比如QAction的提示等，也可以设置自己的临时信息，比如程序启动之后显示Ready，一段时间后自动消失——这个功能可以使用QStatusBar的__showMessage()__函数来实现；一般信息可以用来显示页码之类的；永久信息是不会消失的信息，比如可以在状态栏提示用户Caps Lock键被按下之类。
 
QStatusBar继承自QWidget，因此它可以__添加其他的QWidget__。下面我们在QStatusBar上添加一个QLabel。
 
首先在class的声明中添加一个私有的QLabel属性：
 
private:
        QAction *openAction;
        QLabel *msgLabel;
 
然后在其构造函数中添加：
 
        msgLabel = new QLabel;
        msgLabel->setMinimumSize(msgLabel->sizeHint());
        msgLabel->setAlignment(Qt::AlignHCenter);

        statusBar()->addWidget(msgLabel);
 
这里，第一行创建一个QLabel的对象，然后设置最小大小为其本身的建议大小——注意，这样设置之后，这个最小大小可能是变化的——最后设置显示规则是水平居中(HCenter)。最后一行使用statusBar()函数将这个label添加到状态栏。编译运行，将鼠标移动到工具条或者菜单的QAction上，状态栏就会有相应的提示：
 {{./1.png}}
 
看起来是不是很方便？只是，我们很快发现一个问题：当没有任何提示时，状态栏会有一个短短的竖线：
 {{./2.png}}
 
这是什么呢？其实，这是__QLabel的边框__。当没有内容显示时，QLabel只显示出自己的一个边框。但是，很多情况下我们并不希望有这条竖线，于是，我们对statusBar()进行如下设置：
 
statusBar()->setStyleSheet(QString("QStatusBar::item{border: 0px}"));
 
这里先不去深究这句代码是什么意思，简单来说，就是把QStatusBar的子组件的border设置为0，也就是没有边框。现在再编译试试吧！那个短线消失了！
 
QStatusBar右下角的大小控制点可以通过setSizeGripEnabled()函数来设置是否存在，详情参见API文档。
 
好了，现在，我们的状态栏已经初步完成了。由于QStatusBar可以添加多个QWidget，因此，我们可以构建出很复杂的状态栏。
