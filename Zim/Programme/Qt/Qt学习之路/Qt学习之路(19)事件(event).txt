Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-10-31T21:41:09+08:00

====== Qt学习之路(19)事件(event) ======
Created Monday 31 October 2011

原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。http://devbean.blog.51cto.com/448512/223974

前面说了几个标准对话框，下面不打算继续说明一些组件的使用，因为这些使用很难讲完，很多东西都是与实际应用相关的。实际应用的复杂性决定了我们根本不可能把所有组件的所有使用方法都说明白。这次来说说Qt相对高级一点的特性：事件。
 
事件(event)是由系统或者Qt本身在不同的时刻发出的。当用户按下鼠标，敲下键盘，或者是窗口需要__重新绘制__的时候，都会发出一个相应的事件。一些事件是在对__用户操作__做出响应的时候发出，如键盘事件等；另一些事件则是由__系统自动发出__，如计时器事件。
 
一般来说，使用Qt编程时，我们并不会把主要精力放在事件上，因为在Qt中，需要我们关心的__事件总会发出一个信号__。比如，我们关心的是QPushButton的鼠标点击，但我们不需要关心这个鼠标点击事件，而是关心它的clicked()信号。这与其他的一些框架不同：在Swing中，你所要关心的是JButton的ActionListener这个点击事件。
 
Qt的事件很容易和信号槽混淆。这里简单的说明一下，__signal由具体对象发出__，然后会马上交给由connect函数连接的slot进行处理；而对于事件，Qt使用一个__事件队列__对所有发出的事件进行维护，当新的事件产生时，会被追加到事件队列的尾部，前一个事件完成后，取出后面的事件进行处理。但是，必要的时候，Qt的事件也是可以不进入事件队列，而是__直接处理__的。并且，事件还可以使用“__事件过滤器__”进行过滤。

==== 总的来说，如果我们使用组件，我们关心的是信号槽；如果我们自定义组件，我们关心的是事件。 ====

===== 事件处理函数会发出相应的信号。 =====
因为我们可以通过事件来改变组件的默认操作。比如，如果我们要自定义一个QPushButton，那么我们就需要重写它的鼠标点击事件和键盘处理事件，并且在恰当的时候发出clicked()信号。
 
还记得我们在main函数里面创建了一个QApplication对象，然后调用了它的exec()函数吗？其实，这个函数就是开始Qt的__事件循环__。在执行exec()函数之后，程序将进入事件循环来__监听__应用程序的事件。当事件发生时，Qt将创建一个__事件对象__。Qt的所有事件都继承于__QEvent__类。在事件对象创建完毕后，Qt将这个事件对象传递给QObject的__event()__函数。event()函数并不直接处理事件，而是按照事件对象的类型分派给特定的__事件处理函数__(event handler)。关于这一点，我们会在以后的章节中详细说明。
 
在所有组件的父类QWidget中，定义了很多事件处理函数，如keyPressEvent()、keyReleaseEvent()、mouseDoubleClickEvent()、mouseMoveEvent ()、mousePressEvent()、mouseReleaseEvent()等。这些函数都是protected virtual的，也就是说，我们应该在子类中重定义这些函数。下面来看一个例子。
 
#include <QApplication>
#include <QWidget>
#include <QLabel>
#include <QMouseEvent>

class EventLabel : public QLabel
{

protected:
        void mouseMoveEvent(QMouseEvent *event);
        void mousePressEvent(QMouseEvent *event);
        void mouseReleaseEvent(QMouseEvent *event);
};

void EventLabel::mouseMoveEvent(QMouseEvent *event)
{
        this->setText(QString("<center><h1>Move: (%1, %2)</h1></center>")
                                                        .arg(QString::number(event->x()), QString::number(event->y())));
}

void EventLabel::mousePressEvent(QMouseEvent *event)
{
        this->setText(QString("<center><h1>Press: (%1, %2)</h1></center>")
                                                        .arg(QString::number(event->x()), QString::number(event->y())));
}

void EventLabel::mouseReleaseEvent(QMouseEvent *event)
{
        QString msg;
        msg.sprintf("<center><h1>Release: (%d, %d)</h1></center>",
                                event->x(), event->y());
        this->setText(msg);
}

int main(int argc, char *argv[])
{
        QApplication app(argc, argv);
        EventLabel *label = new EventLabel;
        label->setWindowTitle("MouseEvent Demo");
**        label->resize(300, 200);**
        label->show();
        return app.exec();
}
 
这里我们继承了QLabel类，重写了mousePressEvent、mouseMoveEvent和MouseReleaseEvent三个函数。我们并没有添加什么功能，只是在鼠标按下(press)、鼠标移动(move)和鼠标释放(release)时把坐标显示在这个Label上面。注意我们在mouseReleaseEvent函数里面有关QString的构造。我们没有使用arg参数的方式，而是使用C语言风格的sprintf来构造QString对象，如果你对C语法很熟悉(估计很多C+++程序员都会比较熟悉的吧)，那么就可以在Qt中试试熟悉的C格式化写法啦！
