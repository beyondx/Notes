Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-10-31T13:34:07+08:00

====== Qt学习之路(3)：Hello, world!(续) ======
Created Monday 31 October 2011
原创作品，允许转载，转载时请务必以超链接形式标明文章 原始出处 、作者信息和本声明。否则将追究法律责任。http://devbean.blog.51cto.com/448512/194137

下面来逐行解释一下前面的那个Hello, world!程序，尽管很简单，但却可以对Qt程序的结构有一个清楚的认识。现在再把代码贴过来：
 
#include <QApplication>
#include <QLabel>

int main(int argc, char *argv[])
{
        QApplication app(argc, argv);
        QLabel *label = new QLabel("Hello, world!");
        label->show();
        return app.exec();
}
 
第1行和第2行就是需要引入的头文件。和普通的C++程序没有什么两样，如果要使用某个组件，就必须要引入相应的头文件，这类似于Java的import机制。值得说明的是，**Qt中头文件和类名是一致的**。也就是说，如果你要使用某个类的话，它的类名就是它的头文件名。
 
第3行是空行 :)
 
第4行是main函数函数头。这与普通的C++程序没有什么两样，学过C++的都明白。因此你可以看到，实际上，Qt完全通过普通的main函数进入，这不同于wxWidgets，因为wxWidgets的Hello, world需要你继承它的一个wxApp类，并覆盖它的wxApp::OnInit方法，系统会自动将OnInit编译成入口函数。不过在Qt中，就不需要这些了。
 
第5行，噢噢，大括号…
 
第6行，创建一个QApplication对象。这个对象用于__管理应用程序级别的资源__。QApplication的构造函数要求两个参数，分别来自main的那两个参数，因此，Qt在一定程度上是支持命令行参数的。
 
第7行，创建一个QLabel对象，并且能够显示Hello, world!字符串。和其他库的Label控件一样，这是用来显示文本的。在Qt中，这被称为一个widget(翻译出来是小东西，不过这个翻译并不好…)，它等同于Windows技术里面的控件(controls)和容器(containers)。也就是说，widget可以放置其他的widget，就像Swing的组件。大多数Qt程序使用__QMainWindow或者QDialog作为顶级组件__，但Qt并不强制要求这点。在这个例子中，顶级组件就是一个QLabel。
 
第8行，使这个label可见。组件创建出来之后通常是__不可见__的，要求我们手动的使它们可见。这样，在创建出组建之后我们就可以对它们进行各种定制，以避免出现之后在屏幕上面会有闪烁。
 
第9行，将应用程序的控制权移交给Qt。这时，程序的__事件循环__就开始了，也就是说，这时可以相应你发出的各种事件了。这类似于gtk+最后的一行gtk_main()。
 
第10行，大括号……程序结束了。
 
注意，我们并没有使用delete去删除创建的QLabel，因为在程序结束后操作系统会回收这个空间——这只是因为这个QLabel占用的内存比较小，但有时候这么做会引起麻烦的，特别是在大程序中，因此必须小心。
 
好了，程序解释完了。按照正常的流程，下面应该编译。前面也提过，Qt的编译不能使用普通的make，而必须先使用__qmake__进行预编译。所以，第一步应该是在工程目录下使用
 
qmake -project
 
命令创建.pro文件(比如说是叫helloworld.pro)。然后再在.pro文件目录下使用
 
qmake helloworld.pro  (make)
 
或者
 
qmake -tp vc helloworld.pro  (nmake)
 
生成makefile，然后才能调用make或者是nmake进行编译。不过因为我们使用的是IDE，所以这些步骤就不需要我们手动完成了。
 
值得说明一点的是，这个qmake能够生成标准的makefile文件，因此完全可以利用qmake自动生成makefile——这是题外话。
 
好了，下面修改一下源代码，把QLabel的创建一句改成
 
QLabel *label = new QLabel("<h2><font color='red'>Hello</font>, world!<h2>");
 
运行一下：
 
 同Swing的JLabel一样，__Qt也是支持HTML解析__的。
 
好了，这个Hello, world就说到这里！明确一下Qt的程序结构，在一个Qt源代码中，以下两条语句是必不可少的：
QApplication app(argc, argv);
//...
return app.exec();
