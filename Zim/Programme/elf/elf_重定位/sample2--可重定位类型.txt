Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-12-22T10:50:43+08:00

====== sample2--可重定位类型 ======
Created Saturday 22 December 2012
[geekard@geekard rel]$ cat -n rel.c  **#测试文件**
     1  #include <stdio.h>
     2  int  globalVar = 1;
     3  int  globalVarUninit;
     4  static int  globalVarStatic = 3;
     5  extern externVar;
     6    
     7  extern void externFun(void);
     8  void Fun(void) {}
     9
    10  int main(void) {
    11    int autoVar = globalVar;
    12    static int staticVar = 2;
    13    globalVarUninit = externVar;
    14    printf("%d\n",globalVarStatic);
    15    externFun();
    16    Fun();
    17  }
[geekard@geekard rel]$ **gcc -c rel.c  #编译，生成可重定位类型的目标对象文件**
[geekard@geekard rel]$ readelf **-r** rel.o  **#查看可重定位条目**

Relocation section '.rel.text' at offset 0x4e0 contains 8 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
0000000f  00000b01 R_386_32          00000000   globalVar  __#对文件中的第11行变量引用进行重定位__
00000018  00000f01 R_386_32          00000000   externVar  **#13**
0000001d  00000c01 R_386_32          00000004   globalVarUninit **#13**
00000022  00000301 R_386_32          00000000   .data
0000002d  00000601 R_386_32          00000000   .rodata
00000032  00001002 R_386_PC32        00000000   printf **#14**
00000037  00001102 R_386_PC32        00000000   externFun **#15**
0000003c  00000d02 R_386_PC32        00000000   Fun **#16**

Relocation section '.rel.eh_frame' at offset 0x520 contains 2 entries:
 Offset     Info    Type            Sym.Value  Sym. Name
00000020  00000202 R_386_PC32        00000000   .text
00000040  00000202 R_386_PC32        00000000   .text
由于在编译时没有指定PIC，所以重定位条目没有使用GOT或PLT。对全局变量使用的时R_386_32的绝对地址重定位，对函数使用的是
R_386_PC32相对寻址重定位。

[geekard@geekard rel]$ **objdump -t rel.o   #查看符号表**

rel.o:     file format elf32-i386

SYMBOL TABLE:
00000000 l    df *ABS*  00000000 rel.c
00000000 l    d  .text  00000000 .text
00000000 l    d  .data  00000000 .data
00000000 l    d  .bss   00000000 .bss
00000004 l     O __.data__  00000004 globalVarStatic
00000000 l    d  .rodata        00000000 .rodata
00000008 l     O __.data__  00000004 staticVar.1828
00000000 l    d  .note.GNU-stack        00000000 .note.GNU-stack
00000000 l    d  .eh_frame      00000000 .eh_frame
00000000 l    d  .comment       00000000 .comment
00000000 g     O __.data__  00000004 globalVar
00000004       O __*COM*__  00000004 globalVarUninit
00000000 g     F .text  00000005 Fun
00000005 g     F .text  0000003d main
00000000         *UND*  00000000 externVar
00000000         *UND*  00000000 printf
00000000         *UND*  00000000 externFun
[geekard@geekard rel]$ 
全局静态变量、全局已初始化变量、静态自动变量都位于.data section中。但是全局未初始化变量位于COMMON(named after Fortran 77's "common blocks") section中，而且对外不可见。file-scope and local-scope uninitiated global variables 保存在bss（"Block Started by Symbol"）段中。如果想让globalVarUninit保存在.bss section中，可以在编译时使用-fno-common选项，则是建议的用法。
		geekard@ubuntu:~/Code$ cat bar.c 
		double globalVar;
		int main() {}
		geekard@ubuntu:~/Code$ cat bar.c 
		double globalVar;
		int main() {}
		geekard@ubuntu:~/Code$ 
		geekard@ubuntu:~/Code$ gcc foo.c bar.c
		编译并链接上面两个文件时，编译器并没有提示符号重复定义的错误，但是如果启用-fno-common选项，则会提示错误。
		geekard@ubuntu:~/Code$ gcc foo.c bar.c **-fno-common**
		/tmp/cceNAIis.o:(.bss+0x0): multiple definition of `globalVar'
		/tmp/ccWmFhZG.o:(.bss+0x0): first defined here
		/usr/bin/ld: Warning: size of symbol `globalVar' changed from 4 in /tmp/ccWmFhZG.o to 8 in /tmp/cceNAIis.o
		collect2: ld 返回 1
		geekard@ubuntu:~/Code$ 
		则是由于foo.oh和bar.o中的globalVar都放在.bss section中，而且都是global bind，所以会冲突。注意，放在COMMON section中时
		没有bind属性，默认是外界不可见的：
		geekard@ubuntu:~/Code$ objdump -t bar.o |grep globalVar //未启用-fno-common，无绑定信息，外界不可见
		0000000000000008       __O  *COM*__  0000000000000008 globalVar 
		geekard@ubuntu:~/Code$ objdump -t bar.o |grep globalVar  //启用-fno-common后
		0000000000000000 __g__     O __.bss__   0000000000000008 globalVar
		kkkn
[geekard@geekard rel]$ __gcc -S rel.c  #编译__
[geekard@geekard rel]$ cat rel.s  #查看编译生成的汇编代码，代码中含有指示链接器ld生成各section和重定位的指令。
        .file   "rel.c"  
        .globl  globalVar  **#符号全局可见**
        .data  **#data section开始**
        .align 4
        .type   globalVar, @object  **#符号类型**
        .size   globalVar, 4   **#符号对象大小**
globalVar:
        .long   1  **#符号的值**
        __.comm__   globalVarUninit,4,4  **#COMMON section**
        .align 4
        .type   globalVarStatic, @object
        .size   globalVarStatic, 4
globalVarStatic:
        .long   3
        .text  **#代码段开始**
        .globl  Fun
        .type   Fun, @function
Fun:
.LFB0:
        .cfi_startproc
        pushl   %ebp
        .cfi_def_cfa_offset 8
        .cfi_offset 5, -8
        movl    %esp, %ebp
        .cfi_def_cfa_register 5
        popl    %ebp
        .cfi_restore 5
        .cfi_def_cfa 4, 4
        ret
        .cfi_endproc
.LFE0:
        .size   Fun, .-Fun  #函数对象的大小
        .section        .rodata   **#rodata section的开始**
.LC0:
        .string "%d\n"
        .text
        .globl  main
        .type   main, @function
main:
.LFB1:
        .cfi_startproc
        pushl   %ebp
        .cfi_def_cfa_offset 8
        .cfi_offset 5, -8
        movl    %esp, %ebp
        .cfi_def_cfa_register 5
        andl    $-16, %esp
        subl    $32, %esp
        movl    __globalVar,__ %eax  __#对全局变量的引用是绝对寻址，没有使用GOT。汇编时as会生成R_386_32类型的重定位条目__
        movl    %eax, 28(%esp)
        movl    __externVar__, %eax
        movl    %eax, __globalVarUninit__
        movl    __globalVarStatic__, %eax
        movl    %eax, 4(%esp)
        movl    $.LC0, (%esp)
        call    __printf  #对外部或全局函数的引用，使用的是相对寻址，没有使用PLT。汇编时as会生成R_386_PC32类型的重定位条目__
        call    __externFun__
        call    __Fun  __
        leave
        .cfi_restore 5
        .cfi_def_cfa 4, 4
        ret
        .cfi_endproc
.LFE1:
        .size   main, .-main
        .data
        .align 4
        .type   __staticVar.1828__, @object
        .size   staticVar.1828, 4
staticVar.1828:
        .long   2
        .ident  "GCC: (GNU) 4.7.2"
        .section        .note.GNU-stack,"",@progbits
[geekard@geekard rel]$ 
[geekard@geekard rel]$ objdump -d rel.o

rel.o:     file format elf32-i386


Disassembly of section .text:

00000000 <Fun>:
   0:   55                      push   %ebp
   1:   89 e5                   mov    %esp,%ebp
   3:   5d                      pop    %ebp
   4:   c3                      ret    

00000005 <main>:
   5:   55                      push   %ebp
   6:   89 e5                   mov    %esp,%ebp
   8:   83 e4 f0                and    $0xfffffff0,%esp
   b:   83 ec 20                sub    $0x20,%esp
   e:   a1 00 00 00 00          mov    0x0,%eax
  13:   89 44 24 1c             mov    %eax,0x1c(%esp)
  17:   a1 00 00 00 00          mov    0x0,%eax
  1c:   a3 00 00 00 00          mov    %eax,0x0
  21:   a1 04 00 00 00          mov    0x4,%eax
  26:   89 44 24 04             mov    %eax,0x4(%esp)
  2a:   c7 04 24 00 00 00 00    movl   $0x0,(%esp)
  31:   e8 fc ff ff ff          call   32 <main+0x2d>
  36:   e8 fc ff ff ff          call   37 <main+0x32>
  3b:   e8 fc ff ff ff          call   3c <main+0x37>
  40:   c9                      leave  
  41:   c3                      ret    
[geekard@geekard rel]$ 
