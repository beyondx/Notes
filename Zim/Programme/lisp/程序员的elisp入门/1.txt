Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-02-04T22:22:11+08:00

====== 1 ======
Created Saturday 04 February 2012

http://leenux.blog.edu.cn/2004/189842.html

偶来写一点东东，介绍一下一个已经会写程序的人(比如我自己)，怎么理解
elisp这个东西。

想来想去，if，cond这种东西就不介绍了，偶相信那些在书里面花费若干
版面介绍if，cond，loop，when，unless是什么意思，该怎么用的，都是
骗人钱财。
                                                                                                                       
现在准备写的，包括怎么用emacs自己带的帮助系统，和elisp语言本身。
昨天晚上关于cons的是第一片。
                                                                                                                       
* 操作入门                                                                                                                   
                                                                                                                       
  启动emacs之后，这个被称为*scratch*的buffer，可以拿来当作实验室。
只要在想要求值的符号之后输入C-x C-e，求值的结果就会显示在屏幕下端
的mini buffer里面。如果输入C-u C-x C-e的话，求值的结果会直接贴到
point当前在的位置。
                                                                                                                       
  无论什么模式下，C-h f能够显示一个函数的doc文档，C-h v能够显示一
个变量的doc文档。这对于写程序非常有帮助，所以自己写的函数，最好也
能够把doc文档写上，将来自己或者别人都可能用的上。


* 基本概念

** elisp只有一种数据类型，就是symbol。
                                                                                                                       
所有能看的字符串，都是symbol。所有symbol都可以求值。 所有的
symbol都是平等的，不过其中有一些更平等。表示数字的symbol，例如0,
12.3, 234, 求值得到的还是这个数字本身。表示字符串的symbol，例如
"hello"，"world"，求值得到的还是字符串本身。表示keyword的symbol，
例如:foo，:bar，求值得到的还是keyword本身。更特别一点的，t求值返
回的是t，nil求值返回的是nil。最特别的是，()求值返回nil，因为()和
nil根本就是一回事情。


一个symbol__可以同时指代变量和函数__，就是说一个foo，即是变量，又是
函数，在lisp里面是合法的。

** 所有对symbol进行的操作，被称为函数。

使用函数的方法是(function var1 var2 var3)。这个例子很显然的告诉
我们，括号不能出现在symbol里面，空格也不可以。但是例如*,/这样奇怪
的符号是可以的。
                                                                                                                       
  一个函数被调用的过程，被称为**对这对括号内部求值**。注意到之前对
symbol也叫求值，这实际上暗示var1，var2，var3不一定是一个symbol，
也有可能是其他的函数调用。如果整个程序就是这样的函数一层一层嵌套
得到的时候，我们可以粗略的把它称为__函数式编程语言__。

(function var1 var2 var3)这样的一个函数，具体求值的过程，对于
elisp来说，它__先求function的值__，然后求每一个var的值，最后将对var求
值得到的结果，做为参数传递给function求值的结果。之所以强调先求，
然后求；而不是说从左到右依此求，是因为对于括号中的第一个symbol是
特别照顾的。

我们至少可以总结出两点。我们对一个symbol求值时，到底是希望得到
它代表的函数，还是希望得到它代表的变量，这__完全取决于这个symbol所__
__处的位置__。第二，elisp中，函数和变量并不是完全平等的，你不能再象
scheme中那样了。即使你(setq func (lambda (...)))，也无法直接
把它做为一个function来做，因为setq就注定了func只能被当作一个变量
来处理，而lisp只会试图去找func对应的函数。
