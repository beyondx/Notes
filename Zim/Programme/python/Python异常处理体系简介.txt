Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-07-05T15:04:48+08:00

====== Python异常处理体系简介 ======
Created 星期二 05 七月 2011

Python内建异常体系结构
BaseException
+--　SystemExit
+--　KeyboardInterrupt
+--　GeneratorExit
+--　Exception
+--　StopIteration
+--　StandardError
|　　　　+--　BufferError
|　　　　+--　ArithmeticError
|　　　　|　　　　+--　FloatingPointError
|　　　　|　　　　+--　OverflowError
|　　　　|　　　　+--　ZeroDivisionError
|　　　　+--　AssertionError
|　　　　+--　AttributeError
|　　　　+--　EnvironmentError
|　　　　|　　　　+--　IOError
|　　　　|　　　　+--　OSError
|　　　　|　　　　　　　　　+--　WindowsError　(Windows)
|　　　　|　　　　　　　　　+--　VMSError　(VMS)
|　　　　+--　EOFError
|　　　　+--　ImportError
|　　　　+--　LookupError
|　　　　|　　　　+--　IndexError
|　　　　|　　　　+--　KeyError
|　　　　+--　MemoryError
|　　　　+--　NameError
|　　　　|　　　　+--　UnboundLocalError
|　　　　+--　ReferenceError
|　　　　+--　RuntimeError
|　　　　|　　　　+--　NotImplementedError
|　　　　+--　SyntaxError
|　　　　|　　　　+--　IndentationError
|　　　　|　　　　　　　　　+--　TabError
|　　　　+--　SystemError
|　　　　+--　TypeError
|　　　　+--　ValueError
|　　　　　　　　　+--　UnicodeError
|　　　　　　　　　　　　　　+--　UnicodeDecodeError
|　　　　　　　　　　　　　　+--　UnicodeEncodeError
|　　　　　　　　　　　　　　+--　UnicodeTranslateError
+--　Warning
+--　DeprecationWarning
+--　PendingDeprecationWarning
+--　RuntimeWarning
+--　SyntaxWarning
+--　UserWarning
+--　FutureWarning
+--　ImportWarning
+--　UnicodeWarning
+--　BytesWarning

捕获异常的方式

方法一：捕获所有的异常

　'''　捕获异常的第一种方式，捕获所有的异常　'''
try:
a　=　b
b　=　c
except　Exception,data:
print　Exception,":",data
'''输出：＜type　'exceptions.Exception'＞　:　local　variable　'b'　
referenced　before　assignment　''

方法二：采用traceback模块查看异常，需要导入traceback模块

'''　捕获异常的第二种方式，使用traceback查看异常　'''
try:
a　=　b
b　=　c
except:
print　traceback.print_exc()
'''输出：　Traceback　(most　recent　call　last):
File　"test.py",　line　20,　in　main
a　=　b
UnboundLocalError:　local　variable　'b'　referenced　before　assignmen

方法三：采用sys模块回溯最后的异常

'''　捕获异常的第三种方式，使用sys模块捕获异常　'''
try:
a　=　b
b　=　c
except:
info　=　sys.exc_info()
print　info
print　info[0]
print　info[1]
'''输出：
(＜type　'exceptions.UnboundLocalError'＞,　UnboundLocalError("local　
variable　'b'　referenced　before　assignment",),
＜traceback　object　at　0x00D243F0＞)
＜type　'exceptions.UnboundLocalError'＞
local　variable　'b'　referenced　before　assignment
'''

Python异常体系介绍

　　Python的异常处理可以向用户准确反馈出错信息，所有异常都是基类Exception的子类。自定义异常都是从基类Exception中继承。Python自动将所有内建的异常放到内建命名空间中，所以程序不必导入exceptions模块即可使用异常。

　　可以使用的语句结构形式：

　　方式一：使用try,except语句来捕获异常,可以有无数个except语句来处理异常，如果所有except语句都没捕获到,则抛出异常到调用此方法的函数内处理，直到系统的主函数来处理。

　　使用except子句需要注意的事情，就是多个except子句截获异常时，如果各个异常类之间具有继承关系，则子类应该写在前面，否则父类将会直接截获子类异常。放在后面的子类异常也就不会执行到了。

try:
block
except　[excpetion,[data...]]:
block
except　[excpetion,[data...]]:
block
except　[excpetion,[data...]]:
block

　　方式二：当没有异常发生的时候执行else语句

try:
block
except　　[excpetion,[data...]]:
block
else:
block

　　方式三：finally 语句,不管有没有发生异常都将执行finally语句块

　　例如我们在python中打开一个文件进行读写操作，我在操作过程中不管是否出现异常，最终都是要把该文件关闭的。

try:
block
finally:
block

　　方式四：try,except,finally

try:
block
except:
block
finally:
block

　　引发异常

　　raise [exception[,data]]

　　在Python中，要想引发异常，最简单的形式就是输入关键字raise，后跟要引发的异常的名称。

　　异常名称标识出具体的类：Python异常是那些类的对象。执行raise语句时，Python会创建指定的异常类的一个对象。

　　raise语句还可指定对异常对象进行初始化的参数。为此，请在异常类的名称后添加一个逗号以及指定的参数（或者由参数构成的一个元组）。

　　例：

try:
raise　MyError　#自己抛出一个异常
except　MyError:
print　'a　error'

raise　ValueError,’invalid　argument’

　　捕捉到的内容为：

type　　=　VauleError
message　=　invalid　argument

　　异常处理的一些其它用途

　　除了处理实际的错误条件之外，对于异常还有许多其它的用处。在标准 Python 库中一个普通的用法就是试着导入一个模块，然后检查是否它能使用。

　　导入一个并不存在的模块将引发一个 ImportError 异常。你可以使用这种方法来定义多级别的功能――依靠在运行时哪个模块是有效的，或支持多种平台 (即平台特定代码被分离到不同的模块中)。

　　你也能通过创建一个从内置的 Exception 类继承的类定义你自己的异常，然后使用 raise 命令引发你的异常。如果你对此感兴趣，请看进一步阅读的部分。

　　下面的例子演示了如何使用异常支持特定平台功能。代码来自 getpass 模块，一个从用户获得口令的封装模块。获得口令在 UNIX、Windows 和 Mac OS 平台上的实现是不同的，但是这个代码封装了所有的不同之处。

　　例支持特定平台功能

#　Bind　the　name　getpass　to　the　appropriate　function

try:
import　termios,　TERMIOS　　　　　　　　　　　　　　　　　　　　
except　ImportError:
try:
import　msvcrt　　　　　　　　　　　　　　　　　　　　　　　　　　
except　ImportError:
try:
from　EasyDialogs　import　AskPassword
except　ImportError:
getpass　=　default_getpass　　　　　　　　　　
else:　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　
getpass　=　AskPassword
else:
getpass　=　win_getpass
else:
getpass　=　unix_getpass

　　termios 是 UNIX 独有的一个模块，它提供了对于输入终端的底层控制。

　　如果这个模块无效 (因为它不在你的系统上，或你的系统不支持它)，则导入失败，Python 引发我们捕捉的 ImportError 异常。

　　OK，我们没有 termios，所以让我们试试 msvcrt，它是 Windows 独有的一个模块，可以提供在 Microsoft Visual C++ 运行服务中的许多有用的函数的一个API。如果导入失败，

　　Python 会引发我们捕捉的 ImportError 异常。

　　如果前两个不能工作，我们试着从 EasyDialogs 导入一个函数，它是 Mac OS 独有的一个模块，提供了各种各样类型的弹出对话框。再一次，如果导入失败，Python 会引发一个我们捕捉的 ImportError 异常。

　 　这些平台特定的模块没有一个有效 (有可能，因为 Python 已经移植到了许多不同的平台上了)，所以我们需要回头使用一个缺省口令输入函数 (这个函数定义在 getpass 模块中的别的地方)。注意我们在这里所做的：我们将函数 default_getpass 赋给变量 getpass。如果你读了官方 getpass 文档，它会告诉你 getpass 模块定义了一个 getpass 函数。它是这样做的：通过绑定 getpass 到正确的函数来适应你的平台。然后当你调用 getpass 函数时，你实际上调用了平台特定的函数，是这段代码已经为你设置好的。你不需要知道或关心你的代码正运行在何种平台上；只要调用 getpass，则它总能正确处理。

　　一个 try...except 块可以有一条 else 子句，就像 if 语句。如果在 try 块中没有异常引发，然后 else 子句被执行。在本例中，那就意味着如果 from EasyDialogs import AskPassword 导入可工作，所以我们应该绑定 getpass 到 AskPassword 函数。其它每个 try...except 块有着相似的 else 子句，当我们发现一个 import 可用时，就绑定 getpass 到适合的函数。

　　自定义异常类，继承Exception类及其子类

class　MyError(　ArithmeticError　):
pass

class　MyError2　(　Exception　):
pass
