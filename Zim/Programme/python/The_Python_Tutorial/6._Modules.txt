Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-01-04T12:43:00+08:00

====== 6. Modules ======
Created Wednesday 04 January 2012

If you quit from the Python interpreter and enter it again, the** definitions** you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead. This is known as __creating a script__. As your program gets longer, you may want to __split it into several files__ for easier maintenance. You may also want to use a __handy function__ that you’ve written in several programs without copying its definition into each program.

To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such __a file is called a module__; definitions from a module can be imported into other modules or into the __main module__ (the collection of variables that you have access to in a script executed at __the top level__ and in calculator mode).

__A module is a file containing Python definitions and statements.__ The file name is the module name with the suffix **.py** appended. Within a module, the module’s name (as a string) is available as the value of the global variable** __name__**. For instance, use your favorite text editor to create a file called fibo.py in the current directory with the following contents:

# Fibonacci numbers module

def fib(n):    # write Fibonacci series up to n
    a, b = 0, 1
    while b < n:
        print b,
        a, b = b, a+b

def fib2(n): # return Fibonacci series up to n
    result = []
    a, b = 0, 1
    while b < n:
        result.append(b)
        a, b = b, a+b
    return result

Now enter the Python interpreter and import this module with the following command:
>>>

>>> import fibo

This does not enter the names of the functions defined in **fibo** directly in the __current symbol table__; it only enters the module name fibo there. Using the module name you can access the functions:
>>>

>>> fibo.fib(1000)
1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987
>>> fibo.fib2(100)
[1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]
>>> fibo.**__name__**
'fibo'

If you intend to use a function often you can assign it to __a local name__:
>>>

>>> fib = fibo.fib
>>> fib(500)
1 1 2 3 5 8 13 21 34 55 89 144 233 377

===== 6.1. More on Modules =====

A module can contain executable statements as well as function definitions. These statements are intended to __initialize the module__. They are executed only the __first time__ the module is imported somewhere. [1]

Each module has__ its own private symbol table__, which is used as the __global symbol table by all functions defined in the module__. Thus, the author of a module can **use global variables in the module without worrying about accidental clashes with a user’s global variables.** On the other hand, if you know what you are doing you can touch a module’s global variables with the same notation used to refer to its functions, modname.itemname.

Modules can import other modules. It is customary but not required to** place all import statements at the beginning of a module **(or script, for that matter). The imported module names are placed in the importing module’s __global symbol table__.

There is a variant of the import statement that imports names from a module __directly __into the importing module’s symbol table. For example:
>>>

>>> from fibo import fib, fib2
>>> fib(500)
1 1 2 3 5 8 13 21 34 55 89 144 233 377

This does __not introduce the module name __from which the imports are taken in the local symbol table (so in the example, fibo is not defined).

There is even a variant to import all names that a module defines:
>>>

>>> from fibo import *
>>> fib(500)
1 1 2 3 5 8 13 21 34 55 89 144 233 377

This imports all names except those **beginning with an underscore **(_).

Note that in general the practice of importing * from a module or package is __frowned upon__, since it often causes poorly readable code. However, it is okay to use it to save typing in interactive sessions.

Note

For efficiency reasons, __each module is only imported once per interpreter session__. Therefore, if you change your modules, you must restart the interpreter – or, if it’s just one module you want to test interactively, use reload(), e.g. __reload(modulename)__.

==== 6.1.1. Executing modules as scripts ====

When you run a Python module with

python** fibo.py** <arguments>

__the code in the module will be executed__, just as if you imported it, but with the ____name__ set to "__main__"__. That means that by adding this code at the end of your module:

if** __name__ == "__main__"**:
    import sys
    fib(int(sys.argv[1]))

只有在python__命令行__上将该模块当作脚本来执行时，__name__ 变量的值才为 "__main__".
you can make the file usable as a script as well as an importable module, because the code that parses the command line only runs if the module is executed as the “main” file:

$ python fibo.py 50
1 1 2 3 5 8 13 21 34

__If the module is imported, the code is not run__:
>>>

>>> import fibo
>>>

This is often used either to provide a convenient user interface to a module, or for testing purposes (running the module as a script executes a test suite).

==== 6.1.2. The Module Search Path ====

When a module named spam is imported,__ the interpreter searches for a file named spam.py__ in the directory containing the input script and then in the list of directories specified by the environment variable__ PYTHONPATH__. This has the same syntax as the shell variable PATH, that is, **a list of directory names**. When PYTHONPATH is not set, or when the file is not found there, the search continues in an installation-dependent default path; on Unix, this is usually .:/usr/local/lib/python.

Actually, modules are searched in the list of directories given by the variable__ sys.path__ which is initialized from the directory containing the input script (or the current directory), PYTHONPATH and the installation- dependent default. This allows Python programs that know what they’re doing to modify or replace the module search path. Note that because the directory containing the script being run is on the search path,__ it is important that the script not have the same name as a standard module__, or Python will attempt to load the script as a module when that module is imported. This will generally be an error. See section Standard Modules for more information.

==== 6.1.3. “Compiled” Python files ====

As an important speed-up of the start-up time for short programs that use a lot of standard modules, if a file called__ spam.pyc __exists in the directory where spam.py is found, this is assumed to contain an already-“__byte-compiled__” version of the module spam. 

The **modification time** of the version of spam.py used to create spam.pyc is recorded in spam.pyc, and the .pyc file is ignored if these don’t match.

Normally, you don’t need to do anything to create the spam.pyc file. Whenever spam.py is successfully compiled, an attempt is made to write the compiled version to spam.pyc. It is not an error if this attempt fails; if for any reason the file is not written completely, the resulting spam.pyc file will be recognized as invalid and thus ignored later. The contents of the spam.pyc file are platform independent, so __a Python module directory can be shared__ by machines of different architectures.

Some tips for experts:

    When the Python interpreter is invoked with the__ -O __flag, optimized code is generated and stored in__ .pyo__ files. The optimizer currently doesn’t help much; it only removes __assert statements__. When -O is used, all bytecode is optimized; .pyc files are ignored and .py files are compiled to optimized bytecode.

    Passing two -O flags to the Python interpreter (__-OO__) will cause the bytecode compiler to perform optimizations that could in some rare cases result in malfunctioning programs. Currently **only __doc__ strings are removed from the bytecode**, resulting in more compact .pyo files. Since some programs may rely on having these available, you should only use this option if you know what you’re doing.

    A program __doesn’t run any faster__ when it is read from a .pyc or .pyo file than when it is read from a .py file; the only thing that’s faster about .pyc or .pyo files is the speed with which they are__ loaded__.

    When a script is run by giving its name on the command line, the bytecode for the script is never written to a .pyc or .pyo file. Thus, the startup time of a script may be reduced by moving most of its code to a module and having __a small bootstrap script__ that imports that module. It is also possible to name a .pyc or .pyo file directly on the command line.

    It is possible to have a file called spam.pyc (or spam.pyo when -O is used) without a file spam.py for the same module. This can be used to __distribute a library__ of Python code in a form that is moderately hard to reverse engineer.

    The module **compileall** can create .pyc files (or .pyo files when -O is used) for all modules in a directory.

===== 6.2. Standard Modules =====

Python comes with a library of standard modules, described in a separate document, the **Python Library Reference** (“Library Reference” hereafter). Some modules are built into the interpreter; these provide access to operations that are not part of the core of the language but are nevertheless built in, either for efficiency or to provide access to operating system primitives such as system calls. The set of such modules is a configuration option which also depends on the underlying platform For example, the winreg module is only provided on Windows systems. One particular module deserves some attention: __sys__, which is built into every Python interpreter. The variables sys.ps1 and sys.ps2 define the strings used as primary and secondary prompts:
>>>

>>> import sys
>>> sys.ps1
'>>> '
>>> sys.ps2
'... '
>>> sys.ps1 = 'C> '
C> print 'Yuck!'
Yuck!
C>

These two variables are only defined if the interpreter is in interactive mode.

The variable __sys.path__ is a list of strings that determines the __interpreter’s search path__ for modules. It is initialized to a default path taken from the environment variable PYTHONPATH, or from a built-in default if PYTHONPATH is not set. You can modify it using standard list operations:
>>>

>>> import sys
>>> sys.path.append('/ufs/guido/lib/python')

===== 6.3. The dir() Function =====

The built-in function dir() is used to find out__ which names a module defines__. It returns a sorted list of strings:
>>>

>>> import fibo, sys
>>> dir(fibo)
['__name__', 'fib', 'fib2']
>>> dir(sys)
['__displayhook__', '__doc__', '__excepthook__', '__name__', '__stderr__',
 '__stdin__', '__stdout__', '_getframe', 'api_version', 'argv',
 'builtin_module_names', 'byteorder', 'callstats', 'copyright',
 'displayhook', 'exc_clear', 'exc_info', 'exc_type', 'excepthook',
 'exec_prefix', 'executable', 'exit', 'getdefaultencoding', 'getdlopenflags',
 'getrecursionlimit', 'getrefcount', 'hexversion', 'maxint', 'maxunicode',
 'meta_path', **'modules', 'path'**, 'path_hooks', 'path_importer_cache',
 'platform', 'prefix', **'ps1', 'ps2'**, 'setcheckinterval', 'setdlopenflags',
 'setprofile', 'setrecursionlimit', 'settrace', **'stderr', 'stdin', 'stdout'**,
 'version', 'version_info', 'warnoptions']

Without arguments, dir() lists the names you have defined __currently__:
>>>

>>> a = [1, 2, 3, 4, 5]
>>> import fibo
>>> fib = fibo.fib
>>> dir()
[__'__builtins__'__, '__doc__', '__file__',** '__name__'**, 'a', 'fib', 'fibo', 'sys']

dir()的参数__为对象的标示符__，当参数为空时，列出__当前命名空间__中的符号。

Note that it lists all types of names: variables, modules, functions, etc.

dir() does not list the names of __built-in functions and variables__. If you want a list of those, they are defined in the **standard module __builtin__**:
>>>

>>> import ____builtin____
>>> dir(____builtin____)
['ArithmeticError', 'AssertionError', 'AttributeError', 'DeprecationWarning',
 'EOFError', 'Ellipsis', 'EnvironmentError', 'Exception', __'False'__,
 'FloatingPointError', 'FutureWarning', 'IOError', 'ImportError',
 'IndentationError', 'IndexError', 'KeyError', 'KeyboardInterrupt',
 'LookupError', 'MemoryError', 'NameError', __'None'__, 'NotImplemented',
 'NotImplementedError', 'OSError', 'OverflowError',
 'PendingDeprecationWarning', 'ReferenceError', 'RuntimeError',
 'RuntimeWarning', 'StandardError', 'StopIteration', 'SyntaxError',
 'SyntaxWarning', 'SystemError', 'SystemExit', 'TabError', __'True'__,
 'TypeError', 'UnboundLocalError', 'UnicodeDecodeError',
 'UnicodeEncodeError', 'UnicodeError', 'UnicodeTranslateError',
 'UserWarning', 'ValueError', 'Warning', 'WindowsError',
 'ZeroDivisionError', __'_'__, '__debug__',** '__doc__'**, '__import__',
** '__name__'**,__ 'abs'__, 'apply', 'basestring',__ 'bool'__, 'buffer',
__ 'callable'__, 'chr', 'classmethod', 'cmp', 'coerce', 'compile',
 **'complex'**, 'copyright', 'credits', 'delattr',__ 'dict', 'dir'__, 'divmod',
** 'enumerate'**, 'eval', __'execfile'__,__ 'exit'__, __'file'__, __'filter', 'float',__
 'frozenset', 'getattr', __'globals'__, 'hasattr', 'hash', 'help', 'hex',
 'id', __'input'__, 'int', 'intern',__ 'isinstance', 'issubclass'__, __'iter'__,
__ 'len'__, 'license', 'list', **'locals'**, 'long', 'map', 'max', 'memoryview',
 'min', __'object'__, 'oct', __'open'__, 'ord', 'pow', 'property',__ 'quit'__, 'range',
 __'raw_input'__, 'reduce', __'reload', 'repr', __'reversed', __'round',__ 'set',
 'setattr', 'slice', 'sorted', 'staticmethod', 'str', 'sum', 'super',
 'tuple', __'type',__ 'unichr', __'unicode'__, 'vars', 'xrange', 'zip']

===== 6.4. Packages =====

Packages are a way of structuring Python’s **module namespace **by using “__dotted module names__”. For example, the module name A.B designates a submodule named B in a package named A.

Just like the** use of modules saves the authors of different modules from having to worry about each other’s global variable names**, the use of dotted module names saves the authors of __multi-module packages like NumPy or the Python Imaging Library from having to worry about each other’s module names__.
模块隔离了各个函数或全局变量的命名空间，包机制隔离了各个包中同名的模块。

Suppose you want to design a collection of modules (a “package”) for the uniform handling of sound files and sound data. There are many different sound file formats (usually recognized by their extension, for example: .wav, .aiff, .au), so you may need to create and maintain **a growing collection of modules** for the conversion between the various file formats. There are also many different operations you might want to perform on sound data (such as mixing, adding echo, applying an equalizer function, creating an artificial stereo effect), so in addition you will be writing **a never-ending **__stream__** of modules** to perform these operations. Here’s a possible __structure__ for your package (expressed in terms of a hierarchical filesystem):

sound/                         **Top-level **package  #sound目录应该放**在sys.path的一个目录**中。
      ____init__.py  __             Initialize the sound package
      formats/                  **Subpackage** for file format conversions
              ____init__.py__
              wavread.py
              wavwrite.py
              aiffread.py
              aiffwrite.py
              auread.py
              auwrite.py
              ...
      effects/                  Subpackage for sound effects
              ____init____.py
              echo.py
              surround.py
              reverse.py
              ...
      filters/                  Subpackage for filters
              ____init____.py
              equalizer.py
              vocoder.py
              karaoke.py
              ...

When** importing the package**, Python searches through the directories on __sys.path __looking for the package subdirectory（**package是一个目录名**，当导入一个package时，python在sys.path列表中搜索含有此名的目录）.

__The __init__.py files are required to make Python treat the directories as containing packages__; this is done to prevent directories with a common name, such as// string//, from unintentionally hiding valid modules that occur later on the module search path. 
只有当目录中有____init____.py时，python才将该目录当作一个package。这样一个普通目录(其中没有__init__.py)不会被当作package，例如一个package目录pa与同名的普通目录pa放在不同的sys.path中时，python会只在前者中搜索module。

In the simplest case, __init__.py can just be **an empty file**, but it can also execute initialization code for the package or set the all variable, described later.
__package中的__init__.py会在导入该package或package中的子包、模块等时被执行。实验如下：__
		
		import sound 		 #导入一个包。创建一个新的命名空间sound，__在其中__执行__init__.py。
		import sound.filters   #__导入一个子包时会同时导入路径中的父包，创建多个命名空间__。这会创建两个命名空间:sound和sound.filters，sound空间中包含其__init__.py执行的结果；sound.filters中包含filters包的__init__.py执行的结果。
		import sound.filters.vocoder  #__导入模块时会同时导入路径中的各包，创建多个命名空间__。这会创建sound、sound.filters、sound.filters.vocoder三个命名空间。
		 
		from sound import * #__在当前命名空间中执行sound的__init__.py文件__(因此，__会将其中定义的符号导入到当前命名空间__)，同时将文件中____all__列表__中的所有符号导入到当前空间中。注意不会创建sound命名空间。
	      from sound.filters import * #先在一个临时空间中执行sound的__init__.py文件，然后__在当前命名空间中执行filters的__init__.py文件__(因此，__会将其中定义的符号导入到当前命名空间__)，同时将文件中____all__列表__中的所有符号导入到当前空间中。注意不会创建sound和sound.filters命名空间(前者被丢弃，后者被合并到当前空间)。
		from sound import filters  #先后__在不同空间中执行sound和filters的__init__.py文件，__但是只有filters的空间被保留，不会创建sound空间。
		from sound import filters.vocoder  #__错误的语法！！！，import右边不能有路径形式指定的包/模块以及模块中定义的符号。__
		from sound.filters.vocoder import decode()  #先后在不同空间中执行路径中各包的__init__.py文件但是空间__均不保留__。
注意：使用from package import item时，python会先执行package的__init__.py文件，然后__在其结果中查找是否有item符号__，若无就认为item是一个子包或模块，若是子包则创建一个命名空间在其中执行子包的__init__.py文件，若是模块则创建一个命名空间在其中执行模块文件。


Users of the package can import individual modules from the package, for example:

__import sound.effects.echo  #这种形式只能导入subpackage或module.__

This loads the **submodule** sound.effects.echo. It must__ be referenced with its full name__.

**sound.effects.echo.echofilter**(input, output, delay=0.7, atten=4)

An alternative way of importing the submodule is:

__from sound.effects import echo   #导入包中的module文件。__

This also loads the submodule echo, and makes it available **without its package prefix**, so it can be used as follows:

echo.echofilter(input, output, delay=0.7, atten=4)

Yet another variation is to import the **desired function or variable **directly:

__from sound.effects.echo import echofilter  __

Again, this loads the submodule echo, but this makes its function echofilter() directly available:

echofilter(input, output, delay=0.7, atten=4)

Note that when using__ from package import item__, the item can be either a __submodule __(or __subpackage__) of the package, or some__ other name__ defined in the package, like a function, class or variable__(item不能是路径形式__). The import statement first tests whether the item is defined **in the package(也就是package中__init__.py中定义的符号item)**; if not, it assumes it is **a module** and attempts to load its file. If it fails to find it, an ImportError exception is raised.

Contrarily, when using syntax like __import item.subitem.subsubitem__, each item except for the last **must be a package**; the last item can be a module or a package but can’t be a class or function or variable defined in the previous item.

==== 6.4.1. Importing * From a Package ====

Now what happens when the user writes__ from sound.effects import *__? Ideally, one would hope that this somehow goes out to the filesystem, finds which submodules are present in the package, and imports them all. This could take a long time and importing sub-modules might have unwanted side-effects that should only happen when the sub-module is explicitly imported.

The only solution is for the package author to __provide an explicit index of the package__. The import statement uses the following convention: if a package’s __init__.py code defines a list named ____all____, it is taken to be the list of module names that should be imported when **from package import *** is encountered. It is up to the package author to keep this list up-to-date when a new version of the package is released. Package authors may also decide not to support it, if they don’t see a use for importing * from their package. For example, the file sounds/effects/__init__.py could contain the following code:

__all__ = ["echo", "surround", "reverse"] 

This would mean that __from sound.effects import *__ would import the three named submodules of the sound package。
在两个不同空间中执行sound和effects的__init__.py文件，然后前一个空间被丢弃，后一个空间的符号会__合并到当前空间中__，同时effects中__all__列表中的包、模块等也会被导入到当前空间中。sound和sound.effects名称都不可访问。

If** __all__** is not defined, the statement** from sound.effects import * **__does not import all submodules __from the package **sound.effects** into the current namespace; it only ensures that the__ package sound.effects has been imported__ (possibly running any initialization code in __init__.py) and then imports whatever **names are defined in the package**. This includes **any names defined (and submodules explicitly loaded) by __init__.py.** It also includes any submodules of the package that were explicitly loaded by previous import statements. Consider this code:
	
	import sound.effects.echo
	import sound.effects.surround
	from sound.effects import *

In this example, the echo and surround modules are imported __in the current namespace__ because they are defined in th**e sound.effects** package when the from...import statement is executed. (This **also works** when __all__ is defined.)
在包的__init__.py文件中，也可以导入一些包、模块、函数等符号，这些符号会保留在__init__.py的包环境中(对于from ... import ....是保留在__当前环境__中)。
Although certain modules are designed to export only names that follow certain patterns when you use import *, it is still considered bad practise in production code.

Remember, there is nothing wrong with using **from Package import specific_submodule**! In fact, this is the recommended notation unless the importing module needs to use submodules with the same name from different packages.

==== 6.4.2. Intra-package References ====

The submodules often need to__ refer to each other__. For example, the surround module might use the echo module. In fact, such references are so common that the__ import statement first looks in the containing package before looking in the standard module search path__. Thus, the surround module can simply use import echo or from echo import echofilter. If the imported module is not found in the** current package** (the package of which the current module is a submodule), the import statement looks for a** top-level** module with the given name.
使用from package import item形式时，pyton会现在package的__init__.py结果中查找item符号，若没有则在package的子目录中查找名为item的package或module，若两者都没有会产生导入错误。

在子模块文件中导入其它模块时，python会现在该模块所在的package及其父package中__逐级向上查找直到__top-level package，**然后才在标准搜索路径**中查找。

When packages are structured into subpackages (as with the sound package in the example), you can use **absolute imports** to refer to submodules of __siblings__ packages. For example, if the module** sound.filters.vocoder** needs to use the echo module in the **sound.effects** package, it can use from sound.effects import echo.
上面的absolute imports 意思是__从当前模块所在的包目录结构的顶层package开始逐级指定，__也被成为implicit relative imports.

Starting with Python 2.5, in addition to the implicit relative imports described above, you can write __explicit relative imports__ with the **from module import name** form of import statement. These explicit relative imports use **leading dots** to indicate the current and parent packages involved in the relative import. From the surround module for example, you might use:

	from . import echo
	from .. import formats
	from ..filters import equalizer

Note that both explicit and implicit relative imports **are based on the name of the current module**. Since the name of the__ main module __is always "__main__", modules intended for use as the main module of a Python application should always use absolute imports.

注意：包间的引用也就是上面的两种导入方式，__只适合于包中__的模块文件或__init__.py文件，因为相对路径是相对于当前module的。所以在非包模块如交互式module(名为__main__)中使用上述语法是错误的。

==== 6.4.3. Packages in Multiple Directories ====

Packages support one more special attribute, ____path. This is initialized to be a list containing the name of the directory holding the package’s __init__.py before the code in that file is executed. This variable can be modified; doing so affects future searches for modules and subpackages contained in the package.

While this feature is not often needed, it can be used to extend the set of modules found in a package.

Footnotes
[1]	In fact function definitions are also ‘statements’ that are ‘executed’; the execution of a module-level function enters the function name in the module’s global symbol table.
