Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-01-04T19:19:44+08:00

====== 8. Errors and Exceptions ======
Created Wednesday 04 January 2012

Until now error messages haven’t been more than mentioned, but if you have tried out the examples you have probably seen some. There are (at least) two distinguishable kinds of errors: __syntax errors and exceptions__.

===== 8.1. Syntax Errors =====

Syntax errors, also known as __parsing errors__, are perhaps the most common kind of complaint you get while you are still learning Python:
>>>

>>> while True print 'Hello world'
 ** File "<stdin>", line 1, in ?**
    while True print 'Hello world'
                   ^
SyntaxError: invalid syntax

The parser repeats the offending line and displays a little ‘arrow’ pointing at the earliest point in the line where the error was detected. The error is caused by (or at least detected at) __the token preceding the arrow__: in the example, the error is detected at the keyword print, since a colon (':') is missing before it. File name and line number are printed so you know where to look in case the input came from a script.

===== 8.2. Exceptions =====

Even if a statement or expression is syntactically correct, it may cause an error when an attempt is made to execute it. **Errors detected during execution are called exceptions** and are not unconditionally fatal: you will soon learn how to **handle them** in Python programs. Most exceptions are not handled by programs, however, and result in error messages as shown here:
>>>

>>> 10 * (1/0)
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
**ZeroDivisionError**: integer division or modulo by zero
>>> 4 + spam*3
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
**NameError**: name 'spam' is not defined
>>> '2' + 2
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
**TypeError**: cannot concatenate 'str' and 'int' objects

The__ last line__ of the error message indicates what happened. Exceptions come in __different types__, and the type is printed as part of the message: the types in the example are ZeroDivisionError, NameError and TypeError. The string printed as the exception type is the name of the built-in exception that occurred. This is true for all built-in exceptions, but need not be true for user-defined exceptions (although it is a useful convention). **Standard exception names are built-in identifiers** (not reserved keywords).

The rest of the line provides detail based on the type of exception and what caused it.

The preceding part of the error message __shows the context__ where the exception happened, in the__ form of a stack traceback__. In general it contains a stack traceback listing source lines; however, it will not display lines read from standard input.

Built-in Exceptions lists the built-in exceptions and their meanings.

===== 8.3. Handling Exceptions =====

It is possible to write programs that **handle selected exceptions**. Look at the following example, which asks the user for input until a valid integer has been entered, but allows the user to** interrupt** the program (using Control-C or whatever the operating system supports); note that __a user-generated interruption is signalled by raising the KeyboardInterrupt exception__.
>>>

>>> while True:
...     try:
...         x = int(**raw_input**("Please enter a number: "))
...         break
...     except **ValueError**:
...         print "Oops!  That was no valid number.  Try again..."
...

The try statement works as follows.

* First, the try clause (the statement(s) between the try and except keywords) is executed.
* If no exception occurs, __the except clause is skipped__ and execution of the try statement is finished.
* If an exception occurs during execution of the try clause, __the rest of the clause is skipped__. Then if its **type matches** the exception named after the except keyword, the except clause is executed, and then execution continues **after** the try statement.
* If an exception occurs which does not match the exception named in the except clause, it is__ passed on to outer try statements__; if no handler is found, it is an __unhandled exception__ and** execution stops** with a message as shown above.

A try statement may have more than one except clause, to specify handlers for different exceptions. __At most one handler will be executed__. Handlers only handle exceptions that occur in the corresponding try clause, not in other handlers of the same try statement. An except clause may name** multiple exceptions** as a parenthesized tuple, for example:

... except (RuntimeError, TypeError, NameError):
...     pass

The last except clause may __omit __the exception name(s), to__ serve as a wildcard__. Use this with extreme caution, since it is easy to **mask **a real programming error in this way! It can also be used to print an error message and then __re-raise__ the exception (allowing a caller to handle the exception as well):

import sys

try:
    f = open('myfile.txt')
    s = f.readline()
    i = int(s.strip())
except **IOError **as** (errno, strerror)**:
    print "I/O error({0}): {1}".format(errno, strerror)
except** ValueError**:
    print "Could not convert data to an integer."
except:
    print "Unexpected error:", **sys.exc_info()[0]**
    __raise__

The try ... except statement has an optional __else clause__, which, when present, must follow all except clauses. It is useful for code that **must be executed if the try clause **__does not__** raise an exception**. For example:

for arg in **sys.argv[1:]**:
    try:
        f = open(arg, 'r')
    except IOError:
        print 'cannot open', arg
    else:
        print arg, 'has', len(f.readlines()), 'lines'
        f.close()

The use of the else clause is better than adding additional code to the try clause because it avoids accidentally catching an exception that wasn’t raised by the code being protected by the try ... except statement.

When an exception occurs, it may have an associated value, also known as the** exception’s argument**. The presence and type of the argument depend on the exception type.

The except clause may **specify a variable after the exception name** (or tuple). The variable is __bound to an exception instance__ with the arguments stored in __instance.args__. For convenience, the exception instance defines __str__() so the arguments can be** printed directly** without having to reference .args.

One may also instantiate an exception first before raising it and add any attributes to it as desired.
>>>

>>> try:
...    raise Exception(__'spam', 'eggs'__)
... except Exception as **inst**:
...    print type(inst)     # the exception instance
...    print inst.__args __     # arguments stored in .args
...    **print inst **          #** __str__ allows args to printed directly**
...    x, y = inst          # **__getitem__ allows args to be unpacked directly**
...    print 'x =', x
...    print 'y =', y
...
<type 'exceptions.Exception'>
('spam', 'eggs')
('spam', 'eggs')
x = spam
y = eggs

If an exception has an argument, it is printed as the last part (‘detail’) of the message for unhandled exceptions.

Exception handlers don’t just handle exceptions if they occur **immediately in** the try clause, but also if they occur inside functions that__ are called__ (even indirectly) in the try clause. For example:
>>>

>>> def this_fails():
...     x = 1/0
...
>>> try:
...     this_fails()
... except ZeroDivisionError as detail:
...     print 'Handling run-time error:', detail
...
Handling run-time error: integer division or modulo by zero

===== 8.4. Raising Exceptions =====

The** raise** statement allows the programmer to force a specified exception to occur. For example:
>>>

>>> raise NameError('HiThere')
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
NameError: HiThere

The sole argument to raise indicates** the exception** to be raised. This must be either __an exception instance or an exception class__ (a class that derives from Exception).

If you need to determine whether an exception was raised but don’t intend to handle it, a simpler form of the raise statement allows you to __re-raise__ the exception:
>>>

>>> try:
...     raise NameError('HiThere')
... except NameError:
...     print 'An exception flew by!'
...     __raise__
...
An exception flew by!
Traceback (most recent call last):
  File "<stdin>", line 2, in ?
NameError: HiThere

===== 8.5. User-defined Exceptions =====

Programs may name their own exceptions by __creating a new exception class__ (see Classes for more about Python classes). Exceptions should typically be derived from the __Exception class__, either directly or indirectly. For example:
>>>

>>> class MyError(Exception):
...     def __init__(self, value):
...         self.value = value
...     def ____str____(self):
...         return repr(self.value)
...
>>> try:
...     raise MyError(2*2)
... except MyError __as e__:
...     print 'My exception occurred, value:', **e.value**
...
My exception occurred, value: 4
>>> raise MyError('oops!')
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
__main__.MyError: 'oops!'

In this example, the default __init__() of Exception has been** overridden**. The new behavior simply creates the value attribute. This__ replaces the default behavior of creating the args attribute__.

Exception classes can be defined which do anything any other class can do, but are usually kept simple, often only** offering a number of attributes** that allow __information about the error to be extracted by handlers__ for the exception. 

When creating a module that can raise several distinct errors, a common practice is to__ create a base class__ for exceptions defined by that module, and __subclass__ that to create specific exception classes for different error conditions:

class Error(Exception):
    """Base class for exceptions in this module."""
    pass

class InputError(Error):
    """Exception raised for errors in the input.

    Attributes:
        expr -- input expression in which the error occurred
        msg  -- explanation of the error
    """

    def __init__(self, expr, msg):
        self.__expr __= expr
        self.__msg __= msg

class TransitionError(Error):
    """Raised when an operation attempts a state transition that's not
    allowed.

    Attributes:
        prev -- state at beginning of transition
        next -- attempted new state
        msg  -- explanation of why the specific transition is not allowed
    """

    def __init__(self, prev, next, msg):
        self.prev = prev
        self.next = next
        self.msg = msg

Most exceptions are defined with names that __end in “Error,” __similar to the naming of the standard exceptions.

Many standard modules define their own exceptions to report errors that may occur in functions they define. More information on classes is presented in chapter Classes.

===== 8.6. Defining Clean-up Actions =====

The try statement has another optional clause which is intended to define__ clean-up actions__ that __must be executed under all circumstances__. For example:
>>>

>>> try:
...     raise KeyboardInterrupt
... finally:
...     print 'Goodbye, world!'
...
Goodbye, world!
KeyboardInterrupt

__A finally clause is always executed before leaving the try statement__, （finally子句总是在控制流即将离开try子句前执行，不管异常是否发生。）whether an exception has occurred or not. When an exception has occurred in the try clause and has not been handled by an except clause (or it has occurred in a except or **else** clause), it is __re-raised after the finally clause has been executed__. The finally clause is also executed “on the way out” when any other clause of the try statement is left via a break, continue or return statement. A more complicated example (having **except and finally** clauses in the same try statement works as of Python 2.5):
>>>

>>> def divide(x, y):
...     try:
...         result = x / y
...     except ZeroDivisionError:
...         print "division by zero!"
...     __else:   #try子句成功执行后才执行。__
...         print "result is", result
...     __finally:__
...         print "executing finally clause"
...
>>> divide(2, 1)
result is 2     #else子句在finally子句__之前__执行。
executing finally clause
>>> divide(2, 0)   #产生的异常**先被捕获然后执行**finally子句(不会再重新触发异常)
division by zero!
**executing finally clause**
>>> divide("2", "1")
executing finally clause   #产生未捕获的异常时，fianlly子句执行完后__会自动重新触发__异常。
Traceback (most recent call last):
  File "<stdin>", line 1, in ?
  File "<stdin>", line 3, in divide
TypeError: unsupported operand type(s) for /: 'str' and 'str'

As you can see, **the finally clause is executed in any event**. The TypeError raised by dividing two strings is not handled by the except clause and therefore __re-raised__ after the finally clause has been executed.

In real world applications, the finally clause is useful for** releasing external resources** (such as files or network connections), regardless of whether the use of the resource was successful.

===== 8.7. Predefined Clean-up Actions =====

Some objects define s**tandard clean-up actions **to be undertaken when the object is no longer needed, regardless of whether or not the operation using the object succeeded or failed. Look at the following example, which tries to open a file and print its contents to the screen.

for line in open("myfile.txt"):
    print line

The problem with this code is that it** leaves the file open** for an indeterminate amount of time after the code has finished executing. This is not an issue in simple scripts, but can be a problem for larger applications. The __with statement __allows objects like files to be used in a way that **ensures they are always cleaned up promptly and correctly**.

with open("myfile.txt") __as f__:
    for line in f:
        print line

After the statement is executed,** the file f is always closed**, even if a problem was encountered while processing the lines. Other objects which provide predefined clean-up actions will indicate this in their documentation.
