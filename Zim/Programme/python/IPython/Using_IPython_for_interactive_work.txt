Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-01-06T15:30:30+08:00

====== Using IPython for interactive work ======
Created Friday 06 January 2012
http://ipython.org/ipython-doc/rel-0.12/interactive/index.html

    Introducing IPython
        Tab completion
        Exploring your objects
        Magic functions
        History
        System shell commands
        Configuration
    IPython Tips & Tricks
        Embed IPython in your programs
        Run doctests
        Use IPython to present interactive demos
        Suppress output
        Lightweight ‘version control’
    IPython reference
        Command-line usage
        Interactive use
        IPython as your default Python environment
        Embedding IPython
        Using the Python debugger (pdb)
        Extensions for syntax processing
        GUI event loop support
        Plotting with matplotlib
        Interactive demos with IPython
    IPython as a system shell
        Overview
        Aliases
        Directory management
        Enabled extensions
        Prompt customization
        String lists
    A Qt Console for IPython
        %loadpy
        Pylab
        Saving and Printing
        Colors and Highlighting
        Fonts
        Process Management
        Qt and the QtConsole
        Regressions
    An HTML Notebook IPython
        Basic Usage
        Security
        Quick Howto: running a public notebook server
        The notebook format
        Known Issues

===== Introducing IPython =====
You don’t need to know anything beyond Python to start using IPython – just type commands as you would at the standard Python prompt. But IPython can do __much more__ than the standard prompt. Some key features are described here. For more information, check the tips page, or look at examples in the IPython cookbook.

==== • Tab completion ====
Tab completion, especially for attributes, is a convenient way to explore the structure of any object you’re dealing with. Simply type__ object_name.<TAB>__ to view the object’s attributes (see the readline section for more). Besides Python objects and keywords, tab completion also works on file and directory names.

===== • Exploring your objects =====
Typing __object_name?__ will print all sorts of details about any object, including docstrings, function definition lines (for call arguments) and constructor details for classes. To get specific information on an object, you can use the magic commands **%pdoc, %pdef, %psource and %pfile**

===== • Magic functions =====

IPython has a set of predefined ‘magic functions’ that you can call with a command line style syntax. These include:

* Functions that work with code: %run, %edit, %save, %macro, %recall, etc.
* Functions which affect the shell: %colors, %xmode, %autoindent, etc.
* Other functions such as %reset, %timeit or %paste.

You can always call these using the __% prefix__, and if you’re typing one** on a line by itself,** you can omit even that:

**run thescript.py**

For more details on any magic function, call__ %somemagic?__ to read its docstring. To see all the available magic functions, call __%lsmagic__.

===== • Running and Editing =====
The %run magic command allows you to run **any python script **and __load all of its data directly into the interactive namespace__. Since the file is re-read from disk each time, changes you make to it are reflected immediately (unlike imported modules, which have to be specifically reloaded). IPython also includes dreload, a recursive reload function.

%run has special flags for__ timing__ the execution of your scripts (-t), or for running them under the control of either Python’s __pdb__ debugger (-d) or __profiler__ (-p).

The __%edit__ command gives a reasonable approximation of multiline editing, by invoking your favorite editor on the spot. IPython will execute the code you type in there as if it were typed interactively.

===== • Debugging =====
After an exception occurs, you can call __%debug__ to jump into the Python debugger (__pdb__) and examine the problem. Alternatively, if you call__ %pdb__, IPython will automatically start the debugger **on any uncaught exception**. You can print variables, see code, execute statements and even walk up and down the call stack to track down the true source of the problem. This can be an efficient way to develop and debug code, in many cases eliminating the need for print statements or external debugging tools.

You can also step through a program from the beginning by calling __%run -d theprogram.py__.

===== • History =====
IPython stores __both the commands you enter, and the results it produces__. You can easily go through previous commands with the up- and down-arrow keys, or access your history in more sophisticated ways.

Input and output history are kept in variables called __In and Out__, keyed by the prompt numbers, e.g. In[4]. The **last three objects in **__output history__ are also kept in variables named ___, __ and _____.

You can use the** %history **magic function to examine past input and output. Input history from previous sessions is saved in a__ database__, and IPython can be configured to save output history.

Several other magic functions can use your input history, including __%edit, %rerun, %recall, %macro, %save and %pastebin.__ You can use a standard format to refer to lines:

%pastebin 3 18-20 ~1/1-5

This will take line 3 and lines 18 to 20 from the** current session**, and lines 1-5 from the **previous session**.

===== • System shell commands =====
To run any command at the system shell, simply prefix it with !, e.g.:

!ping www.bbc.co.uk

You can **capture the output** into a__ Python list__, e.g.: __files = !ls__. To pass the values of **Python variables** or expressions to system commands, 
prefix them with $: !grep -rF $pattern ipython/*. See our shell section for more details.

===== • Define your own system aliases =====
It’s convenient to have__ aliases to the system commands __you use most often. This allows you to work seamlessly from inside IPython with the same commands you are used to in your system shell. IPython comes with some **pre-defined aliases** and **a complete system** for changing directories, both via a stack (see__ %pushd, %popd and %dhist__) and via direct__ %cd__. The latter keeps a history of visited directories and allows you to go to any previously visited one.

===== • Configuration =====
Much of IPython can be tweaked through configuration. To get started, use the command__ ipython profile create__ to produce the default config files. These will be placed in ~/.ipython/profile_default or ~/.config/ipython/**profile_default**, and contain comments explaining what the various options do.

Profiles allow you to use IPython **for different tasks**, keeping separate config files and history for each one. More details in the profiles section.

===== • Startup Files =====
If you want some code to be run at the beginning of __every IPython session__, the easiest way is to add **Python (.py) or IPython (.ipy)** scripts to your **profile_default/startup/ **directory. Files here will be executed as soon as the IPython shell is constructed, before any other code or scripts you have specified. The files will be run in order of their names, so you can control the ordering with prefixes, like 10-myimports.py.

Note
Automatic startup files are new in IPython 0.12. Use InteractiveShellApp.exec_files in ipython_config.py for similar behavior in 0.11.
