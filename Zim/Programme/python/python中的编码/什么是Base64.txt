Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-10-14T16:04:55+08:00

====== 什么是Base64 ======
Created Friday 14 October 2011
http://cloud21.iteye.com/blog/536972

按照RFC2045的定义， Base64被定义为：Base64内容传送编码被设计用来把任意序列的8位字节描述为一种不易被人直接识别的形式。（The Base64 Content-Transfer-Encoding is designed to represent arbitrary sequences of octets in a form that need not be humanly readable.）

图标base64编码在线转换器 :
http://www.motobit.com/util/base64-decoder-encoder.asp

Base64是网络上最常见的用于传输8Bit__字节代码__的编码方式之一，在发送电子邮件时，服务器认证的用户名和密码需要用Base64编码，附件也需要用Base64编码。

Base64是网络上最常见的用于传输8Bit字节代码的编码方式之一，大家可以查看RFC2045～RFC2049，上面有**MIME**的详细规范。

Base64要求把__每三个8Bit的字节转换为四个6Bit的分组__（3*8 = 4*6 = 24），然后把**6Bit再添两位高位0，组成四个8Bit的字节(但是该字节对应的编号范围为0-63)**，也就是说，转换后的字符串理论上将要比原来的长1/3。

这样说会不会太抽象了？不怕，我们来看一个例子：

转换前 aaaaaabb ccccdddd eeffffff     #这里的字母代表比特位
转换后 00aaaaaa 00bbcccc 00ddddee 00ffffff

应该很清楚了吧？上面的三个字节是原文，下面的四个字节是转换后的Base64编码，其前两位均为0。

转换后，我们用一个__码表__来得到我们想要的字符串（也就是最终的Base64编码），这个表是这样的：（摘自RFC2045）

Table 1: The Base64 Alphabet

Value Encoding Value Encoding Value Encoding Value Encoding
0 	A	 17	 R 	34 	i 	51 	z
1 B 18 S 35 j 52 0
2 C 19 T 36 k 53 1
3 D 20 U 37 l 54 2
4 E 21 V 38 m 55 3
5 F 22 W 39 n 56 4
6 G 23 X 40 o 57 5
7 H 24 Y 41 p 58 6
8 I 25 Z 42 q 59 7
9 J 26 a 43 r 60 8
10 K 27 b 44 s 61 9
11 L 28 c 45 t 62 +
12 M 29 d 46 u 63 /
13 N 30 e 47 v
14 O 31 f 48 w (pad) =
15 P 32 g 49 x
16 Q 33 h 50 y
让我们再来看一个实际的例子，加深印象！

* 转换前 10101101 10111010 01110110
* 转换后 00101011 00011011 00101001 00110110
* 十进制 43 27 41 54
* 对应码表中的值 r b p 2
 
所以上面的24位编码，编码后的Base64值为 rbp2
解码同理，把 rbq2 的二进制位连接上再重组得到三个8位值，得出原码。（解码只是编码的逆过程，在此我就不多说了，另外有关MIME的RFC还是有很多的，如果需要详细情况请自行查找。）

用更接近于编程的思维来说，**编码的过程是这样的**：

第一个字符通过右移2位获得第一个目标字符的Base64表位置，根据这个数值取到表上相应的字符，就是第一个目标字符。
然后将第一个字符左移4位加上第二个字符右移4位，即获得第二个目标字符。
再将第二个字符左移2位加上第三个字符右移6位，获得第三个目标字符。
最后取第三个字符的右6位即获得第四个目标字符。

在以上的每一个步骤之后，再把结果与 0x3F 进行 AND 位操作，就可以得到编码后的字符了。

C++ Base64编码/解码源代码

inline int Base64Encode(char * base64code, const char * src, int src_len = 0);
inline int Base64Decode(char * buf, const char * base64code, int src_len = 0);

以上两个函数内联定义在base64.h中，使用时include "base64.h" 即可，编码后的长度一般比原文多占1/3的存储空间，为了效率，程序并没有检查目标存储区是否溢出，请保证有足够的存储空间。


源码下载：http://www.yanghan.net/codes/base64src.rar

示例代码输出如下：
[Base64]：
xOO6w6OsU25haVgNCg0KoaGhodXiysfSu7j2QmFzZTY0tcSy4srU08q8/qOhDQoNCkJlc3QgV2lzaGVz
IQ0KDQqhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhICAgICAgICAgICAgICAgZVNYPyENCqGhoaGh
oaGhoaGhoaGhoaGhoaGhoaGhoaGhoaEgICAgICAgICAgICAgICBzbmFpeEB5ZWFoLm5ldA0KoaGhoaGh
oaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoaGhoSAgICAgICAgIDIwMDMtMTItMjU=

[源文]：
你好，SnaiX

　　这是一个Base64的测试邮件！

Best Wishes!

==========================另一篇==================================
最近在用加密后的二进制写cookie时碰到问题，cookie内容必须时可见字符，就必须**将二进制文件转换成对应的可见字符**，Base64编码是不错的解决方案。

===== 1. 定义 =====
Base64是__用可打印字符(但不是全部，只使用了其中的64个)传输任意字节的编码方式__。RFC2045的section 6.8有描述(The Base64 Content-Transfer-Encoding is designed to represent arbitrary sequences of octets in a form that need not be humanly readable)。电子邮件传输的编码就是采用Base64.

===== 2. 如何编码 =====
ASCII码表示范围0X00-0XFF，共255个字符，用一个字节(八位组)表示。Base64编码是用**6位组来表示所有字符**。-> 每三个8Bit的字节转换为四个6Bit的字节（3*8 = 4*6 = 24），然后把6Bit再添两位高位0，组成四个8Bit的字节，也就是说，转换后的字符串理论上将要比原来的长1/3。
来看一个转换的例子；
转换前 12345678 12345678 12345678
转换后 00123456 00781234 00567812 00345678

转换成Base64后，编码值范围0-63，共64个字符表示。如下：

Sequence Characters
0 … 25 ‘A’ … ’Z’
26 … 51 ‘a’ … ‘z’
52 … 61 ‘0’ … ‘9’
**62 ‘+’**
**63 ‘/’**

完整的映射如下：

The Base64 Alphabet

Value Encoding Value Encoding Value Encoding Value Encoding
0 A 17 R 34 i 51 z
1 B 18 S 35 j 52 0
2 C 19 T 36 k 53 1
3 D 20 U 37 l 54 2
4 E 21 V 38 m 55 3
5 F 22 W 39 n 56 4
6 G 23 X 40 o 57 5
7 H 24 Y 41 p 58 6
8 I 25 Z 42 q 59 7
9 J 26 a 43 r 60 8
10 K 27 b 44 s 61 9
11 L 28 c 45 t 62 +
12 M 29 d 46 u 63 /
13 N 30 e 47 v
14 O 31 f 48 w (pad) =
15 P 32 g 49 x
16 Q 33 h 50 y

__填充符=__。当需要编码的字符字节数不是3的倍数，就会有余数1或2。这个时候就需要填充1或2字符来补齐为3字节，最多填充两个‘＝’
