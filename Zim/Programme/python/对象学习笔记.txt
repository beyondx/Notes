Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-05-25T19:04:39+08:00

====== 对象学习笔记 ======
Created Wednesday 25 May 2011
http://book.51cto.com/art/200806/77143.htm
http://blog.csdn.net/carolzhang8406/archive/2011/05/14/6419440.aspx
    摘要：《Python核心编程》（中文第二版）第4章主要讲述的是Python对象,我们现在来学习Python语言的核心部分。首先我们来了解什么是Python对象，然后讨论最常用的内建类型，接下来我们讨论标准类型操作符和内建函数，之后给出对标准类型的不同的分类方式。这有助于我们更好地理解他们如何工作。最后我们会提到Python目前还不支持的类型（这对那些有其他高级语言经验的人会有所帮助），本节为大家介绍Python对象。
 

===== 第4章  Python对象 =====

我们现在来学习Python语言的核心部分。首先我们来了解什么是Python对象，然后讨论最常用的内建类型，接下来我们讨论标准类型操作符和内建函数，之后给出对标准类型的不同的分类方式。这有助于我们更好地理解他们如何工作。最后我们会提到Python目前还不支持的类型（这对那些有其他高级语言经验的人会有所帮助）。

==== 4.1  Python 对象 ====

Python使用对象模型来存储数据。**构造任何类型的值都是一个对象**。尽管Python通常被当成一种“面向对象的编程语言”，但你完全能够写出不使用任何类和实例的实用脚本。不过Python的对象语法和架构鼓励我们使用这些特性，下面让我们仔细研究一下Python对象。

所有的Python对像都拥有三个特性：**身份，类型和值**。

**身份**：每一个对象都有一个唯一的身份标识自己，任何对象的身份可以使用内建函数**id()**来得到。这个值可以被认为是该对象的**内存地址**。你极少会用到这个值，也不用太关心它究竟是什么。

**类型**：对象的类型决定了该对象可以保存什么类型的值，可以进行什么样的操作，以及遵循什么样的规则。你可以用内建函数**type()**查看Python对象的类型。因为在Python中类型也是对象（还记得我们提到Python是面向对象的这句话吗?），所以type()返回的是对象而不是简单的字符串。

**值**：对象表示的数据项。

上面三个特性在对象创建的时候就被赋值，除了值之外，其他两个特性都是**只读**的。对于新式类型和类，对象的类型也是可以改变的，不过并不推荐初学者这样做。

如果对象支持更新操作，那么它的值就可以改变，否则它的值也是只读的。对象的值是否可以更改被称为对象的**可改变性**（mutability），我们会在后面的4.7小节中讨论这个问题。只要一个对象还没有被销毁，这些特性就一直存在。
Python有一系列的基本（内建）数据类型，必要时也可以创建自定义类型来满足你对应用程序的需求。绝大多数应用程序通常使用标准类型，对特定的数据存储则通过创建和实例化类来实现。

==== 对象属性 ====

某些Python对象有属性、值或相关联的可执行代码，比如方法（method）。Python用句点（.）标记法来访问属性。属性包括相应对象的名字等，在2.14小节中曾做过介绍。最常用的属性是函数和方法，不过有一些Python类型也有数据属性。含有数据属性的对象包括（但不限于）：类、类实例、模块、复数和文件。

    Python对象的三个特性：身份，类型和值
    身份：
    每一个对象都有一个唯一的身份标识自己，任何对象的身份可以使用内建函数id()来得到。这个值可以被认为是该对象的内存地址。
    类型
    对象的类型决定了该对象可以保存什么类型的值，可以进行什么样的操作，以及遵循什么样的规则。您可以用内建函数type()查看Python 对象的类型
    值
    对象表示的数据项
    类型对象和type类型对象：
    >>> type(42)
    <type 'int'>
    >>> type(type(42))
    <type 'type'>
    >>>
    所有类型对象的类型是type
    Python 有一个特殊的类型，被称作 Null 对象或者 NoneType，它只有一个值，那就是 None。
    它不支持任何运算也没有任何内建方法。None 没有什么有用的属性，它的布尔值总是False

下列对象的布尔值是False。

    None
    False (布尔类型)
    所有的值为零的数：
    0 (整型)
    (浮点型)
    0L (长整型)
    0.0+0.0j (复数)
    "" (空字符串)
    [] (空列表)
    () (空元组)
    {} (空字典)

    标准类型值比较运算符
    运算符                               功能
    expr1 < expr2            expr1 小于 expr2
    expr1 > expr2            expr1 大于 expr2
    expr1 <= expr2         expr1 小于等于 expr2
    expr1 >= expr2          expr1 大于等于 expr2
    expr1 == expr2          expr1 等于 expr2
    expr1 != expr2           expr1 不等于 expr2 (C 风格)
    expr1 <> expr2          expr1 不等于 expr2 (ABC/Pascal 风格)

整数对象和字符串对象是不可变对象，所以Python 会很高效的缓存它们。
>>> a = 1
>>> id(a)
8402824
>>> b = 1
>>> id(b)
8402824
>>>
>>> c = 1.0
>>> id(c)
8651220
>>> d = 1.0
>>> id(d)
8651204


    函数                                  功能
    cmp(obj1, obj2)           比较 obj1 和 obj2, 根据比较结果返回整数 i:
                                                       i < 0 if obj1 < obj2
                                                       i > 0 if obj1 > obj2
                                                       i == 0 if obj1 == obj2
    repr(obj) 或 `obj`         返回一个对象的字符串表示
    str(obj)                         返回对象适合可读性好的字符串表示
    type(obj)                      得到一个对象的类型，并返回相应的type 对象

    Python不支持的对象：
    char 或 byte
    Python 没有 char 或 byte 类型来保存单一字符或8 比特整数。你可以使用长度为1 的字符串表示字符或8 比特整数。
    指针
    Python 替你管理内存，因此没有必要访问指针。在Python 中你可以使用id()函数得到对象的身份
    int vs short vs long：
    Python 的普通整数相当于标准整数类型
    float VS double：
    Python 认为同时支持两种浮点类型的好处与支持两种浮点类型带来的开销不成比例，所以Python 决定不支持单精度浮点数

