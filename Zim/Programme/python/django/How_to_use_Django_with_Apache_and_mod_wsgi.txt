Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-10-22T15:31:56+08:00

====== How to use Django with Apache and mod wsgi ======
Created Saturday 22 October 2011
https://docs.djangoproject.com/en/dev/howto/deployment/modwsgi/#serving-files

Deploying Django with Apache and mod_wsgi is the **recommended way** to get Django into production.

mod_wsgi is an **Apache module** which can be used to host any Python application which supports the Python WSGI interface described in PEP 3333, including Django. Django will work with any version of Apache which supports mod_wsgi.

The official mod_wsgi documentation is fantastic; it’s your source for all the details about how to use mod_wsgi. You’ll probably want to start with the installation and configuration documentation.

===== Basic configuration =====

Once you’ve got mod_wsgi installed and activated, edit your httpd.conf file and add:

**WSGIScriptAlias  /     /path/to/mysite/apache/django.wsgi**

The first bit above is the url you want to be serving your application at (/ indicates the root url), and the second is the location of a "WSGI file" -- see below -- on your system, usually inside of your project. **This tells Apache to serve any request below the given URL using the WSGI application defined by that file.**

Next we'll need to actually create this WSGI application, so create the file mentioned in the second part of WSGIScriptAlias and add:

**import os**
**import sys**

**os.environ['DJANGO_SETTINGS_MODULE'] = 'mysite.settings'**

**import django.core.handlers.wsgi**
**application = django.core.handlers.wsgi.WSGIHandler()**

If your project is not on your __PYTHONPATH__ by default you can add:

**path = '/path/to/mysite's parent directory'**
**if path not in sys.path:**
**    sys.path.append(path)**

just below the import sys line to place your project on the path. Remember to replace 'mysite.settings' with your correct settings file, and '/path/to/mysite' with your own project's location.

===== Serving files =====

**Django **__doesn't serve files itself__**; it leaves that job to whichever Web server you choose.**

We recommend using a separate Web server -- i.e., one that's not also running Django -- for **serving media**. Here are some good choices:

* lighttpd
* Nginx
* TUX
* A stripped-down version of Apache
* Cherokee

If, however, you have no option but to serve media files on the same Apache VirtualHost as Django, you can set up Apache to __serve some URLs as static media, and others using the mod_wsgi interface to Django__.

This example sets up Django at the site root, but explicitly serves robots.txt, favicon.ico, any CSS file, and anything in the /static/ and /media/__ URL space as a static file__. All other URLs will be served using mod_wsgi:

**Alias /robots.txt /usr/local/wsgi/static/robots.txt**
**Alias /favicon.ico /usr/local/wsgi/static/favicon.ico**

**AliasMatch ^/([^/]*\.css) /usr/local/wsgi/static/styles/$1**

**Alias /media/ /usr/local/wsgi/media/**
**Alias /static/ /usr/local/wsgi/static/**

**<Directory /usr/local/wsgi/static>**
**Order deny,allow**
**Allow from all**
**</Directory>**

**<Directory /usr/local/wsgi/media>**
**Order deny,allow**
**Allow from all**
**</Directory>**

**WSGIScriptAlias / /usr/local/wsgi/scripts/django.wsgi**

**<Directory /usr/local/wsgi/scripts>**
**Order allow,deny**
**Allow from all**
**</Directory>**

===== Serving the admin files =====

Note that the Django **development server** automagically serves the static files of the **admin app**, but this is not the case when you use any other server arrangement. You're responsible for setting up Apache, or whichever media server you're using, to serve the admin files.

The admin files live in (**django/contrib/admin/media**) of the Django distribution.

We strongly recommend using __django.contrib.staticfiles__ to handle the admin files, but here are two other approaches:

* Create a symbolic link to the admin static files from within** your document root**.
* Or, copy the admin static files so that they live within your Apache document root.

===== Details =====

For more details, see the mod_wsgi documentation on Django integration, which explains the above in more detail, and walks through all the various options you've got when deploying under mod_wsgi.
