Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-08-06T18:44:57+08:00

====== 游戏服务器技术交流 ======
Created Saturday 06 August 2011

===== 重回技术怀抱 ---- 开篇 =====
　　有段时间没有研究技术了，这次正好看到了新版的mangos，较之以前我看的版本有了比较大的完善，于是再次浏览了下他的代码，也借此机会整理下我在游戏服务器开发方面的一些心得，与大家探讨。

　　另外由于为避免与公司引起一些不必要的纠纷，我所描述的全都是通过google能够找到的资料，所以也可以认为我下面的内容都是网上所找资料的整理合集。在平时的开发中我也搜索过相关的中文网页，很少有讲游戏服务器相关技术的，大家的讨论主要还是集中在3D相关技术，所以也希望我将开始的这几篇文章能够起到抛砖引玉的作用，潜水的兄弟们也都上来透透气。

　　要描述一项技术或是一个行业，一般都会**从其最古老的历史开始说起**，我本也想按着这个套路走，无奈本人乃一八零后小辈，没有经历过那些苦涩的却令人羡慕的单机游戏开发，也没有响当当的拿的出手的优秀作品，所以也就只能就我所了解的一些技术做些简单的描述。一来算是敦促自己对知识做个梳理，二来与大家探讨的过程也能够找到我之前学习的不足和理解上的错误，最后呢，有可能的话也跟业内的同行们混个脸熟，哪天要是想换个工作了也好有个人帮忙介绍下。最后的理由有些俗了。

　　关于游戏开发，正如云风在其blog上所说，游戏项目始终只是个小工程，另外开发时间还是个很重要的问题，所以软件工程的思想及方法在大部分的游戏公司中并不怎么受欢迎。当然这也只是从我个人一些肤浅的了解所得，可能不够充分。从游戏开发的程序团队的人员构成上也可看出来，基本只能算作是小开发团队。有些工作室性质的开发团队，那就更简单了。

　　我所了解的早些的开发团队，其成员间没有什么严格的分工，大家**凭兴趣自由选择一些模块来负责**，完成了再去负责另一模块，有其他同事的工作需要接手或协助的也会立即转入。所以游戏开发人员基本都是多面手，从网络到数据库，从游戏逻辑到图形图象，每一项都有所了解，并能实际应用。或者说都具有**非常强的学习能力**，在接手一项新的任务后能在很短的时间内对该领域的技术迅速掌握并消化，而且还能现炒现卖。当然，这也与早期2D游戏的技术要求相对比较简单，游戏逻辑也没有现在这般复杂有关。而更重要的可能是，都是被逼出来的吧！:)

　　好了，闲话少说，下一篇，也就是第一篇了，主题为，服务器结构探讨。

===== 服务器结构探讨 -- 最简单的结构 =====

　　所谓服务器结构，也就是如何将服务器各部分合理地安排，以实现最初的功能需求。所以，结构本无所谓正确与错误；当然，优秀的结构更有助于系统的搭建，对系统的可扩展性及可维护性也有更大的帮助。

　　好的结构不是一蹴而就的，而且每个设计者心中的那把尺都不相同，所以这个优秀结构的定义也就没有定论。在这里，我们不打算对现有游戏结构做评价，而是试着从头开始搭建一个我们需要的MMOG结构。

　　对于一个最简单的游戏服务器来说，它只需要能够接受来自客户端的连接请求，然后处理客户端在游戏世界中的移动及交互，也即__游戏逻辑__处理即可。如果我们把这两项功能集成到一个服务进程中，则最终的结构很简单：

　　client ----- server

　　嗯，太简单了点，这样也敢叫服务器结构？好吧，现在我们来往里面稍稍加点东西，让它看起来更像是服务器结构一些。

　　一般来说，我们在接入游戏服务器的时候都会要提供一个帐号和密码，验证通过后才能进入。关于为什么要提供用户名和密码才能进入的问题我们这里不打算做过多讨论，云风曾对此也提出过类似的疑问，并给出了只用一个标识串就能进入的设想，有兴趣的可以去看看他们的讨论。但不管是采用何种方式进入，照目前看来我们的服务器起码得提供一个帐号验证的功能。

　　我们把观察点先**集中在一个大区**内。在大多数情况下，一个大区内都会有多组__游戏服__，也就是多个__游戏世界__可供选择。简单点来实现，我们完全可以抛弃这个大区的概念，认为一个大区也就是放在同一个机房的多台服务器组，各服务器组间没有什么关系。这样，我们可__为每组服务器单独配备一台登录服__。最后的结构图应该像这样：

　　loginServer  gameServer
　　　　　|          /
　　　　　|        /
　　　　　client

　　该结构下的玩家操作流程为，先选择大区，再选择大区下的某台服务器，即某个游戏世界，点击进入后开始帐号验证过程，验证成功则进入了该游戏世界。但是，如果玩家想要切换游戏世界，他只能先退出当前游戏世界，然后进入新的游戏世界重新进行帐号验证。

　　早期的游戏大都采用的是这种结构，有些游戏在实现时采用了一些技术手段使得在切换游戏服时不需要再次验证帐号，但整体结构还是未做改变。

　　该结构存在一个服务器资源配置的问题。因为**登录服处理的逻辑**相对来说比较简单，就是将玩家提交的帐号和密码送到数据库进行验证，和生成__会话密钥__发送给游戏服和客户端，操作完成后连接就会立即断开，而且玩家在以后的游戏过程中不会再与登录服打任何交道。这样处理**短连接**的过程使得系统在大多数情况下都是比较空闲的，但是在某些时候，由于请求比较密集，比如开新服的时候，登录服的负载又会比较大，甚至会处理不过来。

　　另外在实际的游戏运营中，有些游戏世界很火爆，而有些游戏世界却非常冷清，甚至没有多少人玩的情况也是很常见的。所以，我们能否更合理地配置登录服资源，使得整个大区内的登录服可以共享就成了下一步改进的目标。


===== 服务器结构探讨 -- 登录服的负载均衡 =====

　　回想一下我们在玩wow时的操作流程：运行wow.exe进入游戏后，首先就会要求我们输入用户名和密码进行验证，验证成功后才会出来游戏世界列表，之后是排队进入游戏世界，开始游戏...

　　可以看到跟前面的描述有个很明显的不同，那就是要先验证帐号再选择游戏世界。这种结构也就使得登录服不是固定配备给个游戏世界，而是**全区共有**的。

　　我们可以试着从实际需求的角度来考虑一下这个问题。正如我们之前所描述过的那样，登录服在大多数情况下都是比较空闲的，也许我们的一个拥有20个游戏世界的大区仅仅使用10台或更少的登录服即可满足需求。而当在开新区的时候，或许要配备40台登录服才能应付那如潮水般涌入的玩家登录请求。所以，登录服在设计上应该能满足这种__动态增删__的需求，我们可以在任何时候为大区增加或减少登录服的部署。

　　当然，在这里也不会存在要求添加太多登录服的情况。还是拿开新区的情况来说，即使新增加登录服满足了玩家登录的请求，游戏世界服的承载能力依然有限，玩家一样只能在__排队系统__中等待，或者是进入到游戏世界中导致大家都卡。

　　另外，当我们在增加或移除登录服的时候不应该需要对游戏世界服有所改动，也不会要求重启世界服，当然也不应该要求客户端有什么更新或者修改，一切都是在背后__自动完成__。

　　最后，有关__数据持久化__的问题也在这里考虑一下。一般来说，使用现有的商业数据库系统比自己手工技术先进要明智得多。我们需要持久化的数据有玩家的帐号及密码，玩家创建的角色相关信息，另外还有一些游戏世界全局共有数据也需要持久化。

　　好了，需求已经提出来了，现在来考虑如何将其实现。

　　对于负载均衡来说，已有了成熟的解决方案。一般最常用，也最简单部署的应该是__基于DNS的负载均衡系统__了，其通过在DNS中为一个域名配置多个IP地址来实现。最新的DNS服务已实现了根据服务器系统状态来实现的**动态负载均衡**，也就是实现了真正意义上的负载均衡，这样也就有效地解决了当某台登录服当机后，DNS服务器不能立即做出反应的问题。当然，如果找不到这样的解决方案，自己从头打造一个也并不难。而且，通过DNS来实现的负载均衡已经包含了所做的修改对登录服及客户端的透明。

　　而对于数据库的应用，在这种结构下，登录服及游戏世界服都会需要连接数据库。从数据库服务器的部署上来说，可以将__帐号和角色__数据都放在一个中心数据库中，也可分为两个不同的库分别来处理，基到从物理上分到两台不同的服务器上去也行。

　　但是对于不同的游戏世界来说，其角色及游戏内数据都是**互相独立**的，所以一般情况下也就为每个游戏世界单独配备一台数据库服务器，以减轻数据库的压力。所以，整体的服务器结构应该是**一个大区有一台帐号数据库服务器**，所有的登录服都连接到这里。而每个游戏世界都有自己的**游戏数据库服务器**，只允许本游戏世界内的服务器连接。

　　最后，我们的服务器结构就像这样：

　　　　　　　　　　 大区服务器        
　　　　　　　　　　/   　 |       \
     　　　　　　　/            |      　\
      　　　　　登录服1  登录服2      世界服1  世界服2
　　　　　　　　　\    　   |             　 |     　 |  
　　　　　　　　　 \  　   |               　 |        |
　　　　　　　　　　帐号数据库        DBS     DBS

　　这里既然讨论到了大区及帐号数据库，所以顺带也说一下关于__激活大区__的概念。wow中一共有八个大区，我们想要进入某个大区游戏之前，必须到官网上激活这个区，这是为什么呢？

　　一般来说，在各个大区帐号数据库之上还有一个**总的帐号数据库**，我们可以称它为__中心数据库__。比如我们在官网上注册了一个帐号，这时帐号数据是只保存在中心数据库上的。而当我们要到一区去创建角色开始游戏的时候，在一区的帐号数据库中并没有我们的帐号数据，所以，我们必须先到官网上做一次激活操作。这个激活的过程也就是从中心库上把我们的帐号数据拷贝到所要到的大区帐号数据库中。


==== Re:游戏服务器技术交流 ====

打算写一个系列，也算给自己一个交代，但不知道能坚持多久
内容计划的比较多，已经打了一些草稿，还要慢慢整理，从服务器结构到每个独立服务器内部的模块划分，及大的框架代码实现都有所涉及另外技术人员的文章大都比较中规中矩，我想尝试一下比较轻松的写法，不知道会不会让人觉得有些做作或是有卖弄之嫌白天上班，只能晚上回去整理，所以会比较慢

=== Re:游戏服务器技术交流 ===

小弟我也是80后，目前还没有入行，也来抛个砖头～ ^_^
关于服务器的安排。我觉得按照楼主所描述的安排，是把一定的任务安排给指定的服务器，而且这种安排是固定的（运行期间无法更改）。那么是否能把这种安排变为动态的？也就是说有这么一组连在局域网里的服务器，有一台服务器作为玩家登录游戏的入口，这个安排是固定的，但__其他服务器的任务是根据负荷动态分配的__。假如把各个不同的模块做成进程，无论是帐号验证、行走同步、技能逻辑处理还是别的什么，凡是负荷没有很大关联的模块都做成单独的进程，然后由一台特定的服务器进行各个模块进程和服务器的负载监测，把大负荷的模块进程迁移到小负荷的物理服务器上去。这样也许会有更合适的服务器安排，而且通过增加服务器就可以提高负载能力。

==== Re: 游戏服务器技术交流 ====

不错，才刚开了个头就飘小红旗了  
那个把__所有功能组件全部进程化__，而且全部动态配置的想法太前卫了
服务器设计不光要考虑灵活性，更要考虑可靠性，稳定性，设计尽可能得简洁，只有在简单的设计无法满足需求的时候才会考虑复杂的实现


===== 服务器结构探讨 -- 简单的世界服实现 =====

　　讨论了这么久我们一直都还没有进入游戏世界服务器内部，现在就让我们来窥探一下里面的结构吧。

　　对于现在大多数MMORPG来说，游戏服务器要处理的__基本逻辑__有移动、聊天、技能、物品、任务和生物等，另外还有地图管理与消息广播来对其他高级功能做支撑。如纵队、好友、公会、战场和副本等，这些都是通过基本逻辑功能组合或扩展而成。

　　在所有这些基础逻辑中，与我们要讨论的服务器结构关系最紧密的当属__地图管理方式__。决定了地图的管理方式也就决定了我们的服务器结构，我们仍然先从最简单的实现方式开始说起。

　　回想一下我们曾战斗过无数个夜晚的暗黑破坏神，整个暗黑的世界被分为了若干个独立的小地图，当我们在地图间穿越时，一般都要经过一个叫做传送门的装置。世界中有些地图间虽然在地理上是直接相连的，但我们发现其游戏内部的逻辑却是完全隔离的。可以这样认为，__一块地图就是一个独立的数据处理单元__。

　　既然如此，我们就把**每块地图都当作是一台独立的服务器**，他提供了在这块地图上游戏时的所有逻辑功能，至于内部结构如何划分我们暂不理会，先把他当作一个黑盒子吧。

　　当两个人合作做一件事时，我们可以以对等的关系相互协商着来做，而且一般也都不会有什么问题。当人数增加到三个时，我们对等的合作关系可能会有些复杂，因为我们每个人都同时要与另两个人合作协商。正如俗语所说的那样，三个和尚可能会碰到没水喝的情况。当人数继续增加，情况就变得不那么简单了，我们得需要一个管理者来对我们的工作进行分工、协调。游戏的地图服务器之间也是这么回事。

　　一般来说，我们的游戏世界不可能会只有一块或者两块小地图，那顺理成章的，也就需要一个__地图管理者__。先称它为游戏世界的__中心服务器__吧，毕竟是管理者嘛，大家都以它为中心。

　　中心服务器主要维护__一张地图ID到地图服务器地址的映射表__。当我们要进入某张地图时，会从中心服上取得该地图的__IP和port__告诉客户端，客户端主动去连接，这样进入他想要去的游戏地图。在整个游戏过程中，客户端始终只会与一台地图服务器保持连接，当要切换地图的时候，在获取到新地图的地址后，会先与当前地图断开连接，再进入新的地图，这样保证玩家数据在服务器上只有一份。

　　我们来看看结构图是怎样的：

　　　   中心服务器
          /      \        \
         /        \        \
      登录服     地图1    地图2   地图n
         \        |         /       /
          \       |        /       /
　　　       客户端

　　很简单，不是吗。但是简单并不表示功能上会有什么损失，简单也更不能表示游戏不能赚钱。早期不少游戏也确实采用的就是这种简单结构。

=== Re:游戏服务器技术交流 ===

我有个问题，客户端在整个游戏过程中，网络连接不是持续的，而是要有很多断开再重连的过程，在这个过程中如何保证安全？显然不能每次都重新输入用户名和密码；如果是客户端自动把这些信息在重连时发出，那么用户名和密码就需要长期留在客户端的内存里，那么会给盗号木马提供便利；如果是客户端把一个__短期有效的识别数据__发给服务器来做用户验证，从第二次传输开始就有被他人截获的可能，而一旦被截获，那么别人就可能抢在合法用户之前就切换服务器，从而导致用户游戏财富的流失或者用户被拒绝服务。所以我想，是否有一种办法，能够避免重新连接，也就是说需要的时候能够把一个网络连接重定向到另一个服务器，但是这个过程仅仅发生在服务器组的局域网内，这个过程是安全的，而对于客户端来说则是**透明**的过程。
如果要避免断开重连，还有个办法就是用户始终只和一台特定的服务器保持网络连接，由这台服务器来转发客户端与其他服务器之间的数据流，但是这样的话那台特定的服务器的负荷很大了，除非让其他的逻辑服务器一起来__客串入口服务器__，只是不知道这样会有什么影响。
该怎么处理这样的问题呢？

==== Re:游戏服务器技术交流 ====

楼上的很对，容我慢慢来说嘛，呵呵。
这个结构是早期的结构，现在都不会采用这种每次都要断开再重连的方式了
不过这种方式一样可以做的很安全，每次连接时生成一个有效时间很短的__临时密钥__就行了
至于你说怕被别人截获，所有的连接都是可以被截获的，问题只在于那个门槛有多高

==== Re:游戏服务器技术交流 ====

嘿嘿，我只是友情顶贴~  ；－）
不过我很想知道网络连接是否能够实现不断开重连的前提下的重定向？
   

==== Re:游戏服务器技术交流 ====

现在的很多游戏都是运用类似网关的技术，会保持__用户一直链接某台服务器__，而不是根据地图所在，让玩家在转换地图时，连接不同的服务器。这样做有非常明显得好处，就是减少握手时间。

==== Re:游戏服务器技术交流 ====

会保持用户一直链接某台服务器，而不是根据地图所在
这样的话，那些网关服务器岂不是负担很重？如何实现负载平衡？设置多台网关服务器吗？岂不是成本会很高？

==== Re:游戏服务器技术交流 ====
一下是各种io模型的大概性能比较。一下是各种io模型的大概性能比较。
I/O   模型                           尝试数/连接成功数
block：                             7000/1008
noBlock：                         7000/4011
WSAAsyncSelect：           7000/1956
WSAEventSelect：           7000/6999
Overlapped：                   7000/5558
completion   port：         7000/7000，   50000/4997
I/O   模型                           尝试数/连接成功数
block：                             7000/1008
noBlock：                         7000/4011
WSAAsyncSelect：           7000/1956
WSAEventSelect：           7000/6999
Overlapped：                   7000/5558
completion   port：         7000/7000，   50000/4997
多谢楼主。提个意见，能不能对技术细节和编程方面的多涉及一点呢……
最近I/O模型弄得我哭天喊地……

===== 服务器结构探讨 -- 继续世界服 =====

　　都已经看出来了，这种每切换一次地图就要重新连接服务器的方式实在是不够优雅，而且在实际游戏运营中也发现，地图切换导致的卡号，复制装备等问题非常多，这里完全就是一个事故多发地段，如何避免这种频繁的连接操作呢？

　　最直接的方法就是把那个图倒转过来就行了。**客户端只需要连接到中心服上**，所有到地图服务器的数据都由中心服来__转发__。很完美的解决方案，不是吗？

　　这种结构在实际的部署中也遇到了一些挑战。对于一般的MMORPG服务器来说，单台服务器的承载量平均在2000左右，如果你的服务器很不幸地只能带1000人，没关系，不少游戏都是如此；如果你的服务器上跑了3000多玩家依然比较流畅，那你可以自豪地告诉你的策划，多设计些大量消耗服务器资源的玩法吧，比如大型国战、公会战争等。

　　2000人，似乎我们的策划朋友们不大愿意接受这个数字。我们将地图服务器分开来原来也是想将负载分开，以多带些客户端，现在要所有的连接都从中心服上转发，那连接数又遇到单台服务器的可最大承载量的瓶颈了。

　　这里有必要再解释下这个数字。我知道，有人一定会说，才带2000人，那是你水平不行，我随便写个TCP服务器都可带个五六千连接。问题恰恰在于你是随便写的，而MMORPG的服务器是复杂设计的。如果一个演示socket API用的echo服务器就能满足MMOG服务器的需求，那写服务器该是件多么惬意的事啊。

　　**但我们所遇到的事实是，服务器收到一个移动包后，要向周围所有人广播，而不是echo服务器那样简单的回应；服务器在收到一个连接断开通知时要向很多人通知玩家退出事件，并将该玩家的资料写入数据库，而不是echo服务器那样什么都不需要做；服务器在收到一个物品使用请求包后要做一系列的逻辑判断以检查玩家有没有作弊；服务器上还启动着很多定时器用来更新游戏世界的各种状态......**

　　其实这么一比较，我们也看出资源消耗的所在了：服务器上大量的复杂的逻辑处理。再回过头来看看我们想要实现的结构，__我们既想要有一个唯一的入口，使得客户端不用频繁改变连接，又希望这个唯一入口的负载不会太大，以致于接受不了多少连接。__

　　仔细看一看这个需求，我们想要的仅仅只是一台__管理连接__的服务器，并不打算让他承担太多的游戏逻辑。既然如此，那五六千个连接也还有满足我们的要求。至少在现在来说，一个游戏世界内，也就是一组服务器内同时有五六千个在线的玩家还是件让人很兴奋的事。事实上，在大多数游戏的大部分时间里，这个数字也是很让人眼红的。

　　什么？你说梦幻、魔兽还有史先生的那个什么征途远不止这么点人了！噢，我说的是大多数，是大多数，不包括那些明星。你知道大陆现在有多少游戏在运营吗？或许你又该说，我们不该在一开始就把自己的目标定的太低！好吧，我们还是先不谈这个。

　　继续我们的结构讨论。一般来说，我们把这台负责连接管理的服务器称为__网关服务器__，因为**内部的数据都要通过这个网关才能出去**，不过从这台服务器提供的功能来看，称其为__反向代理服务器__可能更合适。我们也不在这个名字上纠缠了，就按大家通用的叫法，还是称他为网关服务器吧。

　　网关之后的结构我们依然可以采用之前描述的方案，只是，似乎并没有必要为每一个地图都开一个独立的监听端口了。我们可以试着对地图进行一些划分，由一个Master Server来管理一些更小的Zone Server，玩家通过网关连接到Master Server上，而实际与地图有关的逻辑是分派给更小的Zone Server去处理。

　　最后的结构看起来大概是这样的：

        Zone Server        Zone Server
                \            /
                 \          /
                Master Server          Master Server
                    /       \                   /
                   /         \                 /
        Gateway Server        \               /
            |        \         \             /
            |         \         \           /
            |               Center Server
            |
            |
           Client

==== Re: Re:游戏服务器技术交流 ====

在计划中这是一个系列的开始
我会提出一个现在来说比较通用的服务器结构，然后开始分别对每部分的技术细节和编程实现作探讨
至于为什么要这么麻烦的一点点说，而不是直接提出最终的结构，我是希望不仅能够知道应该是怎样的，而更重要的是应该知道为什么是现在这个样子的
发的有些慢，是因为这些文字我都是先写在纸上，在纸上都要至少修改一到两遍，保证内容是正确的，语句是通顺的，然后才发上来，后面有些打字错误就没法避免了
虽然只是简单的技术探讨，但我也不希望乱说一气的话导致被人唾骂　
另外，既然是探讨，就不应该只是一个人在说吧，欢迎提出反对意见，__给别人解释自己思想的过程，也是对自己知识的梳理__，而且，想要把心中所想的正确地表达出来也是需要一定能力的，最近我越发地感到这一点了  

==== Re: Re:游戏服务器技术交流 ====

会保持用户一直链接某台服务器，而不是根据地图所在
这样的话，那些网关服务器岂不是负担很重？如何实现负载平衡？设置多台网关服务器吗？岂不是成本会很高？

RE:
当连接数多时确实可以用多个网关
游戏服务器硬件成本不高，就算是现在很牛x的“刀片”也不贵


==== Re:游戏服务器技术交流 ====

晕……………………不知有多少公司有底气说“游戏服务器硬件成本不高，就算是现在很牛x的“刀片”也不贵”…………

我有个问题，在你提出的结构的目前版本之后，各个Zone Server之间的职责划分应该是根据__游戏场景的空间__来划分的吧，这样的话，一个区域内的玩家都会集中于一个服务器上，那么意味着同一个区域内对玩家的承载能力仍然十分有限，那么有没有办法让多个服务器同时为同一个区域内的玩家服务呢？这样意味着通过增加服务器不仅能增加整个游戏世界的在线人数，而且能增加一个区域内的在线人数……不知道目前有没有这样做的游戏？

^_^

==== Re:游戏服务器技术交流 ====

Zone Server确实是按空间来划分的
因为一个区域内的玩家会进行频繁的交互，消息包广播等
如果把他们分到不同的服务器上，那服务器间通讯的开销也大了，还会增加系统的复杂性
当然，如果像EQ2那样，普通区域内也分副本，而且各副本间完全独立的话倒是可以这样做

==== Re:游戏服务器技术交流 ====

这样的话，单个区域内的承载能力仍然很有限，而且玩家在各个区域的分布也不会很均匀，势必会造成部分服务器很空闲而另外一些服务器则不堪重负，也就是有资源但没有充分发挥作用的情况。现在有办法解决这样的问题吗？

==== Re:游戏服务器技术交流 ====

Zone Server做__动态负载均衡__，当某个Zone Server负载较大时，自动把自己分为四个，减少广播域
其他就只能让策划朋友__从玩法上来限制__，不要让一个区域出现太多人了

==== Re: 游戏服务器技术交流 ====

这种结构在实际的部署中也遇到了一些挑战。对于一般的MMORPG服务器来说，单台服务器的承载量平均在2000左右
什么MMORPG的逻辑可以使单台服务器能上2000？
NPC都是死的？玩家都不干活？

==== Re: Re: 游戏服务器技术交流 ====

终于有了一个反对的声音

首先2000这个数字是我统计的一个平均值，统计的依据来自于与其他人的讨论和别人提供的数据，另外一些公司提供的运营数据打点折也可以估算个大概。或许是大家都夸大了自己的能力，或公司公开的数据水分超过了我的估计？呵呵
当然，我们的游戏也没有单台2000，但我认为现在的服务器存在很大的提升余地
至于你说的NPC是死的，玩家干不干活
NPC最消耗系统资源的当属__AI__了，特别是一些复杂的寻路，这个完全可以分离到一台单独的__AI服务器__上，不少游戏都是这么做的，从一些泄漏出来的服务器端上也可以看到
生物管理，状态更新和消息广播在Zone Server上做，其他公共逻辑模块在Master Server和Center Server上跑，那这样其实也就没有一个单台服务器承载量的概念了，可能要说数据的话还是以一组服务器为单位比较合适
另外我一直以wow的结构来做参考，希望实现的也跟wow差不多，所以这些数字也可以算做是我的目标吧

==== Re:游戏服务器技术交流 ====

Zone Server做动态负载均衡，当某个Zone Server负载较大时，自动把自己分为四个，减少广播域

这样又有一个问题，拆分区域之后，从哪里找来对应的服务器资源呢？设置一些平时不用的服务器来备用，这个似乎不太可能。那么是否意味着在拆分的同时还会对应着其他区域的合并呢？

===== 服务器结构探讨 -- 最终的结构 =====

　　如果我们就此打住，可能马上就会有人要嗤之以鼻了，就这点古董级的技术也敢出来现。好吧，我们还是把之前留下的问题拿出来解决掉吧。

　　一般来说，当某一部分能力达不到我们的要求时，最简单的解决方法就是在此__多投入一点资源__。既然想要更多的连接数，那就再加一台网关服务器吧。新增加了网关服后需要在大区服上做相应的支持，或者再简单点，有一台主要的网关服，当其负载较高时，主动将新到达的连接重定向到其他网关服上。

　　而对于游戏服来说，有一台还是多台网关服是没有什么区别的。每个代表客户端玩家的对象内部都保留一个代表其连接的对象，消息广播时要求每个玩家对象使用自己的连接对象发送数据即可，至于连接是在什么地方，那是完全透明的。当然，这只是一种简单的实现，也是普通使用的一种方案，如果后期想对消息广播做一些优化的话，那可能才需要多考虑一下。

　　既然说到了优化，我们也稍稍考虑一下现在结构下可能采用的优化方案。

　　首先是当前的Zone Server要做的事情太多了，以至于他都处理不了多少连接。这其中最消耗系统资源的当属生物的AI处理了，尤其是那些复杂的寻路算法，所以我们可以考虑把这部分AI逻辑独立出来，由一台__单独的AI服务器__来承担。

　　然后，我们可以试着把一些与地图数据无关的__公共逻辑__放到Master Server上去实现，这样Zone Server上只保留了与__地图数据紧密相关的逻辑__，如生物管理，玩家移动和状态更新等。

　　还有聊天处理逻辑，这部分与游戏逻辑没有任何关联，我们也完全可以将其独立出来，放到一台单独的__聊天服务器__上去实现。

　　最后是数据库了，为了减轻数据库的压力，提高数据请求的响应速度，我们可以在数据库之前建立一个__数据库缓存服务器__，将一些常用数据缓存在此，服务器与数据库的通信都要通过这台服务器进行代理。__缓存的数据会定时的写入到后台数据库中__。

　　好了，做完这些优化我们的服务器结构大体也就定的差不多了，暂且也不再继续深入，更细化的内容等到各个部分实现的时候再探讨。

　　好比我们去看一场晚会，舞台上演员们按着预定的节目单有序地上演着，但这就是整场晚会的全部吗？显然不止，在幕后还有太多太多的人在忙碌着，甚至在晚会前和晚会后都有。我们的游戏服务器也如此。

　　在之前描述的部分就如同舞台上的演员，是我们能直接看到的，幕后的工作人员我们也来认识一下。

　　现实中有警察来维护秩序，游戏中也如此，这就是我们常说的__GM__。GM可以采用跟普通玩家一样的拉入方式来进入游戏，当然权限会比普通玩家高一些，也可以提供一台GM服务器专门用来处理GM命令，这样可以有更高的安全性，GM服一般接在中心服务器上。

　　在以时间收费的游戏中，我们还需要一台__计费的服务器__，这台服务器一般接在网关服务器上，注册玩家登录和退出事件以记录玩家的游戏时间。

　　任何为用户提供服务的地方都会有__日志记录__，游戏服务器当然也不例外。从记录玩家登录的时间，地址，机器信息到游戏过程中的每一项操作都可以作为日志记录下来，__以备查错及数据挖掘用__。至于搜集玩家机器资料所涉及到的法律问题不是我们该考虑的。

　　差不多就这么多了吧，接下来我们会按照这个大致的结构来详细讨论各部分的实现。


===== 服务器结构探讨 -- 一点杂谈 =====

　　再强调一下，服务器结构本无所谓好坏，只有是否适合自己。我们在前面探讨了一些在现在的游戏中见到过的结构，并尽我所知地分析了各自存在的一些问题和可以做的一些改进，希望其中没有谬误，如果能给大家也带来些启发那自然更好。

　　突然发现自己一旦罗嗦起来还真是没完没了。接下来先说说我在开发中遇到过的一些困惑和一基础问题探讨吧，这些问题可能有人与我一样，也曾遇到过，或者正在被困扰中，而所要探讨的这些基础问题向来也是争论比较多的，我们也不评价其中的好与坏，只做简单的描述。

　　首先是服务器操作系统，linux与windows之争随处可见，其实在大多数情况下这不是我们所能决定的，似乎__各大公司也基本都有了自己的传统__，如网易的freebsd，腾讯的linux等。如果真有权利去选择的话，选自己最熟悉的吧。

　　决定了OS也就基本上确定了__网络IO模型__，windows上的IOCP和linux下的__epool__，或者直接使用现有的网络框架，如ACE和asio等，其他还有些商业的网络库在国内的使用好像没有见到，不符合中国国情嘛。:)

　　然后是__网络协议__的选择，以前的选择大多倾向于UDP，为了可靠传输一般自己都会在上面__实现一层封装__，而现在更普通的是直接采用本身就很可靠的TCP，或者TCP与UDP的混用。早期选择UDP的主要原因还是**带宽限制**，现在宽带普通的情况下TCP比UDP多出来的__一点点开销与开发的便利性__相比已经不算什么了。当然，如果已有了成熟的可靠UDP库，那也可以继续使用着。

　　还有__消息包格式的定义__，这个曾在云风的blog上展开过激烈的争论。消息包格式定义包括三段，__包长、消息码和包体__，争论的焦点在于应该是消息码在前还是包长在前，我们也把这个当作是信仰问题吧，有兴趣的去云风的blog上看看，论论。

　　另外早期有些游戏的包格式定义是以__特殊字符作分隔__的，这样一个好处是其中某个包出现错误后我们的游戏还能继续。但实际上，我觉得这是完全没有必要的，真要出现这样的错误，直接断开这个客户端的连接可能更安全。而且，以特殊字符做分隔的消息包定义还加大了一点点网络数据量。

　　最后是一个纯技术问题，有关__socket连接数的最大限制__。开始学习网络编程的时候我犯过这样的错误，以为port的定义为unsigned short，所以想当然的认为服务器的最大连接数为65535，这会是一个硬性的限制。而实际上，一个socket描述符在windows上的定义是unsigned int，因此要有限制那也是四十多亿，放心好了。

　　在服务器上port是监听用的，想象这样一种情况，web server在80端口上监听，当一个连接到来时，系统会为这个连接分配一个socket句柄，同时与其在80端口上进行通讯；当另一个连接到来时，服务器仍然在80端口与之通信，只是分配的socket句柄不一样。这个__socket句柄__才是描述每个连接的唯一标识。按windows网络编程第二版上的说法，这个上限值配置影响。

　　好了，废话说完了，下一篇，我们开始进入登录服的设计吧。

===== 登录服的设计 -- 功能需求 =====

　　正如我们在前面曾讨论过的，登录服要实现的功能相当简单，就是帐号验证。为了便于描述，我们暂不引入那些讨论过的优化手段，先以最简单的方式实现，另外也将基本以mangos的代码作为参考来进行描述。

　　想象一下帐号验证的实现方法，最容易的那就是把用户输入的明文用帐号和密码直接发给登录服，服务器根据帐号从数据库中取出密码，与用户输入的密码相比较。

　　这个方法存在的安全隐患实在太大，明文的密码传输太容易被截获了。那我们试着在传输之前先加一下密，为了服务器能进行密码比较，我们应该采用一个__可逆的加密算法__，在服务器端把这个加密后的字串还原为原始的明文密码，然后与数据库密码进行比较。既然是一个可逆的过程，那__外挂制作者__总有办法知道我们的加密过程，所以，这个方法仍不够安全。

　　哦，如果我们只是希望密码不可能被还原出来，那还不容易吗，使用一个__不可逆的散列算法__就行了。用户在登录时发送给服务器的是明文的帐号和经散列后的不可逆密码串，__服务器取出密码后也用同样的算法进行散列后再进行比较__。比如，我们就用使用最广泛的md5算法吧。噢，不要管那个王小云的什么论文，如果我真有那么好的运气，早中500w了，还用在这考虑该死的服务器设计吗？

　　似乎是一个很完美的方案，外挂制作者再也偷不到我们的密码了。慢着，外挂偷密码的目的是什么？是为了能用我们的帐号进游戏！如果我们总是用一种固定的算法来对密码做散列，那外挂只需要记住这个__散列后的字串__就行了，用这个做密码就可以成功登录。

　　嗯，这个问题好解决，我们不要用固定的算法进行散列就是了。只是，问题在于服务器与客户端采用的散列算法得出的字串必须是相同的，或者是可验证其是否匹配的。很幸运的是，伟大的数学字们早就为我们准备好了很多优秀的这类算法，而且经理论和实践都证明他们也确实是足够安全的。

　　这其中之一是一个叫做SRP的算法，全称叫做Secure Remote Password，即__安全远程密码__。wow使用的是第6版，也就是SRP6算法。有关其中的数学证明，如果有人能向我解释清楚，并能让我真正弄明白的话，我将非常感激。不过其代码实现步骤倒是并不复杂，mangos中的代码也还算清晰，我们也不再赘述。

　　登录服除了帐号验证外还得提供另一项功能，就是在玩家的帐号验证成功后返回给他一个__服务器列表__让他去选择。这个列表的状态要定时刷新，可能有新的游戏世界开放了，也可能有些游戏世界非常不幸地停止运转了，这些状态的变化都要尽可能及时地让玩家知道。不管发生了什么事，用户都有权利知道，特别是对于付过费的用户来说，我们不该藏着掖着，不是吗？

　　这个游戏世界列表的功能将由**大区服**来提供，具体的结构我们在之前也描述过，这里暂不做讨论。登录服将从大区服上获取到的游戏世界列表发给已验证通过的客户端即可。好了，登录服要实现的功能就这些，很简单，是吧。

　　确实是太简单了，不过简单的结构正好更适合我们来看一看游戏服务器内部的模块结构，以及一些服务器共有组件的实现方法。这就留作下一篇吧。

==== Re: 游戏服务器技术交流 ====

我们游戏的简单服务器构架,角色服务器和帐号服务器都含__缓冲__.
帐号服务器经过压力测试可以支撑超过3W的玩家同时登录(恐怖的数字).
想请教我有没有漏掉的比较大的问题.
所有服务器逻辑都是**单线程**,网络底层除外.


==== Re:游戏服务器技术交流 ====

晕，那么多网关只对应了一个服务器，那么这些网关的作用是什么？


