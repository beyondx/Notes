Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-12-21T20:45:23+08:00

====== getopts的用法 ======
Created Wednesday 21 December 2011

使用getopts解析bash的命令行位置参数()或函数的参数是一个专业的做法。getopts是getopt的改进版本，它是bash的内置命令。
它只能用来解析短格式的命令行选项(-a)，而不能识别GNU-style的长选项(--myoption)或XF86-syle的长选项(-myoption)

===== 术语： =====
* 命令行参数(command line arguments)/位置参数(positional parameters): 命令行中除第一个字符串(命令名)后的所有内容，它们以bash的空白字符分割为不同的位置参数，并用1，2...等数字标示其位置。
* 选项(option)：命令行参数中以短横线开头的单字符(-a)
* 选项参数(an option but has an additional argument)：紧随在选项字符后的字符串，它们之间有可选的空白字符。
* 剩余参数(remaining arguments without any option related): 命令行参数最后的，与任何选项无关的参数(可以为多个字符串)。
选项一般用单个字母或数字表示，不带参数的选项可称为标志(flag)、开关(switch), 它们可以用断横线开头组合在一起。
		//mybackup -x -f  /etc/mybackup.conf  -r  ./foo.txt  ./bar.txt//
		//mybackup -xrf /etc/mybackup.conf ./foo.txt ./bar.txt//


===== 工作原理： =====
多次读取命令行参数中的选项，每次获得下一个位置参数(positional parameter)和可能的参数，每次读取一个选项及其参数后，会递增变量OPTIND(option index)的值，使其指向下一个将要解析的位置参数。如果遇到__非选项参数或--__(两个短横线标示命令行选项及其参数结束，此后的为**剩余参数**)，则停止解析，退出并返回FALSE，因此可用while来循环来迭代。

//while getopts ...; do//
//  ...//
//done//

===== 使用的变量(变量值由getopts自动赋值，可用在while循环中)： =====

**OPTIND(选项的位置编号)**	Holds the index to the next argument to be processed. This is how getopts "remembers" its own status between invocations. Also usefull to __shift the positional parameters after processing with getopts__. OPTIND is __initially set to 1__, and needs to be__ re-set__ to 1 if you want to parse anything again with getopts
**OPTARG(选项的参数，无参数的选项其值为空)**	This variable is set to __any argument for an option__ found by getopts. It also contains the option flag of an unknown option.
**OPTERR**	(Values 0 or 1) Indicates if Bash should display error messages generated by the getopts builtin. The value is initialized to 1 on every shell startup - so be sure to always set it to 0 if you don't want to see annoying messages!

getopts also uses these variables for **error reporting** (they're set to value-combinations which arent possible in normal operation).

===== Specify what you want =====

The base-syntax for getopts is:

**getopts OPTSTRING VARNAME [ARGS...]**

where:

**OPTSTRING(所有的选项字符及其参数标志字符串)**	tells getopts **which** options to expect and** which **to expect arguments (see below)
**VARNAME(while循环变量，值为解析的选项)**	        tells getopts which** shell-variable** to use for option reporting
**ARGS(若未指定，则解析命令行参数)**	         tells getopts to parse these optional words__ instead of __the positional parameters

实例：
#cat **go_test.sh**
//#!/bin/bash//
 
//while getopts ":ad:" opt; do//
//  case $opt in//
//    a)//
//      echo "-a was triggered!" >//__&2__
//      ;;//
    d)
	echo "-d was triggered! OPTAG is $OPTARG" >&2
    __\?__//)//
//      echo "Invalid option: -$OPTARG" >&2//
//      ;;//
//  esac//
//done//


$ ./go_test.sh  #不加任何参数
$ 
$ ./go_test.sh /etc/passwd  #加一个**没有与任何选项关联**的参数
$ 
以上两个执行后，getopts并没有输出，因为它没有看到任何有效或无效的参数。

$ ./go_test.sh -b     # b选项并没有在getopts的选项字符串中指定，因此getopts解析后报错。
					同时 ? 赋给循环变量$opt, 无效选项字符赋给$OPTARG，因此，我们的代码能__捕获并处理__这个错误。
Invalid option: -b
$ 
$ ./go_test.sh -a
-a was triggered!
$ 
$ ./go_test.sh -a -x -b -c  #各选项可以同时指定，其位置可以与getopts中的不同。
-a was triggered!
Invalid option: -x
Invalid option: -b
Invalid option: -c
$ 
$ ./go_test.sh -a -a -a -a   #同一个选项可以指定多次，但每一个的位置变量都不同(OPTIND)
-a was triggered!
-a was triggered!
-a was triggered!
-a was triggered!
$ 
__$./go_test.sh -d -a__
__-d was triggered! OPTAG is -a__
__$__
$./go_test.sh -d -a df -a fjdk
__-d was triggered! OPTAG is -a df__
__-a was triggered!__
$


The last examples lead us to some points you may consider:

* __invalid options don't stop the processing__: If you want to stop the script, you have to do it yourself (exit in the right place)
* __multiple identical options are possible__: If you want to disallow these, you have to check manually (e.g. by setting a variable or so)

[geekard@geekard bin]$ ./getopts_test.sh -a  #有效选项(选项不带参数)
-a

-a was triggered! OPTARG is , OPTIND is 2.
[geekard@geekard bin]$ ./getopts_test.sh -d    #无效选项，-d选项需要参数
-d

-d require args! OPTIND is 2
[geekard@geekard bin]$ ./getopts_test.sh -a -d df  #两有效选项
-a -d df

-a was triggered! OPTARG is , OPTIND is 2.
-d was triggered! OPTARG is df, OPTIND is__ 4__.
[geekard@geekard bin]$ ./getopts_test.sh -f    #无效选项，OPTIND指向下一个参数位置
-f

Invalid option: -f, OPTIND is __2__.
[geekard@geekard bin]$ ./getopts_test.sh -a -d df -f -a  #同一个选项可以多次指定，无效选项__不终止__解析
-a -d df -f -a

-a was triggered! OPTARG is , OPTIND is 2.
-d was triggered! OPTARG is df, OPTIND is 4.
Invalid option: -f, OPTIND is 5.
-a was triggered! OPTARG is , OPTIND is 6.

[geekard@geekard bin]$ ./getopts_test.sh -a -d -a -a
-a -d -a -a

-a was triggered! OPTARG is , OPTIND is 2.
-d was triggered! OPTARG is -a, OPTIND is 4.
-a was triggered! OPTARG is , OPTIND is 5.
[geekard@geekard bin]$ 

[geekard@geekard bin]$ ./getopts_test.sh -a -d df __df__ -a  #__第二个为无选项关联的参数，因此getopts遇到它时停止后续命令行参数的解析__
-a -d df df -a

-a was triggered! OPTARG is , OPTIND is 2.
-d was triggered! OPTARG is df, OPTIND is__ 4__.
[geekard@geekard bin]$ ./getopts_test.sh -a -d df__ -- __-a   #--表示命令行选项到此结束，后面的为__剩余参数__，getopts遇到它时停止解析。
-a -d df -- -a

-a was triggered! OPTARG is , OPTIND is 2.
-d was triggered! OPTARG is df, OPTIND is__ 4__.
[geekard@geekard bin]$ 
