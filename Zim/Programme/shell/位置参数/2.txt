Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-12-24T20:46:18+08:00

====== 2 ======
Created Saturday 24 December 2011
http://rtornados.bokee.com/3557989.html

     *************************

　? 　最近执行的foreground pipeline的状态


　　*************************

在echo $?

输入的参数是结果都位0

　　*************************

　　- 减号　
　　最近执行的foreground pipeline的选项参数。　

　　*************************

echo $-

输入的参数使结果都是空的没有任何显示

$ //money

　　本身的Process ID　

　　# ps ax | grep bash　
　　1000 -1　23:42:06 /usr/bin/bash

*************************

　　内建变数(Shell Variables)　

　　Bash有许多内建变数，像PATH、HOME、ENV......等等。这些内建变数将在另一节中，专门一

一说明。
　　函数function

　　[ function ] name () { list; }

　　function的参数是Positional Paraments

        bash的另一个使你的工作变得轻松的方法是命令别名。命令别名通常是其他命令的缩写，用来减

少键盘输入。例如，你经常要键入如下的命令，你也许会倾向于为它建立一个别名来减少工作量：

cd  /usr/X11/lib/X11/fvwm/sample-configs 

     假如为这个长命令建立一个名为goconfig的别名，在bash提示符下键入如下命令：

alias goconfig=cd /usr/X11/lib/X11/fvwm/sample-configs

现在，除非你退出bash，键入goconfig将和原来的长命令有同样的作用。如果想取消别名，可以使

下面的命令：

unalias goconfig

是一些很多用户认为有用的别名，你可以把它们写入你的.profile文件中提高工作效 ：

alias ll=ls -l

alias log=logout

alias ls=ls -F

注意： 在定义别名时，等号的两头不能有空格，否则 shell 不能决定你需要做什么。仅在你的命令中

含有空格


或特殊字符时才需要引号。

输入重定向

输入重定向用于改变一个命令的输入源。一些命令需要在命令行里输入足够的信息才能工作。比如

rm，你必须在命令行里告诉 rm它你要删除的文件。另一些命令则需要更详细的输入，这些命令的输入

可能是一个文件。比如命令 wc统计输入给它的文件里的文件里的字符数，单词数和行数。如果你仅在

命令行上键 入 wc，wc 将等待你告 诉它要统计什么，这时 bash就好象死了一样，你键入的每样东

西都出现在屏幕上，但什么事也不会发生。这是因为wc 命令正在为自己收集输入。如果你按下Ctrl-

D，wc 命令的结果将被写在屏幕上。如果你输入一个文件名做参数，象下面的例子一样，wc将返回文

件所包含的字符数，单词数，和行数： 

wc day.c

802 12423 342134  day.c

把文件作为wc的文件输入：

wc  < day.c

802 12423 342134 

即输入重定向位day.c

输入重定向并不经常使用，因为大多数命令都以参数的形式在命令行上指定输入文件的文件名。尽

此，当你使用一个不接受文件名为输入参数的命令，而需要的输入又是在一个已存在的文件里时，

能用输入重定向解决问题。

输出重定向 ：

   输出重定向比输入重定向更常用，输出重定向把一个命令的输出重定向到一个文件里，而不是显示在
屏幕上，这个命令的使用场合还是很多的，也很有用处，例如，如果某个命令的输出很多，在屏幕上不

能完全显示，你能把它重定向到一个文件中，稍后再用文本编辑器来打开这个文件；当你想保存一个命

令的输出时也可以使用这种方法，还有，输出重定向可以用于把一个命令的输出当作另一个命令的输入

时。（还有一种更简单的方法可以把一个命令的输出当作另一个命令的输入，就是使用pipe），符号

是   '>'。

    注意：记忆输入／输出重定向符号的最好方法是把<看作是一个漏斗，漏斗的小口指向需要输入的命

令（因为需要接受输入的命令会在 <的左手边），而把>当作一个大口指向有输出的命令的漏斗。

ls 输出到文件： ls > log.txt

 

管道:管道可以把一系列命令连接起来

第一个命令的输出会通过管道传给第二个命令而作为第二个命令的输入，第二个命令的输出又会作为第

三个命令的输入等等，而管道行中最后一个命令的输出才会显示在屏幕上（但是如果命令行里使用了输

出重定向的话，将会放进一个文件里），通过使用管道符 | 来建立一个管道行，下面的示例就是一个管

道行：

cat day.c| grep "a" | wc -l

结果： 4    原理： cat命令（列出文件的内容）把day.c的内容输入到grep命令 查找的结果是又a字

符的行输入到wc命令

job control:

作业控制能够控制当前正在运行的进程的行为。特别地，你能把一个正在运行的进程挂起，稍后再恢复

的运行。bash保持对所有已启动的进程的跟踪，你能在一个正在运行的进程的生命期内的任何时候把

它挂起或是使它恢 复运行。

按下 Ctrl-Z 使一个运行的进程挂起。bg命令使一个被挂起的进程在后台恢复运行，反之 fg 命令使进

程在前台恢复运行。这几个命令在当用户想在后台运行而意外的把它放到了前台时，经常被用到。当一

个命令在前台被运行时， 它会禁止用户与 shell的交互，直到该命令结束。这通常不会造成麻烦，因

为大多数命令很快就执行完了。如果你要运行的命令要花费很长的时间的话，我们通常会把它放到后

台，以使我们能在前台继续输入其他命令。

例如，你输入 这个命令：

command find / -name "test" > find.out

它将寻找整个文件系统中的名为test的文件并把结果保存在一个叫fing.out的文件里。如果在前台运行

的 话，根据文件系统的大小，你的shell将有数秒甚至数分钟不能使用，你不想这样的话可以再输入以

下面的内容：

control-z

bg

find 命令首先被挂起，再在后台继续被执行，并且你能马上回到bash下。

 

几个最有用的bash内部命令：

alias: 设置bash别名。

bg: 使一个被挂起的进程在后台继续执行。

cd: 改变当前工作目录。

exit: 终止shell。

export: 使变量的值对当前shell的所有子进程都可见 。

fc: 用来编辑历史命令列表里的命令。

fg: 使一个被挂起的进程在前台继续执行。

help: 显示bash内部命令的帮助信息。

kill: 终止某个进程
