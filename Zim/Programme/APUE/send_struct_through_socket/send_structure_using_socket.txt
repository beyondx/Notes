Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-06-04T17:18:13+08:00

====== send structure using socket ======
Created 星期六 04 六月 2011

------The problem with sending binary data structures over the network is manifold:

1. You don't know if the structure is compatible with the hardware/software on the other end (word sizes, structure padding/alignment, word endianess, etc).
2. Because of #1, you need to encode the structure to some network-neutral format when it's sent and decode it on the receiving end.
3. There are many means to accomplish #2, including XML (verbose, but human-readable).

You can eliminate this cruft if you are 100% certain that the sending and receiving ends are 100% binary compatible and that the applications were built on both ends with the same compiler and linker settings. Good luck in that! 

-------What you should do is serialize the information in the structure into a generic format, send that over the network, and recreate the object on the other side.

Trying to do the equivalent of a memcpy of the struct over a socket will probably fail horribly.

I suggest serializing to XML. There's lots of libraries available to work with it.

------------Linux程序设计 Linux socket send and recevie structure

　　最近在开发一个Linux下的聊天软件，好久没有做C语言的开发了，感觉到很多东西已经生疏了，这下又碰到用Socket传递结构体的问题，google了一下，发现也有不少朋友遇到同样的问题，所以就打算写出自己的解决办法，跟大家分享。
　　Socket中的send函数可以发送字符串，但不能直接发送结构体，因此在发送端先把结构体转成字符串，然后用send发送，在接收端recv字符串，再转换成原先的结构体，这个就是解决问题的主要思路，实现中要注意的问题在下文阐述。
　　为了客户端之间能够互相通信，实现私聊，我采用服务器转发的方式，因此用户发送的每条消息中除了消息主体外，还必须包含有发送者、接收者ID等信息，如此采用结构体便是最佳的办法了。我定义的结构体如下：

struct send_info
{
char info_from[20]; //发送者ID
char info_to[20]; //接收者ID
int info_length; //发送的消息主体的长度
char info_content[1024]; //消息主体
};

　　发送端主要代码（为了简洁说明问题，我把用户输入的内容、长度等验证的代码去掉了）：

struct send_info info1; //定义结构体变量
printf("This is client,please input message:");
//从键盘读取用户输入的数据，并写入info1.info_content
memset(info1.info_content,0,sizeof(info1.info_content));//清空缓存
info1.info_length=read(STDIN_FILENO,info1.info_content,1024) - 1;//读取用户输入的数据
　　
memset(snd_buf,0,1024);//清空发送缓存，不清空的话可能导致接收时产生乱码，
//或者如果本次发送的内容少于上次的话，snd_buf中会包含有上次的内容
　　
__memcpy(snd_buf,&info1,sizeof(info1)); //结构体转换成字符串__
send(connect_fd,snd_buf,sizeof(snd_buf),0);//发送信息

接收端主要代码：

struct send_info clt; //定义结构体变量
　　
memset(recv_buf,'z',1024);//清空缓存
recv(fd,recv_buf,1024,0 );//读取数据
　　
memset(&clt,0,sizeof(clt));//清空结构体
__memcpy(&clt,recv_buf,sizeof(clt));//把接收到的信息转换成结构体__
　　
clt.info_content[clt.info_length]='';
//消息内容结束，没有这句的话，可能导致消息乱码或输出异常
//有网友建议说传递的结构体中尽量不要有string类型的字段，估计就是串尾符定位的问题
　　
if(clt.info_content) //判断接收内容并输出
printf("nclt.info_from is %snclt.info_to is %snclt.info_content is%snclt.info_length is %dn",clt.info_from,clt.info_to,clt.info_content,clt.info_length);
//至此，结构体的发送与接收已经顺利结束了





