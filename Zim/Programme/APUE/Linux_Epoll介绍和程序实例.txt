Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-10-15T20:39:55+08:00

====== Linux Epoll介绍和程序实例 ======
Created Monday 15 October 2012
http://blog.csdn.net/sparkliang/article/details/4770655


===== Epoll 是何方神圣？ =====


Epoll 可是当前在 Linux 下开发**大规模并发网络程序**的热门人选， Epoll 在 Linux2.6 内核中正式引入，和 select 相似，其实都 **I/O 多路复用**技术而已 ，并没有什么神秘的。其实在 Linux 下设计并发网络程序，向来不缺少方法，比如典型的 Apache 模型（ Process Per Connection ，简称 __PPC__ ）， __TPC__ （ Thread Per Connection ）模型，以及 select 模型和 poll 模型，那为何还要再引入 Epoll 这个东东呢？那还是有得说说的 …


===== 常用模型的缺点 =====


如果不摆出来其他模型的缺点，怎么能对比出 Epoll 的优点呢。

==== 2.1 PPC/TPC 模型 ====
这两种模型思想类似，就是让每一个到来的连接一边自己做事去，别再来烦我 。只是 PPC 是为它开了一个进程，而 TPC 开了一个线程。可是别烦我是有代价的，它要**时间和空间**啊，连接多了之后，那么多的__进程 / 线程切换开销__就上来了；因此这类模型能接受的最大连接数都不会高，一般在几百个左右。

==== 2.2 select 模型 ====
1. 最大并发数限制，因为一个进程所打开的 FD （文件描述符）是有限制的，由 FD_SETSIZE 设置，默认值是 1024/2048 ，因此 Select 模型的最大并发数就被相应限制了。自己改改这个 FD_SETSIZE ？想法虽好，可是先看看下面吧 …
2. 效率问题， select 每次调用都会**线性扫描全部**的 FD 集合，这样效率就会呈现线性下降，把 FD_SETSIZE 改大的后果就是，大家都慢慢来，什么？都超时了？？！！
3. 内核 / 用户空间 **内存拷贝问题**，如何让内核把 FD 消息通知给用户空间呢？在这个问题上 select 采取了**内存拷贝**方法。

==== 2.3 poll 模型 ====
基本上效率和 select 是相同的， select 缺点的 2 和 3 它都没有改掉。

===== 3. Epoll 的提升 =====
把其他模型逐个批判了一下，再来看看 Epoll 的改进之处吧，其实把 select 的缺点反过来那就是 Epoll 的优点了。

3.1. Epoll 没有最大并发连接的限制，上限是最大可以打开文件的数目，这个数字一般远大于 2048, 一般来说这个数目和系统内存关系很大 ，具体数目可以 cat /proc/sys/fs/file-max 察看。
3.2. 效率提升， Epoll 最大的优点就在于它只管你__“活跃”__的连接 ，而跟连接总数无关，因此在实际的网络环境中， Epoll 的效率就会远远高于 select 和 poll 。
3.3. 内存拷贝， Epoll 在这点上使用了“共享内存 ”，这个内存拷贝也省略了。

===== 4. Epoll 为什么高效 =====
Epoll 的高效和其数据结构的设计是密不可分的，这个下面就会提到。

首先回忆一下 select 模型，当有 I/O 事件到来时， select 通知应用程序有事件到了快去处理，而应用程序必须__轮询所有的 FD 集合__，测试每个 FD 是否有事件发生，并处理事件；代码像下面这样：

int res = select(maxfd+1, &readfds, NULL, NULL, 120);

if (res > 0)

{

    for (int i = 0; i < MAX_CONNECTION; i++)

    {

        if (FD_ISSET(allConnection[i], &readfds))

        {

            handleEvent(allConnection[i]);

        }

    }

}

// if(res == 0) handle timeout, res < 0 handle error

Epoll 不仅会告诉应用程序有I/0 事件到来，还会告诉应用程序相关的信息，这些信息是应用程序填充的，因此根据这些信息应用程序就能直接定位到事件，而__不必遍历整个FD 集合__。

int res = epoll_wait(epfd, events, 20, 120);
for (int i = 0; i < res;i++)
{
    handleEvent(events[n]);
}

===== 5. Epoll 关键数据结构 =====
前面提到 Epoll 速度快和其数据结构密不可分，其关键数据结构就是：

struct epoll_event {
    __uint32_t events;      // Epoll events
    epoll_data_t data;      // User data variable
};

typedef union epoll_data {
    void *ptr;
    int fd;
    __uint32_t u32;
    __uint64_t u64;
} epoll_data_t;

可见 epoll_data 是一个 union 结构体 , 借助于它应用程序可以__保存很多类型的信息__ :fd 、指针等等。有了它，应用程序就可以直接定位目标了。

6. ===== 使用 Epoll =====

既然 Epoll 相比 select 这么好，那么用起来如何呢？会不会很繁琐啊 … 先看看下面的三个函数吧，就知道 Epoll 的易用了。

int epoll_create(int size);
生成一个 Epoll 专用的文件描述符，其实是**申请一个内核空间**，用来存放你想关注的 socket fd 上是否发生以及发生了什么事件。 size 就是你在这个 Epoll fd 上能关注的最大 socket fd 数，大小自定，只要内存足够。

int epoll_ctl(int epfd, int __op__, int fd, struct epoll_event *event );
控制某个 Epoll 文件描述符上的事件：注册、修改、删除。其中参数 epfd 是 epoll_create() 创建 Epoll 专用的文件描述符。相对于 select 模型中的 FD_SET 和 FD_CLR 宏。

int epoll_wait(int epfd,struct epoll_event * events,int maxevents,int timeout);
等待 I/O 事件的发生；参数说明：
	epfd: 由 epoll_create() 生成的 Epoll 专用的文件描述符；
	epoll_event: 用于__回传__代处理事件的数组；
	maxevents: 每次能处理的事件数；
	timeout: 等待 I/O 事件发生的超时值；
返回发生事件数。相对于 select 模型中的 select 函数。

7. 例子程序
下面是一个简单 Echo Server 的例子程序，麻雀虽小，五脏俱全，还包含了一个简单的超时检查机制，简洁起见没有做错误处理。
// 
// a simple echo server using epoll in linux
// 
// 2009-11-05
// by sparkling
// 
#include <sys/socket.h>
#include <sys/epoll.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdio.h>
#include <errno.h>
#include <iostream>
using namespace std;
#define MAX_EVENTS 500

struct myevent_s
{
    int fd;
    int events;
    void *arg;
    void (*call_back)(int fd, int events, void *arg);  //call_back函数的参数都从结构体成员中得到。
    int status; // __1: in epoll wait list, 0 not in__
    char buff[128]; // recv data buffer
    int len;
    long last_active; // last active time
};

// set event
void EventSet(myevent_s *ev, int fd, void (*call_back)(int, int, void*), void *arg)
{
    ev->fd = fd;
    ev->call_back = call_back;
    **ev->events = 0;**
    **ev->arg = arg; //arg其实就是struct myevent_s的指针。**
    ev->status = 0;
    ev->last_active = time(NULL);
}

//   add/mod an event to epoll
void EventAdd(int epollFd, int events, myevent_s *ev)
{
    __struct epoll_event epv = {0, {0}};__
    int op;
    __epv.data.ptr = ev;   //myevent_s被封装到epoll_event的ptr成员中。__
    __epv.events = ev->events = events;__
    if(ev->status == 1){  //ev->fd已经处于epoll wait list中
        op = EPOLL_CTL_MOD;
    }
    else{
        op = EPOLL_CTL_ADD;
        ev->status = 1;
    }
    if(__epoll_ctl__(epollFd, op, ev->fd, **&epv**) < 0)
        printf("Event Add failed[fd=%d]/n", ev->fd);
    else
        printf("Event Add OK[fd=%d]/n", ev->fd);
}

// delete an event from epoll
void EventDel(int epollFd, myevent_s *ev)
{
    struct epoll_event epv = {0, {0}};
    if(ev->status != 1) return;  
    epv.data.ptr = ev;
    ev->status = 0;
    __epoll_ctl__(epollFd, EPOLL_CTL_DEL, ev->fd, &epv);
}

int g_epollFd;
myevent_s g_Events[MAX_EVENTS+1]; // g_Events[MAX_EVENTS] is used by __socket listen fd__
void RecvData(int fd, int events, void *arg);
void SendData(int fd, int events, void *arg);

// accept new connections from clients
void AcceptConn(int fd, int events, void *arg)  //arg参数在该函数中并没有被使用。
{
    __struct sockaddr_in__ sin;
    socklen_t len = sizeof(struct sockaddr_in);
    int nfd, i;
    // accept
    if((__nfd__ = accept(fd, (struct sockaddr*)&sin, &len)) == -1)
    {
        if(errno != EAGAIN && errno != EINTR)
        {
            printf("%s: bad accept", __func__);
        }
        return;
    }
    do
    {
        for(i = 0; i < MAX_EVENTS; i++)
        {
            if(g_Events[i].status == 0)
            {
                break;
            }
        }
        if(i == MAX_EVENTS)
        {
            printf("%s:max connection limit[%d].", __func__, MAX_EVENTS);
            break;
        }
        __// set nonblocking__
        if(fcntl(nfd, F_SETFL, O_NONBLOCK) < 0) break;
        // add a read event for receive data
        EventSet(&g_Events[i], nfd, __RecvData__, &g_Events[i]);   //注册一个**回调函数**
        EventAdd(g_epollFd, **EPOLLIN|EPOLL**__ET__, &g_Events[i]);   
        printf("new conn[%s:%d][time:%d]/n", inet_ntoa(sin.sin_addr), ntohs(sin.sin_port), g_Events[i].last_active);
    }while(0);
}

// receive data
void RecvData(int fd, int events, void *arg)  //当fd可读时，envents和arg来源于__struct epoll_event 的 epv.data.ptr和epv.events 成员。__
{
    struct myevent_s *ev = __(struct myevent_s*)arg__;
    int len;
    // receive data
    len = recv(fd, ev->buff, sizeof(ev->buff)-1, 0); 	
    EventDel(g_epollFd, ev);
    if(len > 0)
    {
        ev->len = len;
        ev->buff[len] = '/0';
        printf("C[%d]:%s/n", fd, ev->buff);
        // change to **send** event
        EventSet(ev, fd, __SendData__, ev);     
        EventAdd(g_epollFd, __EPOLLOUT|EPOLLET,__ ev);  
    }
    else if(len == 0)
    {
        close(ev->fd);
        printf("[fd=%d] closed gracefully./n", fd);
    }
    else
    {
        close(ev->fd);
        printf("recv[fd=%d] error[%d]:%s/n", fd, errno, strerror(errno));
    }
}

// send data
void SendData(int fd, int events, void *arg)
{
    struct myevent_s *ev = (struct myevent_s*)arg;
    int len;
    // send data
    len = send(fd, ev->buff, ev->len, 0);
    ev->len = 0;
    EventDel(g_epollFd, ev);
    if(len > 0)
    {
        // change to **receive** event
        EventSet(ev, fd, __RecvData__, ev);
        EventAdd(g_epollFd, EPOLLIN|EPOLLET, ev);
    }
    else
    {
        close(ev->fd);
        printf("recv[fd=%d] error[%d]/n", fd, errno);
    }
}

void InitListenSocket(int epollFd, short port)
{
    int listenFd = socket(AF_INET, SOCK_STREAM, 0);
    fcntl(listenFd, F_SETFL, O_NONBLOCK); // set non-blocking
    printf("server listen fd=%d/n", listenFd);
    EventSet(&g_Events[MAX_EVENTS], __listenFd, AcceptConn__, &g_Events[MAX_EVENTS]);   //注册一个**回调函数**
    // add listen socket
    EventAdd(epollFd, __EPOLLIN|EPOLLET__, &g_Events[MAX_EVENTS]);  
    // bind & listen
    sockaddr_in sin;
    bzero(&sin, sizeof(sin));
    sin.sin_family = AF_INET;
    sin.sin_addr.s_addr = INADDR_ANY;
    sin.sin_port = htons(port);
    bind(listenFd, (const sockaddr*)&sin, sizeof(sin));
    listen(listenFd, 5);
}

int main(int argc, char **argv)
{
    short port = 12345; // default port
    if(argc == 2){
        port = atoi(argv[1]);
    }
    **// create epoll**
    g_epollFd = epoll_create(MAX_EVENTS);
    if(g_epollFd <= 0) printf("create epoll failed.%d/n", g_epollFd);
    // create & bind listen socket, and add to epoll, set non-blocking
    InitListenSocket(**g_epollFd**, port);
    __// event loop__
    struct epoll_event events[MAX_EVENTS];
    printf("server running:port[%d]/n", port);
    int checkPos = 0;
    while(1){
        // a simple timeout check here, every time 100, better to use a mini-heap, and add timer event
        long now = time(NULL);
        for(int i = 0; i < 100; i++, checkPos++) // __doesn't check listen fd__
        {
            if(checkPos == MAX_EVENTS) checkPos = 0; // recycle
            if(g_Events[checkPos].status != 1) continue;
            long duration = now - g_Events[checkPos].last_active;
            if(duration >= 60) // 60s timeout
            {
                close(g_Events[checkPos].fd);
                printf("[fd=%d] timeout[%d--%d]./n", g_Events[checkPos].fd, g_Events[checkPos].last_active, now);
                EventDel(g_epollFd, &g_Events[checkPos]);
            }
        }
        // wait for events to happen
        int fds = __epoll_wait__(g_epollFd, __events__, MAX_EVENTS, 1000);
        if(fds < 0){
            printf("epoll_wait error, exit/n");
            break;
        }
        for(int i = 0; i < fds; i++){
            **myevent_s *ev = (struct myevent_s*)events[i].data.ptr ;**
            if((events[i].events&**EPOLLIN**)&&(ev->events&EPOLLIN)) // read event
            {
                ev->call_back(ev->fd, events[i].events, ev->arg);
            }
            if((events[i].events&**EPOLLOUT**)&&(ev->events&EPOLLOUT)) // write event
            {
                ev->call_back(ev->fd, events[i].events, ev->arg);
            }
        }
    }
    // free resource
    return 0;
}
