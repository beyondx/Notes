Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-06-03T21:37:25+08:00

====== setsockopt ：SO LINGER 选项设置 ======
Created 星期五 03 六月 2011
http://blog.csdn.net/factor2000/archive/2009/02/23/3929816.aspx

此选项指定函数close对面向连接的协议如何操作（如TCP）。内核缺省close操作是立即返回，如果有数据残留在套接口缓冲区中则系统将试着将这些数据发送给对方。

SO_LINGER选项用来改变此缺省设置。使用如下结构：

struct linger {
     int l_onoff; /* 0 = off, nozero = on */
     int l_linger; /* linger time */
};


有下列三种情况：

1、设置 l_onoff为0，则该选项关闭，l_linger的值被忽略，等于内核缺省情况，**close调用会立即返回**给调用者，如果可能将会传输任何未发送的数据(调用进程立即结束，但进程对应的TCP发送缓冲区中可能还有未发送完的数据，所以TCP连接可能会延迟一段时间后关闭，这个是正常的TIME_WAIT状态)；

2、设置 l_onoff为非0，l_linger为0，则套接口关闭时TCP夭折连接，TCP将**丢弃保留**在套接口发送缓冲区中的任何数据并发送一个__RST__给对方，而不是通常的四分组终止序列，这避免了**TIME_WAIT**状态；

3、设置 l_onoff 为非0，l_linger为非0，当套接口关闭时内核将拖延一段时间（由l_linger决定）。如果套接口缓冲区中仍残留数据，**进程将处于睡眠状态(注意close调用不是立即返回)**，直 到（a）所有数据发送完且__被对方确认__，之后进行正常的终止序列（描述字访问计数为0）或（b）延迟时间到。此种情况下，应用程序__检查close的返回值__是非常重要的，如果在数据发送完并被确认前时间到(超时)，close将__返回EWOULDBLOCK错误__且套接口发送缓冲区中的任何数据都__丢失__。close的成功返回仅告诉我们发送的数据（和FIN）__已由对方TCP确认__，它并不能告诉我们对方应用进程是否已读了数据。如果套接口设为非阻塞的，它将不等待close完成。
 
注释：l_linger的单位依赖于实现: 4.4BSD假设其单位是时钟滴答（百分之一秒），但Posix.1g规定单位为秒。
 
下面的代码是一个使用SO_LINGER选项的例子，使用30秒的超时时限：
#define TRUE     1
#define FALSE    0
int z; /* Status code*/ 
int s;       /* Socket s */
struct linger so_linger;
...
so_linger.l_onoff = TRUE;
so_linger.l_linger = 30;
z = setsockopt(s,
    SOL_SOCKET,
    SO_LINGER,
    &so_linger,
    sizeof so_linger);
if ( z )
   perror("setsockopt(2)");

下面的例子显示了如何设置SO_LINGER的值来**中止套接口s上的当前连接**：
#define TRUE     1
#define FALSE    0
int z; /* Status code */
int s;       /* Socket s */
struct linger so_linger;
...
__so_linger.l_onoff = TRUE;__
__so_linger.l_linger = 0;__
z = setsockopt(s,
    SOL_SOCKET,
    SO_LINGER,
    &so_linger,
    sizeof so_linger);
if ( z )
    perror("setsockopt(2)");
**close(s); /* Abort connection */**


在上面的这个例子中，当调用close函数时，套接口s会立即中止。__中止的语义是通过将超时值设置为0来实现的__。
正常情况下，TCP收到不在已有连接中的数据(但不包括序号是将来收到的哪些)时会自动发送RST给对方，应用进程是不知晓的。
但应用进程可以通过将l_linger设为0然后调用close的方法来异常终止(不是通常的四次握手，而是通过RST)与对方的通信。
