Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-09-10T00:26:42+08:00

====== 函数要多小才够好 ======
Created Saturday 10 September 2011

   “ 设计良好的函数往往比较小，而过大函数的设计往往一塌糊涂，或者存在很大的优化空间。”

    也许你认为讨论函数的大小没有必要，原因是函数设计的本质是内聚，它的大小只是它的表现形式。而上面的原因有必要让我们讨论一下函数的大小问题。

    我对函数的核心思路：我提出**代码最小处理单元**的概念：一个基本操作（赋值，比较等），一个函数调用（包括调用后判断返回值进行判断）都看成一个最小处理单元。

   那么，__一个函数，最小处理单元合理的个数范围在7以内__。如果超过了7，你就要考虑把他们拆分成多个函数了（为什么是7？人同时能够处理的信息不超过7个）。

    最小数目没有限制，即便是只有1个，也有存在的必要。

    在下面的情况下我会将函数拆分为更小的函数：

=====     1、一眼不能够看到函数所有的代码。 =====

    如果函数过长，无法一眼看到一个函数所有的代码，我会毫不犹豫的拆分。我不想让读者去翻屏，也不想让读者前顾后盼，顾此失彼。__漂亮的函数应该让读者一眼就知道他在做什么以及怎么做__的。

=====     2、局部变量过多。 =====

    如果局部变量超过七个，我会考虑拆分函数。__变量过多意味着我要记录太多的状态__，这会加重我大脑的负担，同时要考虑太多的东西。这也同时意味着我可能没有对函数功能进行深入的思考。

=====     3、太多的缩进。 =====

    太多的缩进意味着太多的嵌套，要么是循环，要么是判断，都会导致__复杂的逻辑__。

====     4、如果你在使用ctrl+c和ctrl+v ====

    那你写的代码不够拽（DRY，Don't Repeat Yourself）。这个时候，你要把你复制的部分拆分为新的函数。

====     5、不处于同一抽象层次。 ====

    举例，有一个初始化函数，需要初始化配置数据，套接字，数据库连接，通道状态。

    view plain

        Void init()  
        {  
                Config_init();  
                Socket_init();  
                Db_init();  
                Int I = 0;  
                For (I = 0;I < max_chn_num;i++)//初始化所有通道  
                {  
                        G_user_chn[i].status = status_init;  
                        ……  
                 }  
        }  

    上个函数中对所有通道的初始化一块代码就和其他的不处于一个抽象层次，我们**应该将它封装起来**：

    view plain

        void chn_init()  
        {  
                Int I = 0;  
                For (I = 0;I < max_chn_num;i++)//初始化所有通道  
                {  
                        G_user_chn[i].status =status_init;  
                        ……  
                }  
        }  

===== 函数最小可以有多小，它存在的意义 =====

    我见过的最优秀的函数：

        int max(int a, intb)  
        {  
                return a > b?a:b;  
        }  

    这个函数很小，只有一行，但是他存在的意义在于：在函数的调用点，我们一眼就知道是获取a和b中的最大值，而不是分析a > b?a:b的逻辑。这样可以节省程序员的脑力成本，从而达到一个目的：__漂亮的函数应该让读者一眼就知道他在做什么以及怎么做的__。

===== 小函数的最大障碍：性能 =====

    对于程序员新手，小函数的最大障碍在于没有经验__体会不到小函数的优势__，没有经验__拆分大函数为更小的函数__。

    对于有一定经验的程序员，小函数的最大障碍也许是对性能的忧虑。

    __对于性能，切记，不要过早优化__。我们一般认为的程序的瓶颈，一般并不是程序的瓶颈：我们需要工具来确定真正的瓶颈所在，20%的代码耗费了80%的性能，优化之前首先要找到那20%的代码。函数调用会产生资源和性能的损耗，但是这是不是程序的性能瓶颈？消耗的性能占总体的性能百分比为多少？这一切在代码编写时并不清楚，所以，我的观点是__宁可选择简短的函数来获得清晰简单的设计__，以便在项目后期能够更快，更好的进行性能优化。

    很多人都在质疑我上面列举的max函数的实例，如果说他在运行期间调用次数不大，则对性能的影响基本可以忽略，而获得的可读性，清晰性这极具价值；反过来，如果他的调用次数是否庞大，以致成为了性能的瓶颈，则完全可以在程序编写完成后，很快的用其他的方法优化。程序的瓶颈不会很多。

     在对新员工培训的过程中，发现程序员新手一般对函数的大小不够敏感。所以，我建议你可以多尝试编写10行左右（甚至更小）的函数，慢慢你会发现小函数原来具有大威力。
=============================================================================================
以下内容翻译至《Learning Python》17章的Function Design Concepts一节。有些地方翻译的不到位，敬请谅解，建议阅读原文，下面是原文翻译。

当你开始使用函数的时候，你马上就会面对的一个问题是“__如何把多个部件结合到一起__”，例如如何把一个任务分解成多个有目的的函数（内聚），函数之间如何通讯(耦合)等等。

在函数的设计过程中你需要考虑__内聚（cohesion）、耦合（Coupling）__、函数的大小等一系列问题，这些都会影响到函数结构的分析和设计。

下面为Python的初学者提供几条通用的设计指南。 

耦合：使用“参数”做输入，用“返回”做输出。我们__应该努力使一个函数独立于函数以外的东西__。“参数”和“返回”通常都是使函数和外部隔离的最好的方法。 

耦合：只在万不得已时候才使用全局变量。全局变量通常都是一种很差劲的函数间通讯的方式会导致若干函数间的__相互依赖__、__时间选__择（timing issue）等问题，并且最终从而使程序变得难以调试、维护和修改。 

耦合：除非调用者期望，否则__不要改变“可改变”的参数__。函数能够改变部分传递过来的参数的值。但就和全局变量一样，这会导致调用和被调用函数间的依赖，从而使得函数变得特别的__“特殊”和“易碎”__。 

内聚：每个函数应该有它自己__单一的、唯一的目的__。一个设计良好的函数应该只做一件事情，对函数功能的描述用__一句简单的话__就可以加以总结。当你发现对某个函数的描述过于宽泛的（例如，这个函数实现了我所有的程序），或是描述内容中包含了很多的__关联__（例如，这个函数给店员增加提成并提交一个pizza订单），你可以考虑将这个函数分割成几个独立的更为简单的函数。否则就无法重用混杂在一起的代码。

函数大小：每个函数都应该__相对的小__。这个原则实际上会和上面那个内聚目标关联在一起的。如果你的函数需要占据多个页面话，最好能够分割他们。在Python编程中如果出现某个function要依赖很长的、嵌入很深的嵌入函数这通常就是设计有问题的信号。让__函数保持小且简单__。 

耦合：避免直接修改在另一个模块文件中的变量。作为参考，要谨记跟全局变量会耦合函数一样，__跨多个模块文件修改变量__会导致模块变得难以理解和重用。只要有可能就要使用__存取方法__，而不是直接的赋值语句。 下面这张图是对上述几条规则的总结。图的左边是函数的输入（包括了参数、全局变量、文件/流等等），图的右边是函数的输出（包括了返回语句、也变参数、全局变量）。很多函数设计人员更喜欢使用参数做为输入，用返回语句做为输出。

{{~/sync/notes/zim/Programme/函数要多小才够好/cb4ee938b4420507b8998fba.jpg}}
不要太过于纠结，不要太过于形式。我认为最好的函数就是，__在主main里面，所看到的基本都是函数__，如果还要干什么，就单独去看即可
void main() {
step1();
step2();
……
}

个人愚见：
__函数应该是体现的一个功能，让阅读者一看就知道这个函数是做什么用的__。函数过长，的确会给阅读者带来很大的麻烦。如果你的函数真的非常长，那么考虑将函数剥离出来，看看是否可以剥离出通用的部分来，如果剥离不出，那么请别为了让函数瘦身而瘦身。
项目开发中，遇到很多这样的情况，一个类中，很多函数，你看一个主要的函数，一直看下去，得看N多个小的函数。而这些小函数并不是很通用的，这样对阅读者来说，并没有提高阅读性。
__好的函数，应该有一个好的命名，应该尽量瘦身，但不是为了瘦身而瘦身__。每个独立的函数，都有自己强壮的处理和通用能力，根据函数的具体业务，考虑函数是否瘦身，但不是为了瘦身而瘦身，这样的函数设计，是否会更合理。

