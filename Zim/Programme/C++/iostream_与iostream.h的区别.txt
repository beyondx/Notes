Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-08-06T09:42:48+08:00

====== iostream 与iostream.h的区别 ======
Created Saturday 06 August 2011

iostream.h它是一个非标准的输入输出流，这个.h的头文件时C语言格式的，由于当时没有命名空间这个说法，所以也就不存在std这个命名空间标识符。自然用iostream.h也就用不着std或者using namespace std了；

iostream 是标准输入输出流，它是C++规范的带有名称空间的头文件，它包含在std命名空间中。而iostream流里又包含cin和cout输入输出对象，所以使用cout的时候必须加std，假如我们不加的话，编译就会报错。

通过上面的分析呢，我们可以看出iostream和iostream.h的区别是否引用命名空间std的区别

所谓namespace，是指__标识符的各种可见范围__。C＋＋标准程序库中的所有标识符都被定义于一个名为std的namespace中。
　　

==== 一 、<iostream>和<iostream.h>格式不一样　 ====
　前者没有后缀，实际上，在你的编译器include文件夹里面可以看到，二者是两个文件，打开文件就会发现，里面的代码是不一样的。__ 后缀为.h的头文件c++标准已经明确提出不支持了__，早些的实现将标准库功能定义在__全局空间__里，声明在带.h后缀的头文件里，c++标准为了和C区别开，也为了正确使用命名空间，规定头文件不使用后缀.h。 因 此，当使用<iostream.h>时，相当于在c中调用库函数，使用的是全局命名空间，也就是__早期的c++实现__；当使用< iostream>的时候，该头文件__没有__定义全局命名空间，必须使用namespace std；这样才能正确使用cout。

===== 二、namespace是指标识符的各种可见范围 =====
　　**C＋＋标准程序库中的所有标识符都被定义于一个名为std的namespace中。** 由于namespace的概念，使用C＋＋标准程序库的任何标识符时，可以有三种选择：
1、直接指定标识符。
　　例如std::ostream而不是ostream。完整语句如下： std::cout << std::hex << 3.4 << std::endl;
2、使用using关键字。
　　using std::cout; using std::endl; using std::cin; 以上程序可以写成 cout << std::hex << 3.4 << endl;
3、最方便的就是使用using namespace std
　　例如： using namespace std; 这样__命名空间std内定义的所有标识符都有效（曝光）__。就好像它们被声明为__全局变量__一样。那么以上语句可以如下写: cout << hex << 3.4 << endl; 因为标准库非常的庞大，所以程序员在选择的类的名称或函数名时就很有可能和标准库中的某个名字相同。所以为了避免这种情况所造成的名字冲突，就把标准库中的一切都放在名字空间std中。但这又会带来了一个新问题。无数原有的C++代码都依赖于使用了多年的伪标准库中的功能，他们都是在全局空间下的。 所以就有了<iostream>和<iostream.h>等等这样的头文件，一个是为了兼容以前的C++代码，一个是为了支持新的标准。 命名空间std封装的是标准程序库的名称，标准程序库为了和以前的头文件区别，一般不加".h"
简便理解
　　98年以后的c++语言提供一个全局的命名空间namespace，可以避免导致全局命名冲突问题。举一个实例，请注意以下两个头文件：
　　// one.h
　　char func(char);
　　class String { ... };
　　// somelib.h
　　class String { ... };
　　如果按照上述方式定义，那么这两个头文件不可能包含在同一个程序中，因为String类会发生冲突。

　　所谓命名空间，是一种将程序库名称封装起来的方法，它就像在各个程序库中立起一道道围墙。
