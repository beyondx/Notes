Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-02-07T10:55:30+08:00

====== C++ Standard Template Library ======
Created Tuesday 07 February 2012
http://en.wikipedia.org/wiki/Standard_Template_Library

The Standard Template Library (STL) is a C++ software library which heavily influenced many parts of the** C++ Standard Library**. It provides four components called __algorithms, containers, functors, and iterators__.

The STL provides a ready-made set of common classes for C++, such as containers and associative arrays, that can be used with any built-in type and with any user-defined type that __supports some elementary operations__ (such as copying and assignment). STL __algorithms are independent of containers__, which significantly reduces the complexity of the library.

The STL achieves its results through the use of templates. This approach provides __compile-time polymorphism__ that is often more efficient than traditional run-time polymorphism. Modern C++ compilers are tuned to minimize any abstraction penalty arising from heavy use of the STL.

The STL was created as the first library of __generic algorithms and data structures__ for C++, with four ideas in mind: generic programming, abstractness without loss of efficiency, the Von Neumann computation model,[1] and value semantics.

===== Contents =====

    1 Composition
        1.1 Containers
        1.2 Iterators
        1.3 Algorithms
        1.4 Functors
    2 History
    3 Criticisms
        3.1 Quality of implementation
        3.2 Other issues
    4 Implementations
    5 See also
    6 Notes
    7 References
    8 External links

===== Composition =====

==== Containers ====
The STL contains __sequence containers and associative containers__. The standard sequence containers include__ vector, deque, and list__. The standard associative containers are __set, multiset, map, and multimap__. There are also container adaptors __queue, priority_queue, and stack__, that are containers with specific interface, using other containers as implementation.

Container 						Description
			Simple Containers
__pair__ 	The pair container is a simple associative container consisting of __a 2-tuple __of data elements or objects, called 'first' and 'second', in that fixed order. The STL 'pair' can be **assigned, copied and compared**. The array of objects allocated in a map or hash_map (described below) are of __type 'pair' by default__, where all the 'first' elements act as the **unique keys**, each associated with their 'second'** value objects**.

			Sequences (Arrays/Linked Lists): ordered collections
__vector __	**a dynamic array**, like C array (i.e., capable of __random access__) with the ability to__ resize itself automatically__ when inserting or erasing an object. Inserting and removing an element to/from back of the vector at the end takes amortized constant time. Inserting and erasing at the beginning or in the middle is linear in time.  A specialization for __type bool__ exists, which optimizes for space by storing bool values as bits.
__list__ 	**a doubly linked list**; elements are __not stored in contiguous memory__. Opposite performance from a vector. Slow lookup and access (linear time), but once a position has been found, quick insertion and deletion (constant time).
__deque__ (double-ended queue) 	__a vector__ with insertion/erase at the beginning or end in amortized constant time, however lacking some guarantees on iterator validity after altering the deque.

			Container adaptors
__queue__ 	Provides FIFO queue interface in terms of push/pop/front/back operations.  Any sequence supporting operations front(), back(), push_back(), and pop_front() can be used to instantiate queue (e.g. list and deque).
__priority_queue__ 	Provides priority queue interface in terms of push/pop/top operations (the element with the highest priority is on top).  Any random-access sequence supporting operations front(), push_back(), and pop_back() can be used to instantiate priority_queue (e.g. vector and deque).  Elements should additionally __support comparison__ (to determine which element has a higher priority and should be popped first).
__stack__ 	Provides LIFO stack interface in terms of push/pop/top operations (the last-inserted element is on top).  Any sequence supporting operations back(), push_back(), and pop_back() can be used to instantiate stack (e.g. vector, list, and deque).

			Associative containers: **unordered** collections
__set __	a mathematical set; inserting/erasing elements in a set does not invalidate iterators pointing in the set. Provides set operations union, intersection, difference, symmetric difference and test of inclusion. Type of data must __implement comparison operator <__ or custom comparator function must be specified; such comparison operator or comparator function must guarantee strict weak ordering, otherwise behavior is undefined. Typically implemented using a self-balancing binary search tree.
__multiset__ 	same as a set, but allows duplicate elements.
__map __	**an associative array**; allows mapping from one data item (a key) to another (a value). Type of key must implement comparison operator < or custom comparator function must be specified; such comparison operator or comparator function must guarantee strict weak ordering, otherwise behavior is undefined. Typically implemented using a self-balancing binary search tree.
__multimap __	same as a map, but allows duplicate keys.
__hash_set__
__hash_multiset__
__hash_map__
__hash_multimap __	similar to a set, multiset, map, or multimap, respectively, but __implemented using a hash table__; keys are not ordered, but a hash function must exist for the key type. These containers are not part of the C++ Standard Library, but are included in SGI's STL extensions, and are included in common libraries such as the GNU C++ Library in the ____gnu_cxx namespace__. These are scheduled to be added to the C++ standard as part of TR1, with the slightly different names of** unordered_set, unordered_multiset, unordered_map and unordered_multimap**.
			Other types of containers
__bitset __	stores series of bits similar to __a fixed-sized vector of bools__. Implements bitwise operations and lacks iterators. Not a Sequence.
__valarray__ 	another C-like array like vector, but is designed for high speed numerics at the expense of some programming ease and general purpose use. It has many features that make it ideally suited for use with vector processors in traditional vector supercomputers and SIMD units in consumer-level scalar processors, and also ease vector mathematics programming even in scalar computers.

===== Iterators =====
The STL implements five different types of iterators. These are __input iterators__ (that can only be used to read a sequence of values), __output iterators__ (that can only be used to write a sequence of values), __forward iterators __(that can be read, written to, and move forward), __bidirectional iterators__ (that are like forward iterators, but can also move backwards) and __random access iterators__ (that can move freely any number of steps in one operation).

It is possible to have bidirectional iterators act like random access iterators, as moving forward ten steps could be done by simply moving forward a step at a time a total of ten times. However, having distinct random access iterators__ offers efficiency advantages__. For example, a vector would have a random access iterator, but a list only a bidirectional iterator.

Iterators are the major feature that__ allow the generality of the STL__. For example, an algorithm to reverse a sequence can be implemented using bidirectional iterators, and then the same implementation can be used on lists, vectors and deques. User-created containers only have to provide an iterator that implements one of the five **standard iterator interfaces**, and __all the algorithms provided in the STL can be used on the container__.

This generality also comes at a price at times. For example, performing a search on an associative container such as a map or set can be much slower using iterators than by __calling member functions__ offered by the container itself. This is because an associative container's methods can take advantage of knowledge of the internal structure, which is opaque to algorithms using iterators.

===== Algorithms =====
A large number of algorithms to perform operations such as searching and sorting are provided in the STL, each implemented to require a certain level of iterator (and therefore will work on any container that provides an interface by iterators).

===== Functors =====
The STL includes classes that __overload the function operator (operator()). Classes that do this are called functors or function objects__. They are useful for **keeping and retrieving state information** in functions passed into other functions. Regular function pointers can also be used as functors.

A particularly common type of functor is the __predicate__. For example, algorithms like **find_if** take a **unary** predicate that operates on the elements of a sequence. Algorithms like sort, partial_sort, nth_element and all sorted containers use a binary predicate that must provide a strict weak ordering, that is, it must behave like a membership test on a transitive, irreflexive and antisymmetric binary relation. If none is supplied, these algorithms and containers use less by default, which in turn calls the less-than-operator <.

===== History =====

The architecture of STL is largely the creation of Alexander Stepanov. In 1979 he began working out his initial ideas of __generic programming__ and exploring their potential for revolutionizing software development. Although David Musser had developed and advocated some aspects of generic programming already by year 1971, it was limited to a rather specialized area of software development (computer algebra).

Stepanov recognized the full potential for generic programming and persuaded his then-colleagues at General Electric Research and Development (including, primarily, David Musser and Deepak Kapur) that __generic programming should be pursued as a comprehensive basis for software development__. At the time there was no real support in any programming language for generic programming.

The first major language to provide such support was __Ada__, with its generic units feature. By 1987 Stepanov and Musser had developed and published an Ada library for list processing that embodied the results of much of their research on generic programming. However, Ada had not achieved much acceptance outside the defense industry and C++ seemed more likely to become widely used and provide good support for generic programming even though the language was relatively immature. Another reason for turning to C++, which Stepanov recognized early on, was the C/C++ model of computation that allows very flexible access to storage via pointers, which is crucial to achieving generality without losing efficiency.

Much research and experimentation were needed, not just to develop individual components, but to develop an overall architecture for a component library based on generic programming. First at AT&T Bell Laboratories and later at Hewlett-Packard Research Labs (HP), Stepanov experimented with many architectural and algorithm formulations, first in C and later in C++. Musser collaborated in this research and in 1992 Meng Lee joined Stepanov's project at HP and became a major contributor.

This work undoubtedly would have continued for some time being just a research project or at best would have resulted in an HP proprietary library, if Andrew Koenig of Bell Labs had not become aware of the work and asked Stepanov to present the main ideas at a November 1993 meeting of the ANSI/ISO committee for C++ standardization. The committee's response was overwhelmingly favorable and led to a request from Koenig for a formal proposal in time for the March 1994 meeting. Despite the tremendous time pressure, Alex and Meng were able to produce a draft proposal that received preliminary approval at that meeting.

The committee had several requests for changes and extensions (some of them major), and a small group of committee members met with Stepanov and Lee to help work out the details. The requirements for the most significant extension (associative containers) had to be shown to be consistent by fully implementing them, a task Stepanov delegated to Musser. It would have been quite easy for the whole enterprise to spin out of control at this point, but again Stepanov and Lee met the challenge and produced a proposal that received final approval at the July 1994 ANSI/ISO committee meeting. (Additional details of this history can be found in Stevens.) Subsequently, the Stepanov and Lee document 17 was incorporated into the ANSI/ISO C++ draft standard (1, parts of clauses 17 through 27). It also influenced other parts of the C++ Standard Library, such as the string facilities, and some of the previously adopted standards in those areas were revised accordingly.

In spite of STL's success with the committee, there remained the question of how STL would make its way into actual availability and use. With the STL requirements part of the publicly available draft standard, compiler vendors and independent software library vendors could of course develop their own implementations and market them as separate products or as selling points for their other wares. One of the first edition's authors, Atul Saini, was among the first to recognize the commercial potential and began exploring it as a line of business for his company, Modena Software Incorporated, even before STL had been fully accepted by the committee.

The prospects for early widespread dissemination of STL were considerably improved with Hewlett-Packard's decision to make its implementation freely available on the Internet in August 1994. This implementation, developed by Stepanov, Lee, and Musser during the standardization process, became the basis of many implementations offered by compiler and library vendors today.
