Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-08-07T11:05:03+08:00

====== C++类与对象的进一步讨论(2) ======
Created Sunday 07 August 2011

我们经常会看到**一个类中可能会出现另一个类的对象作为它的数据成员**，既然是对象，那么就会涉及到这个对象成员要初始化的问题。而程序中各种数据的共享，在一定程度上破环了数据的安全性。C++中有什么方法可以保证数据共享又防止数据改动。另外除以上两个问题，我还将说说C++的**多文件程序**。

　　1.我们在创建类的对象时，如果这个类具有__内嵌的对象__，那么__该对象成员也将被自动创建__。所以创建对象时既**要对本类的基本数据成员初始化，又要对内嵌的对象初始化**。具体怎么做呢，我还是用Employee(雇员)和Salary(薪水)两个类来举个实例：

 1 #include "stdafx.h"
 2 #include<string>
 3 #include<iostream>
 4 
 5 class Employee
 6 {
 7     private:
 8         std::string id;
 9         std::string name;
10     public:
11         Employee(std::string id,std::string name);
12         ~Employee();
13         void showEmployee();
14 };
15 
16 Employee::Employee(std::string id,std::string name):id(id),name(name)
17 {
18     std::cout<<"构造对象employee"<<std::endl;
19 }
20 
21 Employee::~Employee()
22 {
23     std::cout<<"释放对象employee内存空间"<<std::endl;
24 }
25 
26 void Employee::showEmployee()
27 {
28     std::cout<<"编号："<<id<<std::endl; 
29     std::cout<<"姓名："<<name<<std::endl;
30 }
31 
32 
33 class Salary
34 {
35     private:
36       __  Employee employee; //雇员__
37         double wage;//工资
38         double bonus;//奖金
39         double commission;//提成
40         double allowance;//津贴
41         double subsidy;//补贴
42     public:
43         Salary(double wage,double bonus,double commission,double allowance,double subsidy,__std::string id,std::string name);__
44         ~Salary();
45         void showSalary();
46 };
47 
48 Salary::Salary(double wage,double bonus,double commission,double allowance,double subsidy,std::string id,std::string name):__wage(wage),bonus(bonus),commission(commission),allowance(allowance),subsidy(subsidy),employee(id,name)//初始化对象成员employee__
49 {
50     std::cout<<"构造对象salary"<<std::endl;
51 }
52 
53 Salary::~Salary()
54 {
55     std::cout<<"释放对象salary内存空间"<<std::endl;
56 }
57 
58 void Salary::showSalary()
59 {
60     employee.showEmployee();//显示雇员信息
61     std::cout<<"薪水："<<std::endl;
62     std::cout<<"  工资："<<wage<<std::endl;
63     std::cout<<"  奖金："<<bonus<<std::endl;
64     std::cout<<"  提成："<<commission<<std::endl;
65     std::cout<<"  补贴："<<subsidy<<std::endl;
66     std::cout<<"  津贴："<<allowance<<std::endl;
67 }
68 
69 
70 int main()
71 {
72     {
73         Salary salary(3000,3000,0,200,100,"001","aaa");
74         salary.showSalary();
75     }
76 
77     return 0;
78 }

结果：

从初始化成员对象的代码中可以看到其实和之前所说的__成员初始化表对数据成员初始化的形式是一样的__。看到main函数体里的实现部分，可能有人会问那个大括号是否画蛇添足了。如果单单是从程序运行的流程考虑，的确没什么必要。而我特意加上这个大括号是为了说明在系统编译运行时它的顺序是怎么样的，从显示的结果来看，是先调用了Employee()的构造函数，在调用自己(Salary())的构造函数，而在调用各自的析构函数时则刚好相反。也许有人会问，那如果Salary里的对象成员不只一个，那么这些对象成员的构造函数调用的顺序是怎么样的？其实__系统编译运行时对对象成员的构造函数调用的顺序是根据其在类声明中的顺序来依次调用，而释放对象空间(析构函数)的过程则刚好相反;__

　

===== 　2.C++的常类型的引入 =====
，就是为了**既保证数据共享又防止数据被改动**。在面向对象里常__类型主要有常对象、常数据成员以及常成员函数。__
(1)常对象的形式有：类名 const 对象名[参数表]或const 类名 对象名[参数表]，__常对象中的数据成员值在对象的整个对象的生存期内不能被改变，而且常对象不能调用普通成员函数，只能调用常成员函数。__
(2)常数据成员的形式其实和C++对C语言的非面向对象特性扩充（1）所讲到过的常量是一样，但要注意的是类__里的常数据成员只能通过初始化列表对其进行初始化，其他函数都不能对其赋值__; 
注意：__常数据成员和静态数据成员是不同的__，后者不是常类型而是生存期较长，可以对其赋值初始化和修改。
(3)常成员函数的形式：__类型 函数名(参数表) const__，const是函数类型的__组成部分__，所以__在声明函数和定义函数时都要加关键字const__;同样我们以Employee(雇员)类为例：

 1 #include "stdafx.h"
 2 #include<string>
 3 #include<iostream>
 4 
 5 class Employee
 6 {
 7     private:
 8         const std::string id;//常数据成员
 9         const std::string name;//常数据成员
10     public:
11         Employee(std::string id,std::string name);
12         ~Employee();
13         void showEmployee();//普通成员函数
14         __void showEmployee() const;//常成员函数__
__// 注意：const是函数类型的一部分，故上面两个函数是重载的。__
15 };
16 
17 Employee::Employee(std::string id,std::string name):__id(id),name(name)__
18 {
19     //std::cout<<"构造对象employee"<<std::endl;
20 }
21 
22 Employee::~Employee()
23 {
24     //std::cout<<"释放对象employee内存空间"<<std::endl;
25 }
26 
27 void Employee::showEmployee()
28 {
29     std::cout<<"普通成员函数:"<<std::endl;
30     std::cout<<"编号："<<id<<std::endl; 
31     std::cout<<"姓名："<<name<<std::endl;
32 }
33 
34 void Employee::showEmployee()__ const__
35 {
36     std::cout<<"常成员函数:"<<std::endl;
37     std::cout<<"编号："<<id<<std::endl; 
38     std::cout<<"姓名："<<name<<std::endl;
39 }
40 
41 int main()
42 {
43     Employee employee("001","aa");
44     employee.showEmployee();
45 
46     std::cout<<"********************************"<<std::endl;
47 
48    __ Employee const const_employee("002","bb");//常对象__
49     const_employee.showEmployee();
50 
51     return 0;
52 }

结果：

从上述示例代码中，我可以看到两个同名函数void showEmployee()，一个是普通成员函数，一个是常成员函数，它们是重载的，由此说明__const可以被用于对重载函数的区分__;

　

===== 3.C++的源程序基本上由3个部分组成 =====
：类的声明部分、类的实现部分和类的使用部分，针对3个部分，C++中对应分为3个文件：__类声明文件(*.h文件)、类的实现文件(*.cpp)和类的使用文件(*.cpp,主函数main文件)__。

那么为什么C++中的要使用多文件，一个*.cpp类的使用文件就可解决的问题，为何那么麻烦要分三步走呢？主要有以下几个方面：(1)类的实现文件通常会比较大，将类的声明和实现放在一起，不利于程序的阅读、管理和维护。我们通常说__接口应该和实现的部分分离__，这样可以更易于修改程序。
(2)把类成员函数的实现放在声明文件中和单独放实现文件里，__在编译时是不一样的。前者是作为类的内联函数来处理的__。
(3)对于软件的厂商来说，__它只需向用户提供程序公开的接口__，而不用公开程序源代码。从这一点来看，我觉得C++在面向对象方面比C#更加明确，清晰。

4.最后还是一样，我将用一个示例来总结一下今天所讲的内容，同时将把程序按照C++多文件的原则分成3个文件来实现(开发工具：vs2010):

**1.声明文件*.h:**

==== employee.h(雇员类的声明文件) ====

 1 #include<string>
 2 #include<iostream>
 3 
 4 class Employee
 5 {
 6     private:
 7         const std::string id;//常数据成员
 8         const std::string name;//常数据成员
 9     public:
10         Employee(std::string id,std::string name);
11         ~Employee();
12         void showEmployee();//普通成员函数
13         void showEmployee() const;//常成员函数
14 };

==== salary.h(薪水类的声明文件) ====
#include "employee.h"
 2 
 3 class Salary
 4 {
 5     private:
 6         const Employee employee; //雇员
 7         const double wage;//工资(常数据成员)
 8         double bonus;//奖金
 9         double commission;//提成
10         double allowance;//津贴
11         double subsidy;//补贴
12     public:
13         Salary(double wage,double bonus,double commission,double allowance,double subsidy,std::string id,std::string name);
14         ~Salary();
15         void showSalary();
16 };

**2.实现文件*.cpp:**

==== employee.cpp(雇员类的实现文件) ====
1 #include "stdafx.h"
 2 #include<iostream>
 3 
 4 #include "employee.h"
 5 
 6 Employee::Employee(std::string id,std::string name):id(id),name(name)
 7 {
 8     std::cout<<"构造对象employee"<<std::endl;
 9 }
10 
11 Employee::~Employee()
12 {
13     std::cout<<"释放对象employee内存空间"<<std::endl;
14 }
15 
16 void Employee::showEmployee()
17 {
18     std::cout<<"普通成员函数:"<<std::endl;
19     std::cout<<"编号："<<id<<std::endl; 
20     std::cout<<"姓名："<<name<<std::endl;
21 }
22 
23 void Employee::showEmployee() const
24 {
25     std::cout<<"常成员函数:"<<std::endl;
26     std::cout<<"编号："<<id<<std::endl; 
27     std::cout<<"姓名："<<name<<std::endl;
28 }

==== salary.cpp(薪水类的实现文件) ====
1 #include "stdafx.h"
 2 #include<iostream>
 3 
 4 #include "salary.h"
 5 
 6 Salary::Salary(double wage,double bonus,double commission,double allowance,double subsidy,std::string id,std::string name):wage(wage),bonus(bonus),commission(commission),allowance(allowance),subsidy(subsidy),employee(id,name)
 7 {
 8     std::cout<<"构造对象salary"<<std::endl;
 9 }
10 
11 Salary::~Salary()
12 {
13     std::cout<<"释放对象salary内存空间"<<std::endl;
14 }
15 
16 void Salary::showSalary()
17 {
18     employee.showEmployee();//显示雇员信息
19     std::cout<<"薪水："<<std::endl;
20     std::cout<<"  工资："<<wage<<std::endl;
21     std::cout<<"  奖金："<<bonus<<std::endl;
22     std::cout<<"  提成："<<commission<<std::endl;
23     std::cout<<"  补贴："<<subsidy<<std::endl;
24     std::cout<<"  津贴："<<allowance<<std::endl;
25 }

**3.使用文件*.cpp**

main主函数文件

 1 #include "stdafx.h"
 2 #include<iostream>
 3 
 4 #include "salary.h"
 5 int main()
 6 {
 7     {
 8         Salary salary(3000,3000,0,200,100,"001","aaa");
 9         salary.showSalary();
10     }
11 
12     return 0;
13 }

结果：


