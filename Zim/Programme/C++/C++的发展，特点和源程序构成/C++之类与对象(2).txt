Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-08-07T10:14:44+08:00

====== C++之类与对象(2) ======
Created Sunday 07 August 2011

　接着上一节，今天讲C++中类的构造函数与析构函数，对象的赋值与复制.

　　1.用过C#语言的人，都知道__构造函数是一种特殊的成员函数，它主要用于对对象分配空间，进行初始化。__构造函数的名字必须与类名相同。可以有任何类型的参数，但不返回任何值，是在__建立对象时自动执行__的。和上一节一样，还是用Kid类来说明。

 1 class Kid
 2 {
 3     private:
 4         int age;
 5         char *name;
 6         char *sex;
 7     public:
 8         Kid(int age,char *name,char *sex);
 9         void showKid();
10 };
11 
12 Kid::Kid(int age,char *name,char *sex)
13 {
14     Kid::age=age;
15     Kid::name=name;
16     Kid::sex=sex;
17 }
18 
19 void Kid::showKid()
20 {
21     cout<<"姓名："<<name<<endl<<"年龄："<<age<<endl<<"性别："<<sex<<endl;
22 }

　　接下来，建立对象并初始化：Kid kid(10,"rookie_j","男");另外一种使用new运算符__动态建立对象__：Kid *ptr=new Kid(10,"rookie_j","男");通过指针变量ptr来访问：ptr->showKid();当我们用new建立对象时，当不再使用它时，要用delete运算符释放它:delete ptr;和不同成员函数一样，__如果构造函数定义在类体内部，则作为内联函数处理__;

　　在声明类时，对数据成员的初始化一般在构造函数中用赋值语句进行，但C++还提供了另外一种初始化数据成员的方法——__用成员初始化表来实现对数据成员的初始化。__它的一般形式为：类名::构造函数名([参数表]):[(成员初始化表)];
成员初始化表的形式为：成员名1(初始值1),成员名2(初始值2),成员名2(初始值2);比如：

Kid::Kid(int age,char *name,char *sex):age(age),name(name),sex(sex){};

　　接下来讲一下析构函数：在我第一次在C++里看到这个名词时，感觉这个知识点很深奥，结果看了以后，其实很简单。它的作用和构造函数刚好相反，__用于撤销对象__，如：释放分配给对象的内存空间。析构函数和构造函数名相同，但在其前面要加~符号，析构函数没有参数，也没有返回值，且不能重载，因此一个类中只有一个析构函数。
以下三种情况，__当对象的生命周期结束时，析构函数会被自动调用__：
(1)定义了全局对象，则在程序流程离开其作用域(如：main函数结束或调用Exit)时，调用该全局对象的析构函数;
(2)对象被定义在函数体里，则当这个函数执行完后，该对象释放，析构函数被自动调用;
(3)若一个对象使用new运算符动态创建的，在使用delete运算符释放它时，会自动调用析构函数;
View Code

结果:

　　如果没有给类定义构造函数，则__编译系统自动地生成一个默认的构造函数__，比如在Kid类中编译系统会为其产生一个Kid::Kid(){};构造函数，这个__默认的构造函数只能给对象开辟存储空间，不能给数据成员赋值初始化，这时数据成员的初值就是随机数__。对没有定义构造函数的类，其公有数据成员可以用初始化值表进行初始化，如：

 1 class Kid
 2 {
 3     public:
 4         int age;
 5         char *name;
 6         char *sex;
 7 };
 8 
 9 int main()
10 {
11 
12     Kid kid={10,"Rookie_j","男"};
13     cout<<"姓名："<<kid.name<<endl<<"年龄："<<kid.age<<endl<<"性别："<<kid.sex<<endl;
14 
15     return 0;
16 }

但只要一个类定义了构造函数，系统将不再给它提供默认构造函数；另外还有默认的析构函数(Kid::~Kid(){})，一般来说默认的析构函数就能满足要求，但对一些需要做一些内部处理的则应该显式定义析构函数。带默认参数的构造函数和之前所说的带参数的成员函数是一样的，对于构造函数的重载，在这里我就不多说了，只想强调一点，如果是无参的构造函数创建对象，应该使用"类名 对象名"的形式，而不是"类名 对象名()";

　　2.对象的赋值其实和变量的赋值差不多，也是用赋值运算符=进行的，只不过进行赋值的两个对象的类型必须相同，对象之间的赋值只是数据成员的赋值，而不对成员函数赋值;

View Code

结果：

　　__拷贝构造函数是一种特殊的构造函数__，其形参是类对象的引用。它主要用于__在建立一个新的对象时，使用已经存在的对象去初始化这个新对象。__拷贝构造函数也是构造函数，所以函数名必须与类名相同，参数只有一个就是同类对象的引用，每个类必须要有一个拷贝构造函数。如果程序员自己不定义拷贝构造函数，系统会自动产生一个__默认拷贝构造函数__。

调用拷贝构造函数的形式有__代入法__：类名 对象2（对象1）和__赋值法__：类名 对象2=对象1;
View Code

结果：

　　同样的默认的拷贝构造函数：复制出与源对象的数据成员的值一样的新对象。调用拷贝构造函数的3种情况：(1)Kid kid2(kid1)或Kid kid2=kid1;(2)函数的形参是类的对象：fun(Kid kid){kid.showKid();}; int main(){Kid kid(10,"Rookie_j","男");fun(kid);return 0;};(3)函数返回值为类的对象：Kid fun(){Kid kid(10,"Rookie_j","男"); return kid;} int main(){ Kid kid; kid=fun();kid.showKid();return 0;};

　　3.最后还是一样用一个实例来总结一下今天所说的内容(开发工具：vs2010)：
