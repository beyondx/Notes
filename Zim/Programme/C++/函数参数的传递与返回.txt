Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-08-06T09:50:59+08:00

====== 函数参数的传递与返回 ======
Created Saturday 06 August 2011

一、通过值传递：函数变量A中的值，传递（复制）到了被调函数中的变量a中，两者的内存地址不同。
        应用范围：当函数不必改变请求调用的程序中的原变量时，以值传递参数。实际上它保证了函数无法破坏原变量。
注意：如果传递的值是一个对像，则在传递的过程中会调用该对像的复制构造函数：
        list student_list = uestc_list ;

二、通过引用传递 &：函数变量A与被调函数中引用自A的变量a，是内存中的同一地址的不同名称。

         实质：通过引用传递参数，是对请求调用的程序中 原变量的引用 被传递给调用函数：实际上，是变量的内存地址被传递了；
        好处：   1.被调用的函数可以访问请求调用的程序中的实际变量。
                     2.__提供了从被调函数向调用他的程序返回不止一个值得机制。__

三、通过引用返回：通过引用&，引用被调函数的返回值到调用函数中。

        原因：1.避免虚函数中要见到的复制巨大的对象。
                  2__.允许在等号的左边使用调用函数。__

例：

#include <iostream>
using namespace std;
int  x;               //全局变量
int& setx();          //函数声明

int main()
{
   __ setx()=92;      __  //函数调用，等号左边通过引用返回
    cout<<"x="<<x<<endl;
    return 0;
}

int& setx()            //函数定义     
{
    return x;
}

 程序中的函数setx()声明为应用类型int&，它和返回类型是一样的。

 setx()=92;  //__表示函数返回的变量（这里为x）被赋值为等号右方的值__。即结果为：x=92

注意：1.y=setx();表示把函数当做值来处理
          2.setx()=92;表示通过引用返回的函数被当做变量来处理
          3.__不能从引用返回的函数返回一个常量__。 上面程序如果是return 4； 那么程序错误。
          4.不能将引用返回给__局部变量__。 如：
     int& setx()            //函数定义    
       {

    int x=3;
    return x;
}

此时也错误，因为当函数返回时，函数的局部变量可能被销毁，返回引用一个不存在的变量是没有意义的。

