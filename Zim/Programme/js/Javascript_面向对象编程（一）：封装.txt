Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-03-06T21:08:26+08:00

====== Javascript 面向对象编程（一）：封装 ======
Created Tuesday 06 March 2012

http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html

作者： 阮一峰
日期： 2010年5月17日

学习Javascript，最难的地方是什么？

我觉得，**Object（对象）**最难。因为Javascript的Object模型很独特，和其他语言都不一样，初学者不容易掌握。

下面就是我的学习笔记，希望对大家学习这个部分有所帮助。我主要参考了以下两本书籍：

* 《面向对象的Javascript》（Object-Oriented JavaScript）
* 《Javascript高级程序设计（第二版）》（Professional JavaScript for Web Developers, 2nd Edition)

它们都是非常优秀的Javascript读物，推荐阅读。

笔记分成三部分。今天的第一部分是讨论"封装"（Encapsulation），后面的第二部分和第三部分讨论"继承"（Inheritance）。

============================

Javascript 面向对象编程（一）：封装

作者：阮一峰

Javascript是一种基于对象（object-based）的语言，__你遇到的所有东西几乎都是对象__。但是，它__又不是一种真正的面向对象编程（OOP）语言__，因为它的语法中没有class（类）。

那么，如果我们要把"属性"（property）和"方法"（method），封装成一个对象，甚至要__从原型对象生成一个实例对象__，我们应该怎么做呢？

===== 1. 生成对象的原始模式 =====

假定我们把猫看成一个对象，它有"名字"和"颜色"两个**属性**。

    　　var Cat = {

    　　　　name : '',

    　　　　color : ''

    　　}

现在，我们需要__根据这个原型对象，生成两个实例对象__。

    　　var cat1 = {}; // 创建一个空对象

    　　　　cat1.name = "大毛"; // 按照原型对象的属性赋值

    　　　　cat1.color = "黄色";

    　　var cat2 = {};

    　　　　cat2.name = "二毛";

    　　　　cat2.color = "黑色";

好了，这就是最简单的封装了。但是，这样的写法有两个缺点，一是如果多生成几个实例，写起来就非常麻烦；二是__实例与原型之间，没有任何办法，可以看出有什么联系__。

===== 2. 原始模式的改进 =====

我们可以写一个函数，解决代码重复的问题。

    　　function Cat(name,color){
    　　　　return {
**    　　　　　　name:name,**
**    　　　　　　color:color**
    　　　　}
    　　}

然后**生成实例对象，就等于是在调用函数**：

    　　var cat1 = Cat("大毛","黄色");

    　　var cat2 = Cat("二毛","黑色");

这种方法的问题依然是，__cat1和cat2之间没有内在的联系，不能反映出它们是同一个原型对象的实例__。

===== 3. 构造函数模式 =====

为了解决**从原型对象生成实例的问题**，Javascript提供了__一个构造函数（Constructor）模式__。

所谓"构造函数"，其实就是一个普通函数，但是__内部使用了this变量__。对构造函数使用__new运算符__，就能生成实例，并且__this变量会绑定在实例对象上__。

比如，猫的原型对象现在可以这样写，

    　　function Cat(name,color){
    　　　　this.name=name;
    　　　　this.color=color;
    　　}

我们现在就可以生成实例对象了。

    　　var cat1 = new Cat("大毛","黄色");
    　　var cat2 = new Cat("二毛","黑色");

    　　alert(cat1.name); // 大毛
    　　alert(cat1.color); // 黄色

这时cat1和cat2会__自动含有一个constructor属性，指向它们的构造函数__。

    　　alert(cat1.constructor == Cat); //true
    　　alert(cat2.constructor == Cat); //true

Javascript还提供了一个__instanceof运算符__，验证原型对象与实例对象之间的关系。

    　　alert(cat1 instanceof Cat); //true

    　　alert(cat2 instanceof Cat); //true

===== 4. 构造函数模式的问题 =====

构造函数方法很好用，但是存在一个**浪费内存**的问题。

请看，我们现在为Cat对象添加一个不变的属性"type"（种类），再添加一个方法eat（吃老鼠）。那么，原型对象Cat就变成了下面这样：

    　　function Cat(name,color){
    　　　　this.name = name;
    　　　　this.color = color;
    　　　　this.type = "猫科动物";
    　　　　this.eat = function(){alert("吃老鼠");};
    　　}

还是采用同样的方法，生成实例：

    　　var cat1 = new Cat("大毛","黄色");
    　　var cat2 = new Cat ("二毛","黑色");
    　　alert(cat1.type); // 猫科动物
    　　cat1.eat(); // 吃老鼠

表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。那就是对于每一个实例对象，type属性和eat()方法都是__一模一样的内容__，每一次生成一个实例，都必须为重复的内容，多占用一些内存。这样既不环保，也缺乏效率。

    　　alert(**cat1.eat == cat2.ea**t); //false

能不能让type属性和eat()方法在__内存中只生成一次__，然后所有实例都指向那个内存地址呢？回答是可以的。

===== 5. Prototype模式 =====

Javascript规定，__每一个构造函数都有一个prototype属性__，指向另一个对象。**这个对象的所有属性和方法，都会被构造函数的实例继承**。

这意味着，我们可以__把那些不变的属性和方法，直接定义在prototype对象上__。

    　　function Cat(name,color){

    　　　　this.name = name;
    　　　　this.color = color;

    　　}

    　　Cat.prototype.type = "猫科动物";
    　　Cat.prototype.eat = function(){alert("吃老鼠")};

然后，生成实例。

    　　var cat1 = new Cat("大毛","黄色");
    　　var cat2 = new Cat("二毛","黑色");
    　　alert(cat1.type); // 猫科动物
    　　cat1.eat(); // 吃老鼠

这时所有实例的type属性和eat()方法，其实都是__同一个内存地址__，指向prototype对象，因此就提高了运行效率。

    　　alert(**cat1.eat == cat2.eat**); //true

===== 6. Prototype模式的验证方法 =====

==== 6.1 isPrototypeOf() ====
这个方法用来判断，某个**proptotype对象和某个实例之间**的关系。
    　　alert(Cat.prototype.isPrototypeOf(cat1)); //true
    　　alert(Cat.prototype.isPrototypeOf(cat2)); //true

==== 6.2 hasOwnProperty() ====

每个实例对象都有一个hasOwnProperty()方法，用来__判断某一个属性到底是本地属性，还是继承自prototype对象的属性__。

    　　alert(cat1.hasOwnProperty("name")); // true
    　　alert(cat1.hasOwnProperty("type")); // false

==== 6.3 in运算符 ====

in运算符可以用来判断，某个实例是否含有某个属性，不管是不是本地属性。

    　　alert("name" in cat1); // true
    　　alert("type" in cat1); // true

in运算符还可以用来**遍历某个对象的所有属性**。

    　　for(**var prop** in cat1) { alert("cat1["+prop+"]="+cat1[prop]); }

未完，请继续阅读这个系列的第二部分《构造函数的继承》和第三部分《非构造函数的继承》。
