Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-03-06T21:17:32+08:00

====== Javascript面向对象编程（二）：构造函数的继承 ======
Created Tuesday 06 March 2012

http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_inheritance.html

作者： 阮一峰  日期： 2010年5月23日

这个系列的第一部分，主要介绍了**如何"封装"数据和方法**，以及如何**从原型对象生成实例**。

今天要介绍的是，如何**生成一个"继承"多个对象的实例**。

比如，现在有一个"动物"对象的构造函数，


    　　function Animal(){
    　　　　this.species = "动物";
    　　}

还有一个"猫"对象的构造函数，


    　　function Cat(name,color){
    　　　　this.name = name;
    　　　　this.color = color;
    　　}

怎样才能使"猫"继承"动物"呢？

===== 1. 构造函数绑定 =====

最简单的方法，大概就是使用__call或apply方法__，**将父对象的构造函数绑定在子对象上**，也就是在子对象构造函数中加一行：

    　　function Cat(name,color){

    　　　　Animal.apply(this, arguments);
    　　　　this.name = name;
    　　　　this.color = color;
    　　}

    　　var cat1 = new Cat("大毛","黄色");
    　　alert(cat1.species); // 动物

===== 2. prototype模式 =====

__更常见的做法，则是使用prototype属性__。

如果"猫"的prototype对象，指向一个Animal的实例，那么所有"猫"的实例，就能继承Animal了。

    　　Cat.prototype = new Animal();
    　　__Cat.prototype.constructor = Cat;__
    　　var cat1 = new Cat("大毛","黄色");
    　　alert(cat1.species); // 动物

代码的第一行，我们将Cat的prototype对象指向一个Animal的实例。

    　　Cat.prototype = new Animal();

它相当于__完全删除了prototype 对象原先的值，然后赋予一个新值__。但是，第二行又是什么意思呢？

    　　Cat.prototype.constructor = Cat;

原来，__任何一个prototype对象都有一个constructor属性，指向它的构造函数__。也就是说，Cat.prototype 这个对象的constructor属性，是指向Cat的。

我们在前一步已经删除了这个prototype对象原来的值，所以__新的prototype对象没有constructor属性，所以我们必须手动加上去__，否则后面的"__继承链__"会出问题。这就是第二行的意思。

总之，这是很重要的一点，__编程时务必要遵守__。下文都遵循这一点，即如果替换了prototype对象，

    　　o.prototype = {};

那么，下一步必然是为新的prototype对象加上constructor属性，并将这个属性指回原来的构造函数。

    　　o.prototype.constructor = o;

===== 3. 直接继承prototype =====

由于Animal对象中，__不变的属性都可以直接写入Animal.prototype__。所以，我们也可以**让Cat()跳过 Animal()，直接继承Animal.prototype**。

现在，我们先将Animal对象改写：

    　　function Animal(){ }
    　　Animal.prototype.species = "动物";

然后，将Cat的prototype对象，然后指向Animal的prototype对象，这样就完成了继承。

    　　Cat.prototype = Animal.prototype;
    　　Cat.prototype.constructor = Cat;
    　　var cat1 = new Cat("大毛","黄色");
    　　alert(cat1.species); // 动物

与前一种方法相比，这样做的优点是__效率比较高__（不用执行和建立Animal的实例了），比较省内存。缺点是 Cat.prototype和Animal.prototype现在指向了同一个对象，那么任何对Cat.prototype的修改，都会反映到Animal.prototype。

所以，上面这一段代码其实是有问题的。请看第二行

    　　Cat.prototype.constructor = Cat;

这一句**实际上把Animal.prototype对象的constructor属性也改掉了**！

    　　alert(Animal.prototype.constructor); // Cat

===== 4. 利用空对象作为中介 =====

由于"直接继承prototype"存在上述的缺点，所以可以利用一个__空对象作为中介__。

    　　var F = function(){};
    　　F.prototype = Animal.prototype;
    　　Cat.prototype = new F();
    　　Cat.prototype.constructor = Cat;

F是空对象，所以几乎不占内存。这时，修改Cat的prototype对象，就不会影响到Animal的prototype对象。

    　　alert(Animal.prototype.constructor); // Animal

===== 5. prototype模式的封装函数 =====

我们将上面的方法，封装成一个函数，便于使用。

    　　function extend(Child, Parent) {
    　　　　var F = function(){};
    　　　　F.prototype = Parent.prototype;
    　　　　Child.prototype = new F();
    　　　　Child.prototype.constructor = Child;
    　　　　Child.uber = Parent.prototype;
    　　}

使用的时候，方法如下

    　　extend(Cat,Animal);
    　　var cat1 = new Cat("大毛","黄色");
    　　alert(cat1.species); // 动物

这个extend函数，就是__YUI库__如何实现继承的方法。

另外，说明一点。函数体最后一行

    　　Child.uber = Parent.prototype;

意思是**为子对象设一个uber属性**，这个属性直接指向父对象的prototype属性。这等于__是在子对象上打开一条通道，可以直接调用父对象的方法__。这一行放在这里，只是为了实现继承的完备性，纯属备用性质。

===== 6. 拷贝继承 =====

上面是采用prototype对象，实现继承。我们也可以换一种思路，__纯粹采用"拷贝"方法实现继承__。简单说，如果把父对象的所有属性和方法，拷贝进子对象，不也能够实现继承吗？

首先，还是把Animal的所有不变属性，都放到它的prototype对象上。

    　　function Animal(){}
    　　Animal.prototype.species = "动物";

然后，再写一个函数，实现属性拷贝的目的。

    　　function extend2(Child, Parent) {
    　　　　var p = Parent.prototype;
    　　　　var c = Child.prototype;
    　　　　for (var i in p) {
    　　　　　　c[i] = p[i];
    　　　　　　}
    　　　　c.uber = p;
    　　}

这个函数的作用，就是将父对象的prototype对象中的属性，一一拷贝给Child对象的prototype对象。

使用的时候，这样写：

    　　extend2(Cat, Animal);
    　　var cat1 = new Cat("大毛","黄色");
    　　alert(cat1.species); // 动物

未完，请继续阅读第三部分《非构造函数的继承》。

（完）
