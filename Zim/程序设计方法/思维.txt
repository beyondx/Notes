Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-08-04T19:53:45+08:00

====== 思维 ======
Created Thursday 04 August 2011

程序设计课程的基本目标是培养学生的程序设计能力。
程序设计课程包括三个重要的知识模块：一是语言知识，二是程序设计方法，三是算法。
在这三个知识模块中，计算机语言处于程序设计的最底层，是程序设计的基础和工具，是掌握编程技术的关键；程序设计方法处于程序设计的中间层，是在开发正确可靠软件的前提下，缩短软件开发周期，进而延长软件使用周期的重要手段；算法处于程序设计的顶层，是解决问题的规则，是程序设计的核心。
从时间上说，语言有较大的局限性，不能用来解决所有类型的问题，人们要根据所需解决的问题不同而选择不同的语言，而语言本身也在不断变化和更新。因此，语言具有不稳定和变化更新快的特征。程序设计方法体现了时代的趋势，它对于算法而言变化相对较快，而对于语言及其各种版本的变化而言则相对稳定。算法则比较稳定，它与描述算法的语言无关，可以在更长的时间内发挥作用。
从知识内涵来说，语言只要多实践多使用就能熟能生巧，程序设计方法是不可选择或不可抗拒的时代潮流，只能在应用中领悟和熟悉，算法则需要比较深入的理论基础知识，必须经过严格的科学的训练。
基于这一认识，程序设计课程要把语言知识作为一种技能来培养，把程序设计方法作为一个规则来遵循，把算法作为科学方法来传授，这样才能适应时代的需要，跟上技术的飞速发展。因此，我们注意把算法贯穿于教学的始终，对不同的知识模块采用不同的教学方法，把培养学生的程序设计能力和自学能力作为本课程的出发点和归宿。

1．把握认知规律，改革教学方法和手段，重在提高学生程序设计能力

掌握方法论是大学生应具备的基本素质，可以终身受用。不同的学科有共性的方法论，也有各自的方法论。就程序设计而言，其主要的方法论是逻辑思维能力，这种逻辑思维与数学思维有许多共同之处，也有自己独特的地方，即与计算机联系在一起的特殊点。许多学生在学习程序设计时，入门迟、得道难，一方面是由于学习重点的偏差，只注重语言知识的学习，忽略了逻辑思维能力的训练；另一方面是学习方法的偏差，只注意读程序，忽视了实际编程。我们在程序设计教学中坚持以程序设计为中心的理念，注意把握认知规律，采用逐步过渡的“三步教学法”，把语言知识的学习和逻辑思维能力的训练有机结合起来，通过讲授程序设计中的“三种思维方法”，使学生掌握计算机算法的本质，提高举一反三的能力，领悟程序设计的真缔。

（1）采用“三步教学法”，实现逻辑思维能力的深化

学习程序设计要经过学习语言、阅读程序和编制程序的循序渐进过程。在教学过程中，我们将这些训练分解成三个阶段，分别采用不同的教学方法，使学生能从认识论上逐步深化。

第一阶段介绍VB集成环境、基本控件和VB基本语句和应用，这一阶段主要采用案例示范的教学方法，结合程序讲语言，以讲现成的程序为主，在程序中加深对语言知识的理解，并通过模仿来编制类似的程序，提高简单程序设计的能力。

第二阶段介绍基本程序控制结构、数据结构、过程及文件，这一阶段采用形象思维的教学方法，对涉及到的程序例题主要通过框图讲算法，培养学生理解程序流程，根据框图编制程序，由形象思维向抽象思维过渡，同时在程序设计的实践中进一步熟悉语言知识，并具备依据算法框图编制程序的能力。

第三阶段介绍界面设计、图形操作和数据库应用，这一阶段采用抽象思维的教学方法，通过实际问题讲解如何将一个复杂的问题分解成若干较为简单的问题，从而提高开发简单实用系统的初步能力。

（2）基于三种基本思维方法，促进算法分析能力的提高。

程序设计=数据结构+算法，算法是程序设计的灵魂。在教学中，我们不是就算法讲算法，而是先从理论上介绍计算机程序设计中三种最基本的思维方法，__即枚举、归纳和抽象。__绝大部分计算机算法都离不开这三种基本思维原则。根据课程进度，分三次集中介绍这三种基本的思维方法。例如，枚举法利用计算机速度快的特点解决大量数据的筛选问题，由枚举法引出最小公倍数、多解方程的求解、求最大值和最小值、工程设计中的优化问题等；归纳法利用计算机善于做简单重复操作的特点解决递推计算的问题，由归纳法引出累加、连乘、多项式计算、非线性方程求根、排序问题等；

抽象法则是人们解决复杂问题时，人的智力往往不可能一下子就触及到问题的细节方面，在分析问题的要求之后，总是__先不考虑问题的细节而设计出一个抽象算法，然后将算法求精，使之更加细化、清晰。如此不断求精，最后能轻而易举地用某种计算机语言编制出程序__。由抽象法引出复杂问题求解、小型系统开发等问题。这样，学生能在理论的指导下，从中学习到几类算法而不是单个算法，学习到算法的依据而不是仅仅是算法本身，从而达到举一反三的效果。


2．构建完备的立体课程体系，实现教学内容、教学资源和教学模式的有机融合，重在培养学生自学能力

自学能力是大学学习生活中应重点培养的能力，也是学生走入社会后能否适应知识不断更新需要的基本能力。在教学过程中，课程组本着因材施教的原则，在教学内容上对学有余力和编程爱好者提供进一步学习的空间；在教学资源方面编写有教材和辅导材料、开发了考试系统、建设了课程网站等，教学资源丰富；在教学模式上采用课堂教学、实验教学、网络教学和课外实践（开放实验、程序竞赛）等，为学生构建立体化的教学环境。通过构建完备的立体课程体系，实现了教学内容、教学资源和教学模式的有机融合。并充分利用课堂、机房、网络和课余四个空间，启发和调动学生的学习积极性，逐步提高学生的自学能力。

（1）教室空间：在课堂教学中，语言知识的介绍采用任务驱动，先提出问题，然后设计程序，在程序中讲授语法，在阅读程序中介绍语句功能，在调试程序中理解语言知识的细节；算法的介绍采用理论先行，先介绍算法的理论依据和基本规则，然后介绍相关的具体算法。这样来实施语言的技能性培养和算法的科学性训练。用能引起学生兴趣的小游戏程序实例引出课程教学内容，使学生先了解编程结果，再有针对性地学习相应教学内容，即引入了“实物”教学模型，增加了抽象编程教学内容的直观性，提高了学生的学习兴趣。同时，在教学过程中，采用师生换位的教学方法和内容比较的教学方法。例如，在讲定时器编程实例“滚动字幕”时，先讲解使字幕从右向左滚动的编程实现，等学生理解之后，再让学生做老师讲解使字幕从右向左滚动并编程上机实现，作为提高，甚至让学生再讲解使字幕从上向下、下向上滚动并编程上机实现。这样，对学生是一个很好的锻炼，

（2）机房空间：程序设计课程是一门既有理论性又有实践性的课程。实验是程序设计的第二课堂。实验效果的好坏直接影响到学生的学习质量。为此，我们将实验课程分为三个层次，第一层次是有详细说明，单一解决简单问题的基础与验证型实验，这部分内容约占整个实验的二分之一；第二层次是有简要提示，但需要综合应用前面所学知识的综合与设计型实验，约占整个实验的三分之一；第三层次是只给出问题要求，需要学生自行思考和解决的研究与创新型实验。并且创新性的采取了电子实验报告，让学生把更多的精力放在如何把实验做好，而不是如何把实验报告写好上面。

（3）网络空间：为了调动学生的学习积极性和自觉性，我们提供了比较完善的网上教学资源，包括电子课件和电子教案可供下载；网络课程集中了本课程的所有知识点，特别是重点和难点，使学生能根据自己的需要，进行交互式的自主学习；按照讲课的顺序，每章都有题量较大的同步练习题，一方面供学生预习和复习，另一方面也能协调各位老师的教学要求，使整体教学水平保持一致；每章都有网上自测题供学生自我测试。此外，我们还提供了“在线答疑”栏目，师生之间和学生之间可以进行实时互动交流。这样做的结果是学生课前课后提问题的多了，依靠平时消化而不是依靠期末突击的多了，避免了某些学生由于一时跟不上教学进度而失去学习积极性。

（4）课余空间：本着因材施教的原则，我们在各班成立兴趣小组，对那些基础较好、有兴趣的同学，指导他们先学一步，多学一点，给他们布置超过教学进度和超出课程内容的设计题目，使这部分学生在实验教学中成为教师的有力助手，帮助有困难的同学解决问题，也带动全班整体学习风气的改善。
