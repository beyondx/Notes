Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-08-11T19:45:03+08:00

====== 制作jffs2根文件系统并将其烧写到flash中 ======
Created Saturday 11 August 2012

1. **配置ltib**，指定生成的目标文件系统映像类型为__jffs2__，同时__erase block 大小与Flash datasheet上指定的一致__（这里为16KB）：
	     --- Choose your root filesystem image type                                                                                     │ │  
	  │ │                                                               Target image: __(jffs2)__  --->                                                                                                │ │  
	  │ │                                                           [ ] Run a command after building the target image                                                                              │ │  
	  │ │                                                           __(16)__ jffs2 erase block size in KB                                                                                              │ │  
	  │ │                                                           [ ] read-only root filesystem                                                                                                  │ │  
	  │ │                                                           (512k) tmpfs size                                                                                                              │ │  
	  │ │                                                           (/tmp /var) Place these dirs in writable RAM                                                                                   │ │  
	  │ │                                                           ()  rootfs target directory

2. **复位开发板，进入uboot命令行状态**

**3. 将生成的rootfs.jffs2映像下载到内存中**

=> tftp 1000000 rootfs.jffs2
Speed: 100, full duplex
Using eTSEC0 device
TFTP from server 192.168.2.105; our IP address is 192.168.2.100
Filename 'rootfs.jffs2'.
Load address: 0x1000000
Loading: #################################################################
         #################################################################
         #################################################################
         #################################################################
         ##################################
done
Bytes transferred = 4308992 (41c000 hex)

**4.按照dtb中的Flash分区配置，擦出将要保存rootfs.jffs2文件的flash存储区域**
例如对于mpc8315dtb-defaults.dts中的配置如下：
flash@0,0 {  #NOR flash
                        #address-cells = <0x1>;
                        #size-cells = <0x1>;
                        compatible = "cfi-flash";
                        reg = <0x0 0x0 0x800000>;
                        bank-width = <0x2>;
                        device-width = <0x1>;

                        u-boot@0 {
                                reg = <0x0 0x100000>;
                                read-only;
                        };

                        fs@100000 {
                                reg = <0x100000 0x400000>;
                        };

                        kernel@500000 {
                                reg = <0x500000 0x200000>;
                        };

                        dtb@700000 {
                                reg = <0x700000 0x100000>;
                        };
                };

                nand@1,0 {
                        #address-cells = <0x1>;
                        #size-cells = <0x1>;
                        compatible = "fsl,mpc8315-fcm-nand", "fsl,elbc-fcm-nand";
                        reg = <0x1 0x0 0x2000>;

                        u-boot@0 {
                                reg = <0x0 0x100000>;
                                read-only;
                                label = "U-Boot-NAND";
                        };

                        __jffs2@100000 {__
                                reg = <0x100000 0x800000>;
                                label = "JFFS2-NAND";
			  };

                        ramdisk@900000 {
                                reg = <0x900000 0x400000>;
                                label = "Ramdisk-NAND";
                        };

                        reserved@d00000 {
                                reg = <0xd00000 0x1000000>;
                                label = "Reserved-NAND";
                        };

                        kernel@1d00000 {
                                reg = <0x1d00000 0x200000>;
                                read-only;
                                label = "Kernel-NAND";
                        };

                        dtb@1f00000 {
                                reg = <0x1f00000 0x100000>;
                                read-only;
                                label = "DTB-NAND";
                        };
                };
当我们想将rootfs.jffs2烧写到label为"JFFS2-NAND"的NAND Flash区域时，可以使用下列的擦出命令：
**=> nand erase 100000 800000**

NAND erase: device 0 offset 0x100000, size 0x800000
Bad block table found at page 65504, version 0x01
Bad block table found at page 65472, version 0x01
nand_read_bbt: Bad block at 0x000a8000
nand_read_bbt: Bad block at 0x000ac000
nand_read_bbt: Bad block at 0x000b0000
nand_read_bbt: Bad block at 0x000b4000
Erasing at 0x8fc000 -- 100% complete.
OK
=> 

5. **将下载到内存0x1000000开始的大小为$filesize的rootfs.jffs2文件烧写到NAND Flash 0x100000开始的地方。**
=> nand write 1000000 100000 $filesize

NAND write: device 0 offset 0x100000, size 0x41c000
 4308992 bytes written: OK
=> 

6. **设置kernel命令行参数，指定root为刚才烧写到的nand partition。**
    => setenv bootargs __root=/dev/mtdblock5 rw rootfstype=jffs2__ console=ttyS0,115200

7. **设置uboot自动启动时的bootcmd参数，注意fe500000和fe700000两个flash内存区域事先已经用uboot命令行写入了uImage和mpc8315.dtb文件。**
=> setenv bootcmd bootm fe500000 - fe700000
=> saveenv   __#这样下次启动时，如果过了6秒时间uboot会按照bootcmd环境变量的值启动。__
=>boot
## Booting kernel from Legacy Image at fe500000 ...
   Image Name:   Linux-3.2.4-gfd2812f
   Created:      2012-08-10   7:58:18 UTC
   Image Type:   PowerPC Linux Kernel Image (gzip compressed)
   Data Size:    1551548 Bytes =  1.5 MB
   Load Address: 00000000
   Entry Point:  00000000
   Verifying Checksum ... OK
## Flattened Device Tree blob at fe700000
   Booting using the fdt blob at 0xfe700000
   Uncompressing Kernel Image ... OK
   Loading Device Tree to 007f8000, end 007ffe1f ... OK
Using MPC831x RDB machine description
Cannot reserve gpages without hugetlb enabled
Linux version 3.2.4-gfd2812f (geekard@kb310) (gcc version 4.7.1 (GCC) ) #4 Fri Aug 10 15:58:17 CST 2012
bootconsole [udbg0] enabled
setup_arch: bootmem
mpc831x_rdb_setup_arch()
Found FSL PCI host bridge at 0x00000000e0008500. Firmware bus number: 0->0
PCI host bridge /pci@e0008500 (primary) ranges:
 MEM 0x0000000090000000..0x000000009fffffff -> 0x0000000090000000 
 MEM 0x0000000080000000..0x000000008fffffff -> 0x0000000080000000 Prefetch
  IO 0x00000000e0300000..0x00000000e03fffff -> 0x0000000000000000
arch: exit
Zone PFN ranges:
  DMA      0x00000000 -> 0x00020000
  Normal   empty
Movable zone start PFN for each node
early_node_map[1] active PFN ranges
    0: 0x00000000 -> 0x00020000
Built 1 zonelists in Zone order, mobility grouping on.  Total pages: 130048
Kernel command line: root=/dev/mtdblock5 rw rootfstype=jffs2 console=ttyS0,115200
PID hash table entries: 2048 (order: 1, 8192 bytes)
Dentry cache hash table entries: 65536 (order: 6, 262144 bytes)
Inode-cache hash table entries: 32768 (order: 5, 131072 bytes)
Memory: 516520k/524288k available (2992k kernel code, 7768k reserved, 124k data, 59k bss, 152k init)
Kernel virtual memory layout:
  * 0xfffdf000..0xfffff000  : fixmap
  * 0xfdefb000..0xfe000000  : early ioremap
  * 0xe1000000..0xfdefb000  : vmalloc & ioremap
NR_IRQS:512 nr_irqs:512 16
IPIC (128 IRQ sources) at e1000700
clocksource: timebase mult[7800001] shift[22] registered
pid_max: default: 32768 minimum: 301
Mount-cache hash table entries: 512
NET: Registered protocol family 16
             
PCI: Probing PCI hardware
bio: create slab <bio-0> at 0
vgaarb: loaded
SCSI subsystem initialized
Switching to clocksource timebase
NET: Registered protocol family 2
IP route cache hash table entries: 4096 (order: 2, 16384 bytes)
TCP established hash table entries: 16384 (order: 5, 131072 bytes)
TCP bind hash table entries: 16384 (order: 4, 65536 bytes)
TCP: Hash tables configured (established 16384 bind 16384)
TCP reno registered
UDP hash table entries: 256 (order: 0, 4096 bytes)
UDP-Lite hash table entries: 256 (order: 0, 4096 bytes)
NET: Registered protocol family 1
WDT driver for MPC8xxx initialized. mode:reset timeout=65535 (32 seconds)
JFFS2 version 2.2. (NAND) © 2001-2006 Red Hat, Inc.
msgmni has been set to 1008
io scheduler noop registered
io scheduler deadline registered
io scheduler cfq registered (default)
Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
serial8250.0: ttyS0 at MMIO 0xe0004500 (irq = 16) is a 16550A
console [ttyS0] enabled, bootconsole disabled
console [ttyS0] enabled, bootconsole disabled
serial8250.0: ttyS1 at MMIO 0xe0004600 (irq = 17) is a 16550A
brd: module loaded
loop: module loaded
fe000000.flash: Found 1 x16 devices at 0x0 in 16-bit bank. Manufacturer ID 0x000001 Chip ID 0x000c01
Amd/Fujitsu Extended Query Table at 0x0040
  Amd/Fujitsu Extended Query version 1.3.
number of CFI chips: 1
__4 ofpart partitions found on MTD device fe000000.flash   #NOR Flash和NAND Flash中的分区情况是由dtb文件配置的。这只是一个指示，该分区是否含有jffs2文件系统映像则不确定(需要实现用上面的步骤烧入)。下面的分区标号从mtdblock0开始。__
__Creating 4 MTD partitions on "fe000000.flash":__
0x000000000000-0x000000100000 : "u-boot"
0x000000100000-0x000000500000 : "fs"
0x000000500000-0x000000700000 : "kernel"
0x000000700000-0x000000800000 : "dtb"

NAND device: Manufacturer ID: 0xec, Chip ID: 0x75 (Samsung NAND 32MiB 3,3V 8-bit)
Bad block table found at page 65504, version 0x01
Bad block table found at page 65472, version 0x01
nand_read_bbt: bad block at 0x0000000a8000
nand_read_bbt: bad block at 0x0000000ac000
nand_read_bbt: bad block at 0x0000000b0000
nand_read_bbt: bad block at 0x0000000b4000
6 ofpart partitions found on MTD device e0600000.flash
Creating 6 MTD partitions on "e0600000.flash":
0x000000000000-0x000000100000 : "U-Boot-NAND"
0x000000100000-0x000000900000 : __"JFFS2-NAND"  #对应的是mtdblock5__
0x000000900000-0x000000d00000 : "Ramdisk-NAND"
0x000000d00000-0x000001d00000 : "Reserved-NAND"
0x000001d00000-0x000001f00000 : "Kernel-NAND"
0x000001f00000-0x000002000000 : "DTB-NAND"
eLBC NAND device at 0xe0600000, bank 1
Freescale PowerQUICC MII Bus: probed
mdio_bus mdio@e0024520: error probing PHY at address 0
Freescale PowerQUICC MII Bus: probed
fsl-gianfar e0024000.ethernet: eth0: mac: 04:00:00:00:00:0a
fsl-gianfar e0024000.ethernet: eth0: Running with NAPI enabled
fsl-gianfar e0024000.ethernet: eth0: RX BD ring size for Q[0]: 256
fsl-gianfar e0024000.ethernet: eth0: TX BD ring size for Q[0]: 256
fsl-gianfar e0025000.ethernet: eth1: mac: 04:00:00:00:00:0b
fsl-gianfar e0025000.ethernet: eth1: Running with NAPI enabled
fsl-gianfar e0025000.ethernet: eth1: RX BD ring size for Q[0]: 256
fsl-gianfar e0025000.ethernet: eth1: TX BD ring size for Q[0]: 256
i2c /dev entries driver
mpc-i2c e0003000.i2c: timeout 1000000 us
rtc-ds1307 0-0068: SET TIME!
rtc-ds1307 0-0068: rtc core: registered ds1339 as rtc0
TCP cubic registered
NET: Registered protocol family 17
Registering the dns_resolver key type
rtc-ds1307 0-0068: setting system clock to 2000-01-01 00:00:00 UTC (946684800)
__VFS: Mounted root (jffs2 filesystem) on device 31:5.   #可以看到正确地挂载了mtdblock5设备为root。__
Freeing unused kernel memory: 152k freed
Mounting /proc and /sys 
Starting the hotplug events dispatcher mdev
Setting the hostname to mpc8315erdb
Mounting filesystems
mount: mounting usbfs on /proc/bus/usb failed: No such file or directory
Starting syslogd and klogd
Running sysctl
Setting up networking on loopback device: 

Warning: no IPADDR is set, please set this from the ltib
config screen, or directly in /etc/rc.d/rc.conf.
IP address setup bypassed

Setting up networking on eth1: 


        Welcome to the LTIB Embedded Linux Environment

!!!!! WARNING !!!!!!!

The default password for the root account is: root
please change this password using the 'passwd' command
and then edit this message (/etc/issue) to remove this message

mpc8315erdb login: PHY: mdio@e0024520:01 - Link is Up - 100/Full


        Welcome to the LTIB Embedded Linux Environment

!!!!! WARNING !!!!!!!

The default password for the root account is: root
please change this password using the 'passwd' command
and then edit this message (/etc/issue) to remove this message

mpc8315erdb login: root
Password: 
[root@mpc8315erdb /root]# 
[root@mpc8315erdb /root]# __ls /dev/mtd   __
mtd0       mtd2ro     mtd5       mtd7ro     mtdblock0  mtdblock5
mtd0ro     mtd3       mtd5ro     mtd8       mtdblock1  mtdblock6
mtd1       mtd3ro     mtd6       mtd8ro     mtdblock2  mtdblock7
mtd1ro     mtd4       mtd6ro     mtd9       mtdblock3  mtdblock8
mtd2       mtd4ro     mtd7       mtd9ro     mtdblock4  mtdblock9
[root@mpc8315erdb /root]# cat [[/proc/mtd]]  __#查看系统中所有的mtd分区情况__
dev:    size   erasesize  name
mtd0: 00100000 00010000 "u-boot"    __#name和size是在dtb文件中配置的而eraseize是在制作jffs2映像时用-e参数指定的(LTIB有相应的配置选项)。__
mtd1: 00400000 00010000 "fs"
mtd2: 00200000 00010000 "kernel"
mtd3: 00100000 00010000 "dtb"
mtd4: 00100000 00004000 "U-Boot-NAND"  
__mtd5__: 00800000 __00004000__ "JFFS2-NAND"   #注意，这里的erasesize并不准确，实际大小由相应的jffs2映像决定。
mtd6: 00400000 00004000 "Ramdisk-NAND"
mtd7: 01000000 00004000 "Reserved-NAND"
mtd8: 00200000 00004000 "Kernel-NAND"
mtd9: 00100000 00004000 "DTB-NAND"
[root@mpc8315erdb /root]# cat /proc/filesystems 
nodev   sysfs
nodev   rootfs
nodev   bdev
nodev   proc
nodev   tmpfs
nodev   sockfs
nodev   pipefs
nodev   anon_inodefs
nodev   devpts
        ext2
nodev   ramfs
        vfat
        msdos
        iso9660
__nodev   jffs2                   #内核的确支持jffs2文件系统__
__nodev   mtd_inodefs__
[root@mpc8315erdb /root]# 
[root@mpc8315erdb /root]# mkdir jffs2
[root@mpc8315erdb /root]# mount -t jffs2 /dev/mtdblock5 jffs2/  __#将jffs2分区挂载到文件系统中。__
[root@mpc8315erdb /root]# ls jffs2/   __#可见列出的内容即为我们制作的root分区。__
bin       etc       lib       mnt       proc      sbin      sys       usr
dev       home      linuxrc   opt       root      smbshare  tmp       var
[root@mpc8315erdb /root]# 

然后就可以项jffs2目录中读写文件了，在掉电后这些文件的更改并不会丢失。
