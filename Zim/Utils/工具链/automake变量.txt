Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-06-14T09:19:47+08:00

====== automake变量 ======
Created Thursday 14 June 2012
http://www.delorie.com/gnu/docs/automake/automake_47.html

**9.6 Variables used when building a program**

Occasionally it is useful to know which `Makefile' variables Automake uses for compilations; for instance you might need to do your own compilation in some special cases.

Some variables are **inherited**// from Autoconf//; these are __CC, CFLAGS, CPPFLAGS, DEFS, LDFLAGS, and LIBS__.

There are some additional variables which Automake **itself** defines:

* **AM_CPPFLAGS**
    The contents of this variable are passed to **every compilation** which invokes the C preprocessor; it is a list of arguments to the preprocessor. For instance, `-I' and `-D' options should be listed here.

    Automake already provides some `-I' options automatically. In particular it generates __`-I$(srcdir)', `-I.'__, and a `-I' pointing to the directory holding `config.h' (if you've used AC_CONFIG_HEADERS or AM_CONFIG_HEADER). You can disable the default `-I' options using the `nostdinc' option.

    AM_CPPFLAGS is ignored in preference to a __per-executable (or per-library) _CPPFLAGS variable__ if it is defined.

* AM_CPPFLAGS是一个全局变量，会传给每一个编译预处理命令。
* 我们也可以通过filename_CPPFLAGS的形式为每一个可执行程序或库文件指定编译预处理选项。当定义这个变量时AM_CPPFLAGS会被忽略。

* **INCLUDES**  （将被弃用的变量）
    This does the same job as `AM_CPPFLAGS'. It is an older name for the same functionality. This variable is __deprecated;__ we suggest using `AM_CPPFLAGS' instead.

* **AM_CFLAGS**
    This is the variable which the `Makefile.am' author can use to pass in **additional C compiler flags**. It is more fully documented elsewhere. In some situations, this is not used, in preference to the __per-executable (or per-library) _CFLAGS__.

* **COMPILE**
    This is the command used to actually compile a C source file. The filename is appended to form the complete command line.

* **AM_LDFLAGS**
    This is the variable which the `Makefile.am' author can use to pass in **additional linker flags**. In some situations, this is not used, in preference to the __per-executable (or per-library) _LDFLAGS__.

* **LINK**
    This is the command used to actually link a C program. It already includes `-o $@' and the usual variable references (for instance, CFLAGS); it takes as "arguments" the names of the object files and libraries to link in. 
