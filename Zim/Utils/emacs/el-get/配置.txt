Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-01-07T16:25:55+08:00

====== 配置 ======
Created Saturday 07 January 2012

**El Get Sources**: Show Value
   State: HIDDEN, invoke "Show" in the previous line to show.
   
   Each entry is a PLIST where the following properties are
   supported.
   
   If your property list is missing the :type property, then it's
   __merged__ with the recipe one, so that you can** override **any
   definition provided by `el-get' recipes locally.
   
   :name
   
       The name of the package. It can be different from the name of
       the directory where the package is stored (after a `git
       clone' for example, in which case a symlink will be created.
   
   :depends
   
       A single package name, or a list of package names, on which
       the package depends.  All of a packages dependencies will be
       installed before the package is installed.
   
   :pkgname
   
       The name of the package for the __underlying package management__
       __system__ (`apt-get', `fink' or `**pacman**', also supported by
       `emacsmirror'), which can be different from the Emacs package
       name.
   
   :type
   
       The type of the package, currently el-get offers support for
       `apt-get', `elpa', `git', `emacsmirror', `git-svn', `bzr' `svn',
       `cvs', `darcs', `fink', `ftp', `emacswiki', `http-tar', __`pacman'__,
       `hg' and `http'. You can easily support your own types here, 
       see the variable `el-get-methods'.
   
   :branch
   
       Which branch to fetch when using `git'.  Also supported in
       the installer in `el-get-install'.
   
   :url
   
       Where to fetch the package, only meaningful for `git' and `http' types.
   
   :build
   
       Your build recipe, a list.
   
       A recipe R whose `car' is not a string will be replaced
       by (eval R).
   
       Then, each element of the recipe will be interpreted as
       a command:
   
	* If the element is a string, it will be interpreted directly
         by the shell.
   
	* Otherwise, if it is a list, any list sub-elements will be
         recursively "flattened" (see `el-get-flatten').  The
         resulting strings will be interpreted as individual shell
         arguments, appropriately quoted.
   
   :build/system-type
   
       Your specific build recipe for a given `system-type' gets
       there and looks like :build.
   
   :load-path
   
       A directory or a list of directories you want `el-get' to add
       to your **`load-path'**. Those directories are__ relative to__ where
       the package gets installed.
   
   :compile
   
       Allow to restrict what to byte-compile: by default, `el-get'
       will compile __all elisp files in the :load-path directories__,
       unless a :build command exists for the package source. Given
       a :compile property, `el-get' will only byte-compile those
       **given files**, directories or __filename-regexpes__ in the property
       value. This property can be a `listp' or a `stringp' if you
       want to compile only one of those.
   
   :info
   
       This string allows you to setup a __directory__ where to find a
       'package.info' file, or a path/to/whatever.info file. It will
       even run `ginstall-info' for you to create the `dir' entry so
       that C-h i will be able to list the newly installed
       documentation. Note that you might need to kill (C-x k) your
       info buffer then C-h i again to be able to see the new menu
       entry.
   
   :load
   
       List of files to load, or a single file to load after having
       installed the source but __before__ `require'ing its features.
   
   :features
   
       List of features el-get will __`require'__ for you.
   
   :autoloads
   
       Control whether el-get should generate autoloads for this
       package. Setting this to nil prevents el-get from generating
       autoloads for the package. __Default is t__. Setting this to a
       string or a list of string will load the named autoload
       files.
   
   :library
   
       When **using :after but not using :features, **:library allows to
       set the library against which to register the :after function
       against `eval-after-load'.  It defaults to either :pkgname
       or :package, in this order.  See also `el-get-eval-after-load'.
   
   :options
   
       Currently used by http-tar and cvs support.
   
       When using http-tar, it allows you to give the tar options
       you want to use. Typically would be "xzf", but you might
       want to choose "xjf" for handling .tar.bz files e.g.
   
       When using CVS, when it's set to "login", `el-get' will
       first issue a `cvs login' against the server, asking you
       interactively (in the minibuffer) any password you might to
       enter, and only then it will run the `cvs checkout' command.
   
   :module
   
       Currently only used by the `cvs' support, allow you to
       configure the module you want to checkout in the given URL.
   
   :repo
   
       Only used by the `elpa' support, a cons cell with the
       form (NAME . URL), as in `package-archives'.  If the package
       source only specifies a URL, the URL will be used for NAME as
       well.
   
   :prepare
   
       Intended for use __from recipes__, it will run once both the
       **`Info-directory-list' and the**__ `load-path' __**variables have been**
**       taken care of**, but before any further action from
       `el-get-init'.
   
   :before
   
       A pre-init function to run once__ before__** `el-get-init' calls**
**       `load' and `require'. ** It gets to run with `load-path'
       already set, and after :prepare has been called.  It's__ not__
    __   intended__ for use from recipes.
   
   :post-init
   
       Intended for use from recipes.  This function is registered
       for __`eval-after-load'__ against the recipe library by
       `el-get-init' once the **:load and :features** have been setup.
   
   :after
   
       A function to register for `eval-after-load' against the
       recipe library, after :post-init, and __after per-package__
      __ user-init-file (see `el-get-user-package-directory'). __ That's not
       intended for recipe use.
   
   :lazy
   
       Default to nil.  Allows to override `el-get-is-lazy' per
       package.
   
   :localname
   
       Currently only used by both `http' and `ftp' supports, allows
       to specify the target name of the downloaded file.
   
       This option is useful if the package should be retrieved using
       a presentation interface (such as as web SCM tool).
   
       For example, destination should be set to "package.el" if
       the package url has the following scheme:
   
      "http://www.example.com/show-as-text?file=path/package.el"
   
   :website
   
       The website of the project.
   
   :description
   
       A short description of the project.
