Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-04-18T09:45:22+08:00

====== LISP模式 ======
Created Monday 18 April 2011

===== Emacs提供了三种LISP编辑模式 =====
	emacs-lisp-mode	用来编辑Emacs LISP代码
	lisp-mode		用来编辑其他系统的LISP代码
	lisp-interaction-mode	用来编辑和运行Emacs LISP代码(交互式)
这三种编辑模式的基本功能是一样的，区别是他们各自对LISP代码运行的支持功能上。

**S-表达式**(syntactic expression ， 语法表达式)指的是任意一个没有语法错误的LISP表达式，他可以是一个原子项(数字、字符串、字符、符号、变量等)或者是一个放在括号中的列表。**列表**(list)是S-表达式的特殊形式，而函数定义又是列表的特殊形式。

===== S-表达式处理命令 =====
对S-表达式进行处理的命令到底采用什么动作，取决于调用命令时插入点的位置，如果光标在一个左括号(或它前面的一个空白位置)，将被处理的是以这个左括号开始列表。
如果光标在字母或数字等其它字符(或他们前面的一个空白位置)将被处理的S-表达式将是一个原子项(符号、变量或常数)
M-a  移动到当前语句的开头,注意是语句而不是行首
M-e  移动到语句的结尾
C-M-f  向前移过某个表达式，命令的执行依赖与光标处的字符(编辑点右边)：
		如果第一个非空白字符为开始分隔符如各种括号，编辑点移到相匹配的结束分隔符之后
		如果第一个非空白字符为一个记号(如关键字，数字，字符串的引号)，编辑点就移到极好的末尾
C-M-b    向后移过某个表达式
C-M-k    向前剪切某个表达式，剪切后编辑点与C-M-f相同
C-M-@  向前编辑C-M-f移动过的区域
C-M-_    同上

C-M-a   将光标移动到最近的函数定义的开始
C-M-e  将光标移动到下一个函数定义的结尾
C-M-h   将光标所在的函数标记为区域
上面3个命令，只有在当前函数的defun出现的代码行才能正常工作。

M-C-n forward-list	移动到上一个列表
M-C-p backware-list	移动到下一个列表
M-C-d down-list		向前移动，进入到下一级括号层次
M-C-u	backward-up-list	向后移动，退出当前括号层次
上面4个命令，光标的前后必须要有一个左括号或右括号，如果没有，Emacs就会报错。


===== 缩进样式 =====

Emacs LISP函数调用使用的基本的缩进量是2，只要下一行的代码又向下嵌套了一级(如引入了一个语句块)，Emacs就将使用这个值对其缩进。如：
(defun time (x y)
  (let (i 0)
    (result 0)
    (while (< i x)
      (setq result (+ result y)
	    i (1+ i)))
    result))

如果函数有一个以上的参数，则该函数的函数名及第一个参数将出现在第一个代码行上，其他参数分别列在后续的代码行上，
并且要雨第一个参数对齐，如：
(function-name  arg1
			    arg2
			    arg3
			    ...    )

类似关键字的let和while等术语实际上是函数调用，但LISP编辑模式能根据自己对这类函数的理解对他们进行特殊的缩进安排。
另外LISP编辑模式习惯于把多个右括号都连续地写在同一行的最末尾，而不是把他们分别写到不同的代码行上。

LISP编辑模式(非最后一个交互式模式)为TAB和LINEFEED(C-j)提供了换行和自动缩进的功能，同时还提供了M-C-q对光标后面的S-表达式的每一行进行缩进(例如把光标放在函数的定义行，就可以对整个函数中的语句进行缩进)

LISP编辑模式的注释由通用注释命令M-;负责，如果注释内容占据了一整行，这时按下TAB键则将注释移到comment-column指定的位置，为了避免出现这种情况，可以用两个
或多个分号来代替单个分号。在注释时可以使用M-j在下一行继续写注释。

===== 各模式都有的功能 =====

==== Emacs LISP： ====
	Emacs LISP 是为运行Emacs内部的LISP代码准备的，所以支持直接运行输入的代码。
可以用M-C-x eval-defun 把光标附近的函数定义进行求值，同时把对该函数保存起来，以便在同一会话中调用该函数。
可以用M-TAB  lisp-complete-symbol 自动补充光标前面的符号(如变量、函数名)。

可以用M-： eval-expression 在辅助输入缓冲区中输入任何一种形式的单行LISP表达式，然后对该表达式求值，并把结果显示在辅助输入缓冲区中。
这非常适合检查变量的值，试用哪些键没有绑定，或需要额外参数的内置函数。

同时可以用C-x C-e eval-last-sexp 运行光标所在行的LISP语句，比把结果显示在辅助缓冲区中。

==== LISP模式： ====
是为非Emacs内置的LISP语言处理工具而编写的代码服务的，他提供了用来与外部LISP解释器进行通信的接口。
C-c C-z run-liisp 启动一个用户系统的LISP解释器进程，并且创建一个*lisp*编辑缓冲区，供输入和输出。如果把光标放在某个函数的定义当中再按下M-C-x就能把函数的定义放到LISP子进程中。

==== 交互式模式 ====
*scratch*编辑缓冲区默认进入的模式。
除了把LINEFEED即C-j绑定为eval-print-last-sexp外，交互式模式与Emacs LISP模式可以说是一模一样，如果想获得其它模式绑定在LIENFEED上的换行及缩进的效果，必须先按回车再按TAB。
在交互式模式中可以利用LINEFEED检查变量的值、输入函数定义和运行函数(Emacs会把函数的定义保存下来供以后使用)等。注意：交互模式的LINEFEED要求光标必须位于
定义函数的结尾行。



