Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-11-19T16:13:12+08:00

====== keymaps ======
Created Monday 19 November 2012

KEYMAPS(5)                                                          KEYMAPS(5)

===== NAME =====
       keymaps - keyboard table descriptions for **loadkeys** and **dumpkeys**

===== DESCRIPTION =====
       These  files  are  used by loadkeys(1) to modify the __translation tables__
       used by the __kernel keyboard driver__ and generated  by  **dumpkeys(1)**  from
       those translation tables.

       The  format  of  these  files is vaguely similar to the one accepted by
       **xmodmap(1).**  The file consists of charset or key or  string  definition
       lines interspersed with comments.

       Comments are introduced with !  or # characters and continue to the end
       of the line. Anything following one of these characters on that line is
       ignored.  Note  that  comments  need  not begin from column one as with
       xmodmap(1).

       The syntax of keymap files is line oriented; a complete definition must
       fit on a single logical line. Logical lines can, however, be split into
       multiple physical lines by ending each subline with the backslash char‐
       acter (\).

===== INCLUDE FILES =====
       A keymap can include other keymaps using the syntax

              include "pathname"

===== CHARSET DEFINITIONS =====
       A character set definition line is of the form:

              charset "iso-8859-x"

       It  defines  how following **keysyms** are to be interpreted.  For example,
       in iso-8859-1 the  symbol  mu  (or  micro)  has  code  0265,  while  in
       iso-8859-7 the letter mu has code 0354.

===== COMPLETE KEYCODE DEFINITIONS =====
       Each complete key definition line is of the form:

              keycode keynumber = keysym keysym keysym...

       **keynumber**  is  the  internal  identification number of the key, roughly
       equivalent to the __scan code__ of it.  keynumber can be given in  decimal,
       octal  or hexadecimal notation.  Octal is denoted by a leading zero and
       hexadecimal by the prefix 0x. 
       在虚拟终端模式下，可以通过__showkey命令__来查看某个按键的keycode。通过
      __dumpkeys__（不加任何参数，或-f参数）来查看当前keycode与keysym的绑定。

       Each of the keysyms represent **keyboard actions**, of which up to __256__  can
       be  bound  to  a  single  key. The actions available include outputting
       character codes or character sequences, switching consoles or  keymaps,
       booting  the machine etc. (The complete list can be obtained from dump‐
       keys(1) by saying  __dumpkeys -l__ .)  
       keyboard actions包括打印字符、切换终端、命令行编辑、启动系统等，具体
      可以使用 dumpkeys -l命令来查看

       Each keysym may be prefixed by a '+' (plus sign),  in  wich  case  this
       keysym  is  treated  as  a "letter" and therefore affected by the "Cap‐
       sLock" the same way as by "Shift" (to be correct, the CapsLock  __inverts__
       the  Shift  state).   The  ASCII letters ('a'-'z' and 'A'-'Z') are made
       CapsLock'able by default.  If Shift+CapsLock should not produce a lower
       case symbol, put lines like

              keycode 30 = +a  A

       in the map file.

       Which  of  the actions bound to a given key is taken when it is pressed
       depends on __what modifiers are in effect__ at that moment.   The  keyboard
       driver  supports  **9  modifiers**. These modifiers are labeled (completely
       arbitrarily) Shift, AltGr, Control, Alt, ShiftL, ShiftR,  CtrlL,  CtrlR
       and  CapsShift.   Each  of  these modifiers has an associated weight of
       power of two according to the following table:

              modifier                weight

              Shift
                                        1
              AltGr
                                        2
              Control
                                        4
              Alt
                                        8   //实际使用时，不使用16-256,故不区分L和R，只有Shift， Ctrl和Alt。
              ShiftL
                                       16
              ShiftR
                                       32
              CtrlL
                                       64
              CtrlR                   128
              CapsShift               256

       The effective action of a key is found out by __adding up the weights  of__
__       all the modifiers in effect__. By default, no modifiers are in effect, so
       action number **zero**, i.e. the one in the first column in a  key  defini‐
       tion  line,  is  taken  when  the key is pressed or released. When e.g.
       Shift and Alt modifiers are in effect, action  number  nine  (from  the
       10th column) is the effective one.

       Changing  the  state of what modifiers are in effect can be achieved by
       __binding appropriate key actions to desired keys（将keycode与key actions绑定）__.
      For  example,  binding
       the  symbol  Shift to a key sets the Shift modifier in effect when that
       key is pressed and cancels the effect of that modifier when the key  is
       released. （也就是说将Shift与某个keycode代表的按键绑定。）Binding 
       AltGr_Lock to a key sets AltGr in effect when the key
       is pressed and cancels the effect when the key is pressed  again.   (__By__
__       default Shift, AltGr, Control and Alt are bound to the keys that bear a__
__       similar label; AltGr may denote the right Alt key.__)。缺身情况下，Shift，Control
       Alt分别于键盘上同一个标示的按键绑定。

       Note that you should be very careful when binding  the  modifier  keys,
       otherwise  you can end up with an unusable keyboard mapping. If you for
       example define a key to have Control in its first column and leave  the
       rest  of  the  columns  to  be  VoidSymbols, you're in trouble. This is
       because pressing the key puts Control modifier in effect and  the  fol‐
       lowing  actions  are  looked  up  from  the fifth column (see the table
       above). So, when you release the key, the action from the fifth  column
       is  taken. It has VoidSymbol in it, so nothing happens. This means that
       the **Control modifier is still in effect, although you have released the**
**       key.**   Re-pressing  and releasing the key has no effect. To avoid this,
       __you should always define all the columns to have the same modifier sym‐__
     __  bol.__ There is a handy short-hand notation for this, see below.

       keysyms  can  be  given in decimal, octal, hexadecimal, unicode or sym‐
       bolic notation. 最常用同时也最具可移植性的是**符号化代表**(symbolic notation)，这些
       符号名称可以被loadkeys命令识别。
       The numeric notations use  the  same  format  as  with
       keynumber.   Unicode notation is "U+" followed by four hexadecimal dig‐
       its.  The __symbolic notation__ resembles that used by xmodmap(1).  Notable
       differences  are  the number symbols. The numeric symbols '0', ..., '9'
       of xmodmap(1) are replaced with the corresponding words 'zero',  'one',
       ... 'nine' to avoid confusion with the numeric notation.

       It  should  be  noted  that  using  numeric notation for the keysyms is
       highly unportable as the key action numbers may vary  from  one  kernel
       version  to  another  and the use of numeric notations is thus strongly
       discouraged. They are intended to be used only when you know there is a
       supported keyboard action in your kernel for which your current version
       of loadkeys(1) has no symbolic name.

       There is a number of short-hand notations to add readability and reduce
       typing work and the probability of typing-errors.

       First of all, you can give __a map specification line__, of the form

              keymaps 0-2,4-5,8,12

       to  indicate that the lines of the keymap will not specify all 256 col‐
       umns, but only the indicated ones. (In the  example:  only  the  plain,
       Shift,  AltGr,  Control,  Control+Shift, Alt and Control+Alt maps, that
       is, 7 columns instead of 256.这意味着Conrolt_L, Control_R等不再使用。
      具体可以参考/usr/share/kbd/keymaps/i386/qwerty/us.map.gz)
       When no such line is given, the keymaps  0-M  will  be defined, where M+1 is the maximum number of entries found
       in any definition line.

       Next, you can leave off any __trailing__ VoidSymbol entries from a key def‐
       inition  line. __注意必须是尾部的VoidSymbol.__ VoidSymbol  denotes a keyboard 
       action which produces no
       output and has no other effects either. For example, to define key num‐
       ber  30  to  output  **'a'  unshifted**, 'A' when pressed with Shift and do
       nothing when pressed with AltGr or other modifiers, you can write

              keycode  30 = a     A

       instead of the more verbose

              keycode  30 = a     A    VoidSymbol     VoidSymbol \
                        VoidSymbol VoidSymbol VoidSymbol ...

       For added convenience, you can usually get off with  still  more  terse
       definitions.  **If  you enter a key definition line with only and exactly**
**       one action code after the equals sign, it has **__a special__** meaning.**
       **也就是说，当按键定义行只指定了一个action code时，该action是有特殊含义的。**
**      如果该action code代表非字符，则该action会被默认在所有column上重复(这也是**
       pe**rsonal.map文件中的用法 **__keycode  56 = Control__**)。但是如果**
**       该action是字符，则相应column对应的action由modifier确定。** If the
       code (numeric or symbolic) is not an ASCII letter, it means the code is
       __implicitly replicated__ through all columns being defined.   If,  on  the
       other  hand,  the  action  code is an ASCII character in the range 'a',
       ..., 'z' or 'A', ..., 'Z' in the ASCII collating sequence, the  follow‐
       ing  definitions are made for the different modifier combinations, pro‐
       vided these are actually being defined.  (The table lists the two  pos‐
       sible  cases:  either  the  single  action code is a lower case letter,
       denoted by 'x' or an upper case letter, denoted by 'Y'.)

           modifier                symbol

           none                    x (小写字符)             Y(大写字符)
           Shift                   X              y
           AltGr                   x              Y
           Shift+AltGr             X              y
           Control                 Control_x      Control_y
           Shift+Control           Control_x      Control_y
           AltGr+Control           Control_x      Control_y
           Shift+AltGr+Control     Control_x      Control_y
           Alt                     Meta_x         Meta_Y
           Shift+Alt               Meta_X         Meta_y
           AltGr+Alt               Meta_x         Meta_Y
           Shift+AltGr+Alt         Meta_X         Meta_y
           Control+Alt             Meta_Control_x Meta_Control_y
           Shift+Control+Alt       Meta_Control_x Meta_Control_y
           AltGr+Control+Alt       Meta_Control_x Meta_Control_y
           Shift+AltGr+Control+Alt Meta_Control_x Meta_Control_y

===== SINGLE MODIFIER DEFINITIONS =====
       All the previous forms of key definition lines always  define  __all__  the
       M+1  possible  modifier  combinations  being  defined, whether the line
       actually contains that many action codes or not(loadkeys会自动补充没有指定的column).
      There is, however,  a  variation  of the definition syntax for __defining only single actions to__
     __  a particular modifier combination of a key.__ This is especially  useful,
       if  you load a keymap which doesn't match your needs in only some modi‐
       fier combinations, like AltGr+function keys. You can then make a  small
       local  file  redefining only those modifier combinations and loading it
       after the main file.  The syntax of this form is:

       { plain | <modifier sequence> } keycode keynumber = keysym

       , e.g.,
              **plain** keycode 14 = BackSpace
              control alt keycode 83 = Boot
              alt keycode 105 = Decr_Console
              alt keycode 106 = Incr_Console
       Using "plain" will define only the base entry of a key  (i.e.  the  one
       with  no  modifiers  in effect) without affecting the bindings of other
       modifier combinations of that key.

===== STRING DEFINITIONS =====
       In addition to comments and key definition lines, a keymap can  contain
       string  definitions.  These  are  used to define what each __function key（如F1-F12,__
       可以参考dumpkeys命令的输出__）__
       action code sends. The syntax of string definitions is:

              string keysym = "text"

       text can contain literal characters, octal character codes in the  for‐
       mat  of  backslash  followed by up to three octal digits, and the three
       escape sequences \n, \\, and \",  for  newline,  backslash  and  quote,
       respectively.

===== COMPOSE DEFINITIONS（获得注音字符，很少使用） =====
       Then there may also be compose definitions. They have syntax

              compose 'char' 'char' to 'char'
       and  describe  how  two  bytes are combined to form a third one (when a
       dead accent or compose key is used).  This is used to get accented let‐
       ters and the like on a standard keyboard.

===== ABBREVIATIONS =====
       Various abbreviations can be used with kbd-0.96 and later.

       __strings as usual__
              Defines  the  usual values of the strings (but not the keys they
              are bound to).

       compose as usual for "iso-8859-1"
              Defines the usual compose combinations.

       To find out what __keysyms__ there are available for use  in  keymaps,  use
       the command

              dumpkeys --long-info   //打印keymaps文件中可以使用的符号名称。

       Unfortunately,  there  is  currently no description of what each symbol
       does. It has to be guessed from the name or figured out from the kernel
       sources.

===== EXAMPLES =====
       (Be  careful  to use a keymaps line, like the first line of `dumpkeys`,
       or "keymaps 0-15" or so.)

       The following entry exchanges the left Control key and  the  Caps  Lock
       key on the keyboard:

              keycode  58 = Control
              keycode  29 = Caps_Lock

       Key  number 58 is normally the Caps Lock key, and key number 29 is nor‐
       mally the Control key.

       The following entry sets the Shift and Caps Lock keys  to  behave  more
       nicely, like in older typewriters. That is, pressing Caps Lock key once
       or more sets the keyboard in CapsLock state and pressing either of  the
       Shift keys releases it.

              keycode  42 = Uncaps_Shift
              keycode  54 = Uncaps_Shift
              keycode  58 = Caps_On

       The  following  entry  sets  the layout of the edit pad in the enhanced
       keyboard to be more like that in the VT200 series terminals:

              keycode 102 = Insert
              keycode 104 = Remove
              keycode 107 = Prior
              shift keycode 107 = Scroll_Backward
              keycode 110 = Find
              keycode 111 = Select
              control alt   keycode 111 = Boot
              control altgr keycode 111 = Boot

       Here's an example to bind the string "du\ndf\n" to the key AltGr-D.  We
       use the "spare" action code F100 not normally bound to any key.

              altgr keycode 32 = F100
              string F100 = "du\ndf\n"

===== SEE ALSO =====
       loadkeys(1), dumpkeys(1), showkey(1), xmodmap(1)



                                 24 April 1998                      KEYMAPS(5)
