Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-06-14T14:48:30+08:00

====== 全局描述符表 ======
Created Thursday 14 June 2012
http://baike.baidu.com/view/4109224.htm

全局描述符表 GDT（Global Descriptor Table） 在Protected Mode下，一个重要的必不可少的数据结构就是GDT（Global Descriptor Table）。

为什么要有GDT？我们首先考虑一下在Real Mode下的编程模型：

在Real Mode下，我们对一个内存地址的访问是通过__Segment:Offset__的方式来进行的，其中Segment是一个段的Base Address，一个Segment的最大长度是64 KB，这是16-bit系统所能表示的最大长度。而Offset则是相对于此Segment Base Address的偏移量。Base Address+Offset就是一个__内存绝对地址__。由此，我们可以看出，__一个段具备两个因素：Base Address和Limit（段的最大长度）__，而对一个内存地址的访问，则是需要指出两点：1.使用的是哪个段 2.相对于这个段Base Address的Offset，这个Offset应该小于此段的Limit。当然对于16-bit系统，Limit不用指定，__默认为最大长度64KB__，而 16-bit的Offset也永远不可能大于此Limit。我们在实际编程的时候，使用16-bit段寄存器CS（Code Segment），DS（Data Segment），SS（Stack Segment）来指定Segment，CPU将段寄存器中的数值向左偏移4-bit，放到20-bit的地址线上就成为20-bit的Base Address。

到了Protected Mode，__内存的管理模式分为两种，段模式和页模式，其中页模式也是基于段模式的__。也就是说，Protected Mode的内存管理模式事实上是：__纯段模式和段页式__。进一步说，段模式是必不可少的，而页模式则是可选的——如果使用页模式，则是段页式；否则这是纯段模式。

既然是这样，我们就先不去考虑页模式。对于段模式来讲，访问一个内存地址仍然使用Segment:Offset的方式，这是很自然的。由于 Protected Mode运行在32-bit系统上，那么Segment的两个因素：Base Address和Limit也**都是32位**的。IA-32允许将一个段的Base Address设为32位所能表示的任何值（Limit则可以被设为32位所能表示的2^12的整数倍的任何值），而不像Real Mode下，//一个段的Base Address只能是16的倍数//（因为其低4-bit是通过左移运算得来的，只能为0，从而达到使用16-bit段寄存器表示20-bit Base Address的目的），而一个段的Limit只能为固定值64 KB。__也就是说32系统中段位置和大小都是在0-4GB之间可变。__

另外，Protected Mode，顾名思义，就是__为段访问提供了保护机制__，也就说一个段的描述符需要规定对自身的访问权限（Access）。所以，在Protected Mode下，对一个段的描述则包括3方面因素：**[Base Address, Limit, Access]**，它们加在一起被放在一个64-bit长的数据结构(位于内存单元中)中，被称为__段描述符__。这种情况下，如果我们直接通过一个64-bit段描述符来引用一个段的时候，就必须使用一个64-bit长的段寄存器装入这个段描述符。但Intel为了保持向后兼容，__将段寄存器仍然规定为16-bit__（尽管每个段寄存器事实上有一个64-bit长的不可见部分，但对于程序员来说，段寄存器就是16-bit的），那么很明显，我们无法通过16-bit长度的段寄存器来直接引用64-bit的段描述符。

怎么办？解决的方法就是把这些长度为64-bit的段描述符放入一个数组中，而将段寄存器中的值作为下标索引来间接引用（事实上，是将段寄存器中的高13 -bit的内容作为索引，其它三位分别表示使用的是全局段还是局部段的TI、请求特权级RPL）。这个__全局的数组就是GDT__。事实上，在GDT中存放的不仅仅是段描述符，还有其它描述符，它们都是64-bit长，我们随后再讨论。

GDT可以被放在内存的任何位置，那么当程序员通过段寄存器来引用一个段描述符时，CPU必须知道GDT的入口，也就是基地址放在哪里，所以 Intel的设计者门提供了一个__寄存器GDTR__用来存放GDT的入口地址，程序员将GDT设定在内存中某个位置之后，可以通过__LGDT指令__将GDT的入口地址装入此寄存器，从此以后，CPU就根据此寄存器中的内容作为GDT的入口来访问GDT了。

GDT是Protected Mode所必须的数据结构，也是唯一的——不应该，也不可能有多个。另外，正象它的名字（Global Descriptor Table）所揭示的，它是全局可见的，对任何一个任务而言都是这样。

除了GDT之外，IA-32还允许程序员构建与GDT类似的数据结构，它们被称作__LDT（Local Descriptor Table）__，但与GDT不同的是，LDT在系统中可以存在多个，并且从LDT的名字可以得知，LDT不是全局可见的，它们__只对引用它们的任务可见__，每个任务最多可以拥有一个LDT。另外，每一个LDT自身作为一个段存在，它们的段描述符被放在GDT中。

IA-32为LDT的入口地址也提供了一个寄存器LDTR，因为__在任何时刻只能有一个任务在运行__，所以LDT寄存器全局也只需要有一个。如果一个任务拥有自身的LDT，那么当它需要引用自身的LDT时，它需要__通过LLDT将其LDT的段描述符装入此寄存器__。LLDT指令与LGDT指令不同的是，LGDT指令的操作数是一个32-bit的内存地址，这个内存地址处存放的是一个32-bit GDT的入口地址，以及16-bit的GDT Limit。

而LLDT指令的操作数是一个__16-bit__的选择子，这个选择子主要内容是：被装入的LDT的段描述符在GDT中的索引值——这一点和刚才所讨论的通过段寄存器访问段的情况是一样的。
{{../df.jpg}}{{../df2.jpg}}
