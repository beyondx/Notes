Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-11-20T11:48:13+08:00

====== linux input ecosystem ======
Created Tuesday 20 November 2012
http://joeshaw.org/2010/10/01/681/

1 October 2010

Over the past couple of days, I’ve been trying to figure out how input in Linux works on modern systems. There are lots of small pieces at various levels, and it’s hard to understand how they all interact. Things are not helped by the fact that things have changed quite a bit over the past couple of years as **HAL** — which I helped write — has been giving way to **udev**, and existing literature is largely out of date. This is my attempt at understanding how things work today, in the Ubuntu Lucid release.

===== kernel =====
In the Linux kernel’s **input system**, there are two pieces: __the device driver and the event driver__. The device driver talks to the hardware, obviously. Today, for most USB devices this is handled by **the usbhid driver**. The event drivers handle how to __expose the events generated by the device driver to userspace.__ Today this is primarily done through **evdev**, which creates character devices (typically named **/dev/input/eventN**) and communicates with them through **struct input_event** messages. See include/linux/input.h for its definition.

A great tool to use for getting information about evdev devices and events is **evtest**.

A somewhat outdated but still relevant description of the kernel input system can be found in the kernel’s Documentation/input/input.txt file.

===== udev =====
When a device is connected, the kernel creates an entry in **sysfs** for it and generates **a hotplug event**. __That hotplug event is processed by udev__, which applies some policy, attaches additional properties to the device, and ultimately creates a device node for you somewhere in /dev.

For input devices, the rules in **/lib/udev/rules.d/60-persistent-input.rules** are executed. Among the things it does is run a /**lib/udev/input_id** tool which queries the capabilities of the device from its sysfs node and sets environment variables like **ID_INPUT_KEYBOARD, ID_INPUT_TOUCHPAD, etc.** in the udev database.

For more information on input_id see the original announcement email to the hotplug list.

例如：udevadm info 的输出如下
P: /devices/platform/i8042/serio4
E: DEVPATH=/devices/platform/i8042/serio4
E: DRIVER=psmouse
E: MODALIAS=serio:ty01pr00id00ex00
E: SERIO_EXTRA=00
E: SERIO_ID=00
E: SERIO_PROTO=00
E: SERIO_TYPE=01
E: SUBSYSTEM=serio

P: /devices/platform/i8042/serio4/**input/input6**
E: ABS=11000003
E: DEVPATH=/devices/platform/i8042/serio4/input/input6
 --
E: NAME="SynPS/2 Synaptics TouchPad"
E: PHYS="isa0060/serio4/input0"
E: PRODUCT=11/2/7/1b1
E: PROP=1
E: __SUBSYSTEM=input__
E: TAGS=:seat:
E: USEC_INITIALIZED=13139

P: /devices/platform/i8042/serio4/input/input6/**event6  //设备路径path**
N: input/event6   **//kernel打印出的设备名称name**
__S: input/by-path/platform-i8042-serio-4-event-mouse  //设备文件的符号链接symlink__
__E: DEVLINKS=/dev/input/by-path/platform-i8042-serio-4-event-mouse  //udev导出的环境变量Env__
__E: DEVNAME=/dev/input/event6__
E: DEVPATH=/devices/platform/i8042/serio4/input/input6/event6
E: ID_INPUT=1
E: __ID_INPUT_TOUCHPAD=1__
E: __ID_PATH=platform-i8042-serio-4__
E: ID_PATH_TAG=platform-i8042-serio-4
E: ID_SERIAL=noserial
E: MAJOR=13
E: MINOR=70
E: SUBSYSTEM=input
E: USEC_INITIALIZED=13541

P: /devices/platform/i8042/serio4/input/input6/mouse0
N: input/mouse0
S: input/by-path/platform-i8042-serio-4-mouse
E: DEVLINKS=/dev/input/by-path/platform-i8042-serio-4-mouse
E: DEVNAME=/dev/input/mouse0
E: DEVPATH=/devices/platform/i8042/serio4/input/input6/mouse0
E: ID_INPUT=1
E: ID_INPUT_TOUCHPAD=1
E: ID_PATH=platform-i8042-serio-4
E: ID_PATH_TAG=platform-i8042-serio-4
E: ID_SERIAL=noserial
E: MAJOR=13
E: MINOR=32
E: SUBSYSTEM=input
E: USEC_INITIALIZED=13486

===== X =====
X has __a udev config backend__ which queries udev for the various input devices. It does this at startup and also watches for hotplugged devices. X looks at the different **ID_INPUT_*** properties to determine whether it’s a keyboard, a mouse, a touchpad, a joystick, or some other device. This information can be used in **/etc/X11/xorg.conf.d** files in the form of MatchIsPointer, MatchIsTouchpad, MatchIsJoystick, etc. in __InputClass__ sections to see whether to apply configuration to a given device.

Xorg has a handful of its own drivers to handle input devices, including **evdev, synaptics, and joystick**. And here is where things start to get confusing.

Linux has this great __generic event interface in evdev__, which means that very few drivers are needed to interact with hardware, since they’re not speaking device-specific protocols. Of the few needed on Linux nearly all of them speak evdev, including the three I listed above. 

evdev即事件驱动程序，为输入子系统提供了一个默认的事件处理方法。它接收来自硬件底层驱动程序的大多数事件，并使用相应的逻辑对其进行处理。evdev输入事件驱动
程序从底层驱动程序接收事件信息，将其反映到sysfs文件系统中，用户程序通过对sysfs文件系统的操作，就能够达到处理事件的目的。

The evdev driver provides basic __keyboard and mouse__ functionality, speaking — obviously — evdev through the **/dev/input/eventN** devices. It also handles things like the **lid（linux input device） and power switches**. This is the basic, generic input driver for Xorg on Linux.

The synaptics driver is the most confusing of all. It also speaks evdev to the kernel. On Linux it does not talk to the hardware directly, and is __in no way Synaptics™ hardware-specific__. The synaptics driver is simply a separate driver from evdev which adds a lot of features expected of touchpad hardware, for example two-finger scrolling. It should probably be renamed the “touchpad” module, except that on non-Linux OSes it can still speak the Synaptics protocol.

The joystick driver similarly handles joysticky things, but speaks evdev to the kernel rather than some device-specific protocol.

synaptics和joystick驱动程序其实都不是直接控制硬件的驱动，相反，它们从硬件驱动程序接收事件，然后进行处理，将结果通过evdev协议发给kernel。

X only has concepts of __keyboards and pointers, the latter of which includes mice, touchpads, joysticks, wacom tablets, etc__. 

X also has the concept of the __core keyboard and pointer__, which is how events are most often delivered to applications. By default all devices send core events, but certain setups might want to make devices non-core.

If you want to receive events for non-core devices, you need to use the **XInput or XInput2 extensions** for that. XInput exposes core-like events (like DeviceMotionNotify and DeviceButtonPress), so it is not a major difficulty to use, although its setup is annoyingly different than most other X extensions. I have not used XInput2.

Peter Hutterer’s blog is an excellent resource for all things input related in X.
