Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-06-15T17:03:14+08:00

====== Linux2.6.16的内存 ======
Created Friday 15 June 2012
http://blog.donews.com/qiaolin/archive/2006/11/07/1073616.aspx

——针对intel i386结构

1.  Intel结构的__硬件支持__
a) 内存分段(Segmention)
每个段都有__段描述符__(Segmen Descriptor)，大小为8个byte，存于内存中。有两个地方可以存放断描述符：__GDT和LDT__。分别有两个寄存器来保存GDT和LDT的信息：__GDTR和LDTR__，记录了段描述符的起始地址和长度。每个段描述符里面记录本段的__起始线性地址__(Linear adress)和各种标志及权限。

b) 逻辑地址
一个逻辑地址由两部分组成：__段描述子(Segment Selector)和段内偏移(Offset)__。一个段描述子由16个bits组成，高13为指明段描述符索引，后两位指明RPL(Request Privilege Level)，中间一位指明在GDT还是LDT里寻找段描述符。

c) CS，DS和SS
为了加速__逻辑地址到线性地址__的转换，Intel提供了6个段寄存器：CS,DS,SS,ES,FS,GS。__后三个是通用段寄存器__，前面三个由特殊用法：CS指明指令地址的段；DS指明数据段，SS指明堆栈。这些寄存器__都是16位__，用于**保存逻辑地址的段选择子**。每当使用指令(jmp,call等)修改它们的值时，硬件会自动根据这些段选择子__从内存中取出相应的段描述符存于对应的一个不可编程的8－byte的寄存器中__，从而加速寻找过程。

d) 分页(Paging)
在Intel中，把线性地址中连续的一段固定长度划成为一个页面（Page），在映射到物理内存的时候，这些连续的线性地址被映射到连续的物理地址上，从而物理地址也被分页（Page）。有个硬件单元称为“Page Unit”，用来完成线性地址到物理地址的转换，而转换的基本单位就是页。在cr0这个寄存器里面有__一个PF的标志__为，如果为0，则__直接把线性地址解释成物理地址__，否则就需要使用页表来转化。

e) 页表
一般来说，Intel使用二级页表。也就是说一个线性地址的前10位作为页目录索引，中间10位作为页表索引，后面的22位作为页内偏移。

f)  CR3
页目录(Page Direcotry)的__起始物理地址(由硬件MMU使用)__存在cr3寄存器里面，每个进程都有自己的页目录和页表，所以不同进程的cr3是不同的（除非共享用户地址空间）。从cr3出发，任何一个线性地址就能找到一个页表项，描述了2^12个byte的内存，还有权限和是否分配物理内存等。如果没有正常找到物理页面，就会产生Page Fault这个异常。

2.Linux中的段：
为了简化和易于移植，linux没有使用Intel分段机制的复杂功能，实际上，linux主要维护了四个段：
{{./Selection_042.png}}
这个四个段的起始地址都是0，范围都是4G，因此__逻辑地址(或者叫虚拟地址)和线性地址是完全相同__的。这样有一个最大的优点，就是用户态和核心态切换时，CS,DS,SS的值就非常固定，并且可以放心的使用虚拟地址来充当线性地址。

3.Linux的四级页表映射：
类似于前面叙述的二级映射，Linux kernel使用四级映射，便于扩展，更加灵活，但是在i386上就必须做出调整，使软硬件互相配合。这四级是：Page Global Directory，Upper Directory，Middle Directory，Page Table。在i386里面，因为硬件只有四级，所以kernel实现时把Upper 和 Middle Directory都直接设在了PGD里面，也就是说PGD的每一项直接就映射成一个Upper，而一个upper直接就映射成Middle，__逻辑上经过了两次映射__，实际上数值没有发生任何变化，这样就和i386的硬件体制吻合了。

4.物理内存：
Kernel并不能使用所有的物理内存地址空间，因为有些物理内存被硬件使用，有些是ROM，有些是映射I/O。而内核的映像和初始化的内核数据也不能被覆盖，因此能够__自由__被内核和用户空间使用的物理内存必须除去上述的内存。这些__能够自由使用的物理内存是在系统启动的时候通过查询BIOS获得的__。machine_specific_memory_setup( )和setup_memory（）用来获取并分析物理内存。

5.进程的地址空间：
默认配置下，一个进程的线性空间(也即虚拟地址空间)是4G，kernel使用高地址的1G，用户态下面使用底下的3G。__各进程共享内核空间，所以0xC0000000（3G）以上的线性地址的页目录和页表应该是一摸一样的。__4G的线性地址的__最高128M用来作为动态映射，也就是不是线性的__，而0xC0000000开始的内核线性地址到4G-128M 之间是线性映射的，也即0xC0000000对应物理内存地址为0，依次类推。
