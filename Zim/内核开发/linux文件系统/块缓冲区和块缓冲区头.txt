Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-10-24T15:19:39+08:00

====== 块缓冲区和块缓冲区头 ======
Created Wednesday 24 October 2012
http://edsionte.com/techblog/archives/4085

在详细说明__块缓冲区__和__块缓冲区头__之前，我们先来看一下**块设备**中的两个基本概念：扇区和块。

__扇区是块设备传输数据的基本单元（设备的物理属性）__，也就是说**它是块设备中最小的寻址单位**，扇区通常的大小为**512B**。__块是内核对文件系统的一种抽象__，也就是说**内核执行的所有磁盘操作都是以块为基本单位的（不同的文件系统，其块大小可能不同）**。

可以简单的将扇区和块理解为：**扇区是硬件设备传输数据的最小单位，而块是操作系统传输数据的最小单位**。一个块通常对应一个或多个**相邻**的扇区，由于__内核将块作为对文件系统操作的最小单位__，因此__VFS将其看作是单一的数据单元__。

当内核从磁盘读入数据后或者即将写数据到磁盘时，它需要将数据写入一些块缓冲区。__buff缓冲区其实就是物理页框(page)的一部分__，因此一个物理页框可能包含一个或多个块缓冲区。根据上述描述的关系，包含磁盘数据的物理页框构造如下图：

正如上面所说，块缓冲区是页框的一部分，因此**不用特别描述块缓冲区中的数据**。__每个块缓冲区都对应一个块缓冲区头buffer_head__，他们的关系如同物理页框和物理页框描述符，前者用来存储数据，后者是对前者的属性以及控制信息的描述。块缓冲区头、块缓冲区以及页框的关系如下：
{{./buffer_head.jpeg}}
内核中使__用buffer_head结构来描述缓冲区头__，该结构中的部分字段解释如下：
struct buffer_head {
         unsigned long b_state;          
         struct buffer_head *b_this_page;
         struct page *b_page;            
         atomic_t b_count;               
         u32 b_size;                     
         sector_t b_blocknr;             
         char *b_data;                  
         struct block_device *b_bdev;
         bh_end_io_t *b_end_io;         
        void *b_private;               
         struct list_head b_assoc_buffers; 
}
b_state：对块缓冲区状态的描述。
b_this_page：在一个页框中，可能包含多个块缓冲区。__一个页框内的所有缓冲区形成循环链表__，该字段指向下一个块缓冲区。
b_page：指向缓冲区所在**页框的描述符**。
b_size：块缓冲区大小。
b_data：当前块在作为缓冲的**页框内的位置**。
b_bdev：指向块设备的指针。
