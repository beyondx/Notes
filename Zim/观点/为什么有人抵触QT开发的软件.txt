Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-10-23T13:40:05+08:00

====== 为什么有人抵触QT开发的软件 ======
Created Tuesday 23 October 2012
http://forum.ubuntu.org.cn/viewtopic.php?f=162&t=389380

不是抵触，而是你可能并不懂得UNIX的开发哲学。QT的封装作为一个GUI开发库来讲，太过了，有点走偏，它的方向是朝着微软的库的，使用QT可以编网络，可以编数据库，可以编…… 但是这些对于高级UNIX程序员来说是鸡肋，高级程序员或有见识的公司不会将自己的产品寄托在这样一个库上。

举个例子，IBM、Oracle哪个在使用QT的库开发东西，没有。并不是不能用，而是如果使用了QT那么产品的后续维护，迭代开发全部成为问题。

什么是经典的UNIX开发模式，说白了，那就是C/S模式，或者是经典IPC版本的C/S模式。其实对于C/S模式来说，使用Socket或其他IPC都没有什么区别，概念上都是相同的。看看在UNIX业界能吃诧风云几十年的软件，没有一个是以GUI为基础的。Emacs是这样，VI是这样，Oracle数据库是这样，DB2也是这样，并不是说GUI不重要，而是缺了命令行就不称为UNIX，UNIX就是命令行的文化。如果你看过《UNIX编程艺术》就会有体会，为什么只有这些软件才能有长久的生命力。

那么这些成功软件的模式是怎么样的呢？必须有基于命令行的程序，或者在某种意义上说是服务器。而这些程序具有及其丰富的功能，并能够提供恰当的调用接口，或者说通过各种IPC实现的协议。对这些软件，你不需要经常变更，你需要的是维护软件的稳定性，甚至协议的稳定性。适时的添加新功能，这些功能无关乎最终用户是否能用到，而是站在协议的角度上，结果是能否提供更完整、强大的协议。

对于GUI开发者，他们需要做的就是按照协议需求，开发一个GUI外壳，将协议可以提供的功能展示给最终用户。而这点工作与开发的基础软件相比通常是相当简单的，不要认为开发一个GUI程序很难。可以这样说，只要你的协议制定完善，有设计相当完美的IPC方式，或者有系统接口模糊层用来提供平台无关的接口，那么可以开发出各种各样的GUI外壳。举个实际的例子，vim，都知道vim命令行就可以使用，但是也有GUI版的，那么GUI版的vim难道就是用QT这类的东西开发出一个完整的vim吗？绝不是，这些GUI外壳只是按照vim的协议来控制实际的基础的vim并提供给你结果，接受你的输入。所以对vim来说，GUI无关紧要，没有GUI vim还是vim，但是对这些GUI外壳来说，没有vim它们什么都不是，甚至不能运行。同时你可以提供各种GUI外壳，比如Tk版的、GTK版的、QT版的、Mac版的、Windows版的，更重要的是，GUI技术通常更新换代速度迅速，这样就可以使你有极大的灵活性，比如你不喜欢之前的GUI外壳了，很好，你可以换上当前最新的开发库，用最新的开发技术去实现与基础程序的IPC，这样做可行的基础是，UNIX承诺，基础底层长久不变，这也就是为什么UNIX被高级程序员视为珍宝的原因，知识不会被淘汰，常用的接口永远不会消失。如果了解Oracle数据库和DB2的话，这个就体现的更加具体。其实对于商业数据库来说，各个厂商对产品的新功能的添加远不及维护现行产品的稳定性，但是对GUI界面，基本是两三个版本就一个大变化，提供更好的用户体验。如果研究基础的数据库，就会发现没有太多变化，有些基础的稳定的子程序可能十好几年都没变化过，只不过是version的变化而已。

从另一个方向在看这个问题，试想vim、Oracle、DB2是用QT这些写的，这些软件能否如今天这么成功呢？先不管Oracle、DB2能不能用QT写，就算能写，这样的产品你敢用吗？如果VIM是用QT写的，你怎么做，去用QT实现一个行编辑器？你能否保证QT的接口10年不变，能否保证你用的QT技术在10年后依然光彩照人？明确的告诉你，不可能！

所以现在你明白为什么UNIX高级程序员对QT一类的东西不感冒了吧。那点东西技术含量太低，没意思，整天追着版本跑，有没有都无所谓。
