Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-11-22T20:14:59+08:00

====== Linux下的硬件驱动——USB设备 ======
Created Tuesday 22 November 2011
http://www.ibm.com/developerworks/cn/linux/l-usb/index1.html

===== 前言 =====

USB是英文"Universal Serial Bus"的缩写，意为"通用串行总线"。是由Compaq(康柏)、DEC、IBM、Intel、NEC、微软以及Northern Telecom（北方电讯）等公司于__1994年11__月共同提出的，主要目的就是为了解决接口标准太多的弊端。USB使用一个4针插头作为标准插头，并通过这个标准接头，采用菊花瓣形式把所有外设连接起来，它采用串行方式传输数据，目前最大数据传输率为12Mbps, 支持多数据流和多个设备并行操作，允许外设热插拔。

目前USB接口虽然只发展了2代（USB1.0/1.1，USB2.0），但是USB综合了一个多平台标准的所有优点 -- 包括降低成本，增加兼容性，可连接大量的外部设备，融合先进的功能和品质。使其逐步成为PC接口标准，进入了高速发展期。

那么对于使用Linux系统，正确支持和配置常见的USB设备，就是其使用必不可少的关键一步。


===== 相关技术基础 =====

==== 模块（驱动程序） ====

模块（module）是在内核空间运行的程序，实际上是一种__目标对象文__件，没有链接，不能独立运行，但是可以装载到系统中作为内核的一部分运行，从而可以动态扩充内核的功能。模块最主要的用处就是用来实现设备驱动程序。

Linux下对于一个硬件的驱动，可以有两种方式：直接加载到内核代码中，启动内核时就会驱动此硬件设备。另一种就是以模块方式，编译生成一个.o文件。当应用程序需要时再加载进内核空间运行。所以我们所说的一个硬件的驱动程序，通常指的就是一个驱动模块。

==== 设备文件 ====

对于一个设备，它可以在/dev下面存在一个对应的__逻辑设备节点__，这个节点以文件的形式存在，但它不是普通意义上的文件，它是设备文件，更确切的说，它是设备节点。这个节点是通过mknod命令建立的，其中指定了主设备号和次设备号。主设备号表明了某一类设备，一般对应着确定的驱动程序；次设备号一般是区分不同属性，例如不同的使用方法，不同的位置，不同的操作。这个设备号是从/proc/devices文件中获得的，所以一般是__先有驱动程序在内核中，才有设备节点在目录中__。这个设备号（特指主设备号）的主要作用，就是声明设备所使用的驱动程序。驱动程序和设备号是一一对应的，当你打开一个设备文件时，操作系统就已经知道这个设备所对应的驱动程序。

==== SCSI 设备 ====

SCSI是有别于IDE的一个计算机标准接口。现在大部分平板式扫描仪、CD-R刻录机、MO光磁盘机等渐渐趋向使用SCSI接口，加之SCSI又能提供一个高速传送通道，所以，接触到SCSI设备的用户会越来越多。Linux支持很多种的SCSI设备，例如：SCSI硬盘、SCSI光驱、SCSI磁带机。更重要的是，Linux提供了__IDE设备对SCSI的模拟__（ide-scsi.o模块），我们通常会就把IDE光驱模拟为SCSI光驱进行访问。因为在Linux中很多软件都只能操作SCSI光驱。例如大多数刻录软件、一些媒体播放软件。通常我们的__USB存储设备__，也模拟为SCSI硬盘而进行访问。

=== Linux硬件驱动架构 ===
{{~/sync/notes/zim/Linux/硬件探秘/Linux下的硬件驱动——USB设备/image001.gif}}
对于一个硬件，Linux是这样来进行驱动的：首先，我们必须提供一个.o的驱动模块文件（这里我们只说明模块方式，其实内核方式是类似的）。我们要使用这个驱动程序，首先要加载运行它（insmod *.o）。这样驱动就会根据自己的类型（字符设备类型或块设备类型，例如鼠标就是字符设备而硬盘就是块设备）向系统注册，__注册成功系统会反馈一个主设备号__，这个主设备号就是系统对它的唯一标识（例如硬盘块设备在/proc/devices中显示的主设备号为3 ，我们用ls -l /dev/had看到的主设备就肯定是3）。驱动就是根据此主设备号来创建一个一般放置在/dev目录下的设备文件（mknod命令用来创建它，它必须用主设备号这个参数）。在我们要访问此硬件时，就可以对设备文件通过open、read、write等命令进行。而驱动就会接收到相应的read、write操作而根据自己的模块中的相应函数进行了。

其中还有几个比较有关系的东西：一个是/lib/modules/2.4.XX目录，它下面就是针对__当前内核版本__的模块。只要你的模块依赖关系正确（可以通过**depmod**设置），你就可以通过**modprobe** 命令加载而不需要知道具体模块文件位置。 另一个是/etc/modules.conf文件，它定义了一些常用设备的别名。系统就可以在需要此设备支持时，正确寻找驱动模块。例如alias eth0 e100，就代表第一块网卡的驱动模块为e100.o。他们的关系图如下：


===== 配置USB设备 =====

=== 内核中配置. ===

要启用 Linux USB 支持，首先进入"USB support"节并启用"Support for USB"选项（对应模块为__usbcore__.o）。尽管这个步骤相当直观明了，但接下来的 Linux USB 设置步骤则会让人感到糊涂。特别地，现在需要选择用于系统的正确 __USB 主控制器__驱动程序。选项是"EHCI" （对应模块为__ehci-hcd__.o）、"UHCI" （对应模块为uhci-hcd.o）、"UHCI (alternate driver)"和"OHCI" （对应模块为ohci-hcd.o）。这是许多人对 Linux 的 USB 开始感到困惑的地方。

要理解"EHCI"及其同类是什么，首先要知道每块支持插入 USB 设备的主板或 PCI 卡都需要有 USB 主控制器芯片组。这个特别的芯片组与插入系统的 USB 设备进行相互操作，并负责处理允许 USB 设备与系统其它部分通信所必需的所有低层次细节。

Linux USB 驱动程序有三种不同的 USB 主控制器选项是因为在主板和 PCI 卡上有三种不同类型的 USB 芯片。"EHCI"驱动程序设计成为实现新的高速 **USB 2.0** 协议的芯片提供支持。"OHCI"驱动程序用来为__非 PC 系统__上的（以及带有 SiS 和 ALi 芯片组的 PC 主板上的）USB 芯片提供支持。"UHCI"驱动程序用来为大多数其它 PC 主板（包括 Intel 和 Via）上的 USB 实现提供支持。只需选择与希望启用的 USB 支持的类型对应的"?HCI"驱动程序即可。如有疑惑，为保险起见，可以启用"EHCI"、"UHCI" （两者中任选一种，它们之间没有明显的区别）和"OHCI"。（ 赵明注：根据文档，EHCI已经包含了UHCI和OHCI，但目前就我个人的测试，单独加EHCI是不行的，通常我的做法是根据主板类型加载UHCI或OHCI后，再加载EHCI这样才可以支持USB2.0设备）。

启用了"USB support"和适当的"?HCI"USB 主控制器驱动程序后，使 USB 启动并运行只需再进行几个步骤。应该启用"Preliminary USB device **filesystem**"，然后确保启用所有特定于将与 Linux 一起使用的实际 USB__ 外围设备的驱动程序__。例如，为了启用对 USB 游戏控制器的支持，我启用了"USB Human Interface Device (full HID) support"。我还启用了主"Input core support" 节下的"Input core support"和"Joystick support"。

一旦用新的已启用 USB 的内核重新引导后，若/proc/bus/usb下没有相应USB设备信息，应输入以下命令将 USB 设备文件系统手动挂装到 /proc/bus/usb：

# mount -t __usbdevfs __none /proc/bus/usb   #如果不成功，试试__usbfs__


为了在系统引导时自动挂装 USB 设备文件系统，请将下面一行添加到 /etc/fstab 中的 /proc 挂装行之后：

none /proc/bus/usb usbdevfs defaults 0 0 

=== 模块的配置方法. ===

在很多时候，我们的USB设备驱动并不包含在内核中。其实我们只要根据它所需要使用的模块，逐一加载。就可以使它启作用。

首先要确保在内核编译时以模块方式选择了相应支持。这样我们就应该可以在/lib/modules/2.4.XX目录看到相应.o文件。在加载模块时，我们只需要运行modprobe xxx.o就可以了（modprobe主要加载系统已经通过__depmod__登记过的模块，insmod一般是针对具体.o文件进行加载）

对应USB设备下面一些模块是关键的。
usbcore.o	要支持usb所需要的最基础模块
uhci-hcd.o	（已经提过）
ohci-hce.o	（已经提过）
ehci-hcd.o	（已经提过 usb2.0）
hid.o	USB人机界面设备，像鼠标呀、键盘呀都需要
usb-storage.o	USB存储设备，U盘等用到

相关模块
ide-disk.o	IDE硬盘
ide-scsi.o	把IDE设备模拟SCSI接口
scsi_mod.o	SCSI支持
sd_mod.o	SCSI硬盘
sr_mod.o	SCSI光盘
sg.o	SCSI通用支持（在某些探测U盘、SCSI探测中会用到）

=== 常见USB设备及其配置 ===

在Linux 2.4的内核中已经支持不下20种设备。它支持几乎所有的通用设备如键盘、鼠标、modem、打印机等，并不断地添加厂商新的设备象数码相机、MP3、网卡等。下面就是几个最常见设备的介绍和使用方法：

=== USB鼠标： ===

键盘和鼠标属于低速的输入设备，对于已经为用户认可的PS/2接口，USB键盘和USB鼠标似乎并没有太多更优越的地方。现在的大部分鼠标采用了PS/2接口，不过USB接口的鼠标也越来越多，两者相比，各有优势：一般来说，USB的鼠标接口的__带宽__大于PS/2鼠标，也就是说在同样的时间内，USB鼠标扫描次数就要多于PS/2鼠标，这样在定位上USB鼠标就更为精确；同时USB接口鼠标的默认__采样率__也比较高，达到125HZ，而PS/2接口的鼠标仅有40HZ（Windows 9x/Me）或是60HZ（Windows NT/2000）。

对于USB设备你当然必须先插入相应的USB控制器模块：uhci-hcd.o或ohci-hcd.o

	modprobe uhci-hcd


USB鼠标为了使其正常工作，您必须先插入模块usbmouse.o和mousedev.o

	modprobe usbmouse
	modprobe mousedev


若你把HID input layer支持和input core 支持也作为模块方式安装，那么启动hid模块和input模块也是必要的。

	modprobe hid
	modprobe input


=== USB键盘： ===

一般的，我们现在使用的键盘大多是PS/2的，USB键盘还比较少见，但是下来的发展，键盘将向USB接口靠拢。使用USB键盘基本上没有太多的要求，只需在主板的BIOS设定对USB键盘的支持，就可以在各系统中完全无障碍的使用，而且更可以真正做到在即插即用和热插拔使用,并能提供两个USB连接埠：让您可以轻易地直接将具有USB接头的装置接在您的键盘上，而非计算机的后面。

同样你当然必须先插入相应的USB控制器模块：uhci-hcd.o或ohci-hcd.o

	modprobe uhci-hcd


然后您还必须插入键盘模块usbkbd.o，以及keybdev.o，这样usb键盘才能够正常工作。此时，运行的系统命令：

modprobe usbkbd
modprobe keybdev


同样若你把HID input layer支持和input core 支持也作为模块方式安装，那么启动hid模块和input模块也是必要的。

=== U盘和USB读卡器： ===

数码存储设备现在对我们来说已经是相当普遍的了。CF卡、SD卡、Memory Stick等存储卡已经遍及我们的身边，通常，他们的读卡器都是USB接口的。另外，很多MP3、数码相机也都是USB接口和计算机进行数据传递。更我们的U盘、USB硬盘，作为移动存储设备，已经成为我们的必须装备。

在Linux下这些设备通常都是以一种叫做usb-storage的方式进行驱动。要使用他们必须加载此模块

	modprobe usb-storage


当然，usbcore.o 和usb-uhci.o或usb-ohci也肯定是不可缺少的。另外，若你系统中SCSI支持也是模块方式，那么下面的模块也要加载

	modprobe scsi_mod
	modprobe sd_mod


在加载完这些模块后，我们插入U盘或存储卡，就会发现系统中多了一个SCSI硬盘，通过正确地mount它，就可以使用了（SCSI硬盘一般为/dev/sd?，可参照文章后面的常见问题解答）。

	mount /dev/sda1 /mnt


Linux支持的其他USB设备。

MODEM--（比较常见）

网络设备

摄像头--（比较常见）例如ov511.o

联机线--可以让你的两台电脑用USB线实现网络功能。usbnet.o

显示器--（我没见过）

游戏杆

电视盒--（比较常见）

手写板--（比较常见）

扫描仪--（比较常见）

刻录机--（比较常见）

打印机--（比较常见）

注意：上面所说的每个驱动模块，并不是都要手动加载，有很多系统会在启动或你的应用需要时自动加载的，写明这些模块，是便于你在不能够使用USB设备时，可以自行检查。只要用lsmod确保以上模块已经被系统加载，你的设备就应该可以正常工作了。当然注意有些模块已经以内核方式在kernel启动时存在了（这些模块文件在/lib/modules/2.4.XX中是找不到的）。



=== 最常遇见的USB问题 ===

    有USB设备的系统安装完redhat 7.3启动死机问题

    有USB设备，当你刚装完redhat 7.3第一次启动时，总会死掉。主要原因是Linux在安装时探测到有usb-uhci和ehci-hcd两个控制器，但在启动时，加载完usb-uhci再加载ehci-hcd就会有冲突。分析认为redhat7.3系统内核在支持USB2.0标准上存在问题。在其他版本的Linux中均不存在此问题。

    解决办法：在lilo或grub启动时用__命令行传递参数init=/sbin/init__。这样在启动后就不运行其他服务而直接启动shell。然后运行
    mount -o remount,rw / 使/ 可写，init直接启动的系统默认只mount /为只读
    然后vi /etc/modules.config文件
    删除alias usb-controller1 ehci-hcd一行。或前面加#注释掉
    然后mount -o remount,ro / 使/ 只读，避免直接关机破坏文件系统
    然后就可以按Ctrl-Alt-Delete直接重启了
    或许，你有更简单的办法：换USB键盘和鼠标为PS2接口，启动后修改/etc/modules.config文件。
    我们已经知道U盘在Linux中会模拟为SCSI设备去访问，可怎么知道它对应那个SCSI设备呢？

    方法1：推测。通常你第一次插入一个SCSI设备，它就是sda，第二个就是sdb以此类推。你启动Linux插入一个U盘，就试试sda，换了一个就可能是sdb。这里注意两个特例：1） 你用的是联想U盘，它可能存在两个设备区（一个用于加密或启动电脑），这样就可能一次用掉两个sda、sdb，换个U盘就是sdc、sdd。2） 联想数码电脑中，可能已经有了六合一读卡器。它同样也是USB存储设备。它会占掉一个或两个SCSI设备号。

    方法2：看信息。其实，只要你提前把usb-storage.o、scsi_mod.o、sd_mod.o模块加载（直接在kernel中也可以）了，在你插入和拔出U盘时，系统会自动打出信息如下：

    SCSI device sda: 60928 512-byte hdwr sectors ( 31 MB )
    sda: Write Protect is on


    根据此信息，你就知道它在sda上了。当然，可能你的系统信息级别比较高，上述信息可能没有打出，这时候你只要tail /var/log/messages就可以看到了。

    方法3：同样，cat /proc/partitions也可以看到分区信息，其中sd?就是U盘所对应的了。若根本没有sd设备，就要检查你的SCSI模块和usb-storage模块是否正确加载了。
    在使用U盘或存储卡时，我该mount /dev/sda还是/dev/sda1呢？

    这是一个历史遗留问题。存储卡最初尺寸很小，很多厂商在使用时，就直接使用存储，不含有分区表信息。而随着存储卡尺寸的不断扩大，它也就引入了类似硬盘分区的概念。例如/dev/hda你可以分成主分区hda1、hda2扩展分区hda3，然后把扩展分区hda3又分为逻辑分区hda5、hda6、hda7等。这样，通常的U盘就被分成一个分区sda1，类似把硬盘整个分区分成一个主分区hda1。实际上，我们完全可以通过fdisk /dev/sda对存储卡进行完全类似硬盘的分区方式分成sda1、sda2甚至逻辑分区sda5、sda6。实际上，对USB硬盘目前你的确需要这样，因为它通常都是多少G的容量。而且通常，它里面就是笔记本硬盘。

    一个好玩的问题。你在Linux下用fdisk /dev/sda 对U盘进行了多分区，这时候到windows下，你会发现怎么找，怎么格式化，U盘都只能找到第一个分区大小尺寸，而且使用看不出任何问题。这主要是windows驱动对U盘都只支持一个分区的缘故。你是不是可以利用它来进行一些文件的隐藏和保护？你是不是可以和某些人没玩过Linux的人开些玩笑：你的U盘容量变小了J。

    现在较多的数码设备也和windows一样，是把所有U盘容量分为一个，所以在对待U盘的时候，通常你mount的是sda1。但对于某些特殊的数码设备格式化的U盘或存储卡（目前我发现的是一款联想的支持模拟USB软盘的U盘和我的一个数码相机），你就要mount /dev/sda。因为它根本就没分区表（若mount /dev/sda1通常的效果是死掉）。其实，这些信息，只要你注意了/proc/partitions文件，都应该注意到的。
    每次插入U盘，都要寻找对应设备文件名，都要手动mount，我能不能做到象windows那样插入就可以使用呢。

    当然可以，不过你需要做一些工作。我这里只提供一些信息帮助你去尝试完成设置：Linux内核提供了一种叫hotplug支持的东西，它可以让你系统在PCI设备、USB等设备插拔时做一些事情。而automount 功能可以使你的软驱、光盘等设备的分区自动挂载和自动卸载。你甚至可以在KDE桌面中创建相应的图标，方便你操作。具体设置方法就要你自己去尝试了。反正我使用Linux已经麻木了，不就是敲一行命令嘛。


参考资料

    《LINUX设备驱动程序》
    ALESSANDRO RUBINI著
    LISOLEG 译
    《Linux系统分析与高级编程技术》
    周巍松 编著
    Linux Kernel-2.4.20源码和文档说明 
